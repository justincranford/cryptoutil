name: CI - End-to-End Testing
# CROSS-PLATFORM COMPATIBILITY: All file references in this workflow MUST use relative paths
# to support both GitHub Actions Ubuntu runners and Windows `act` local runner testing.
# Absolute paths (e.g., C:\...) break cross-platform compatibility.
# Example: Use './deployments/compose/compose.yml'

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.github/copilot-instructions.md'
      - '.github/instructions/**'
      - 'dast-reports/**'
      - 'nohup.out'
      - 'LICENSE'
      - '.editorconfig'
      - '.gitignore'
      - '.gitattributes'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/pull_request_template.md'
      - '.github/dependabot.yml'
      - '**/*.log'
      - '**/*.sarif'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.github/copilot-instructions.md'
      - '.github/instructions/**'
      - 'dast-reports/**'
      - 'nohup.out'
      - 'LICENSE'
      - '.editorconfig'
      - '.gitignore'
      - '.gitattributes'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/pull_request_template.md'
      - '.github/dependabot.yml'
      - '**/*.log'
      - '**/*.sarif'
  workflow_dispatch:

env:
  GO_VERSION: '1.25.3'

jobs:
  # End-to-End Testing - Full system validation with Docker Compose
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest

    steps:
      - name: Workflow Start - CI - End-to-End Testing (ci-e2e.yml)
        run: |
          echo "=========================================="
          echo "Workflow: ${{ github.workflow }}"
          echo "File: .github/workflows/ci-e2e.yml"
          echo "Job: e2e"
          echo "Triggered by: ${{ github.event_name }}"
          echo "=========================================="

      - name: Checkout code
        uses: actions/checkout@v5.0.0
        with:
          sparse-checkout-cone-mode: false

      - name: Set up Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download dependencies
        run: go mod download

      - name: Pre-pull Docker images (parallel)
        run: |
          echo "🐳 Pre-pulling Docker images in parallel..."

          # Array of all images used in this workflow (both runtime and build-time)
          IMAGES=(
            "postgres:18"
            "otel/opentelemetry-collector-contrib:latest"
            "grafana/otel-lgtm:latest"
            "alpine:latest"
            "golang:1.25.1"
            "alpine:3.19"
          )

          # Pull all images concurrently
          for image in "${IMAGES[@]}"; do
            echo "Pulling $image..."
            docker pull "$image" &
          done

          # Wait for all pulls to complete
          wait

          echo "✅ All images pre-pulled successfully"

      - name: Verify dependencies
        run: go mod verify

      - name: Clean and verify module files
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Build Docker images
        run: |
          echo "🏗️ Building Docker images for end-to-end testing..."
          docker compose -f ./deployments/compose/compose.yml build

      - name: Run E2E tests
        run: |
          echo "🧪 Running end-to-end tests..."
          go test -tags=e2e -v -timeout=30m ./internal/test/e2e/

      - name: E2E test summary
        if: always()
        run: |
          echo "## 🧪 End-to-End Testing Results" >> $GITHUB_STEP_SUMMARY
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ End-to-end tests completed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ End-to-end tests failed." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Stop services
        if: always()
        run: |
          echo "🧹 Stopping services..."
          docker compose -f ./deployments/compose/compose.yml down -v
