name: CI - Quality Testing
# CROSS-PLATFORM COMPATIBILITY: All file references in this workflow MUST use relative paths
# to support both GitHub Actions Ubuntu runners and Windows `act` local runner testing.
# Absolute paths (e.g., C:\...) break cross-platform compatibility.
# Example: Use './deployments/compose/compose.yml'

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.github/copilot-instructions.md'
      - '.github/instructions/**'
      - 'dast-reports/**'
      - 'nohup.out'
      - 'LICENSE'
      - '.editorconfig'
      - '.gitignore'
      - '.gitattributes'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/pull_request_template.md'
      - '.github/dependabot.yml'
      - '**/*.log'
      - '**/*.sarif'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.github/copilot-instructions.md'
      - '.github/instructions/**'
      - 'dast-reports/**'
      - 'nohup.out'
      - 'LICENSE'
      - '.editorconfig'
      - '.gitignore'
      - '.gitattributes'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/pull_request_template.md'
      - '.github/dependabot.yml'
      - '**/*.log'
      - '**/*.sarif'

env:
  GO_VERSION: '1.25.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Formatting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Workflow Start - CI - Quality Testing / code-quality (ci-quality.yml)
        run: |
          echo "=========================================="
          echo "Workflow: ${{ github.workflow }}"
          echo "File: .github/workflows/ci-quality.yml"
          echo "Job: code-quality"
          echo "Triggered by: ${{ github.event_name }}"
          echo "=========================================="

      - name: Checkout code
        uses: actions/checkout@v5.0.0
        with:
          sparse-checkout-cone-mode: false

      - name: Set up Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install formatting tools
        run: |
          # gofumpt install commented out - golangci-lint includes gofumpt with extra-rules
          # go install mvdan.cc/gofumpt@latest
          go install golang.org/x/tools/cmd/goimports@latest

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run golangci-lint with auto-fix
        run: golangci-lint run --fix --timeout=10m --config=.golangci.yml

      # Commented out - golangci-lint already applies gofumpt with extra-rules: true
      # - name: Apply gofumpt extra rules (integrated with golangci-lint workflow)
      #   run: |
      #     # Apply additional gofumpt -extra formatting that golangci-lint's gofumpt doesn't handle
      #     gofumpt -extra -w .

      - name: Run golangci-lint final check
        run: golangci-lint run --timeout=10m --config=.golangci.yml

      - name: Build cicd binary for quality checks
        run: go build -o cicd ./cmd/cicd

      - name: Enforce file encoding (UTF-8 without BOM)
        run: ./cicd all-enforce-utf8

      - name: Enforce test patterns
        run: ./cicd go-enforce-test-patterns

      - name: Run custom Go source code fixes
        run: ./cicd go-enforce-any

      - name: Check for circular Go package dependencies
        run: ./cicd go-check-circular-package-dependencies

      - name: Check Go direct dependencies
        run: ./cicd go-update-direct-dependencies

      - name: Check GitHub Actions versions
        run: ./cicd github-workflow-lint

  # Build and Container Security
  build:
    name: Build & Container Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Workflow Start - CI - Quality Testing / build (ci-quality.yml)
        run: |
          echo "=========================================="
          echo "Workflow: ${{ github.workflow }}"
          echo "File: .github/workflows/ci-quality.yml"
          echo "Job: build"
          echo "Triggered by: ${{ github.event_name }}"
          echo "=========================================="

      - name: Checkout code
        uses: actions/checkout@v5.0.0
        with:
          sparse-checkout-cone-mode: false

      - name: Set up Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binary
        run: |
          # Build with static linking and minimal symbol stripping for CI/testing
          # -s: Strip symbol table for smaller binary size (keeps debug symbols for diagnostics)
          # -extldflags '-static': Force static linking for maximum portability
          # Performance and diagnostics prioritized over size; debug symbols retained for troubleshooting
          go build -v -ldflags="-s -extldflags '-static'" -o cryptoutil ./cmd/cryptoutil

      - name: Test binary
        run: |
          # Test that the binary was built successfully
          ls -la ./cryptoutil
          file ./cryptoutil
          # Test basic execution (expect it to show usage and exit with error since no valid command given)
          ./cryptoutil || echo "Binary executed successfully (expected error due to no command)"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-

      - name: Build Docker image
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          file: ./deployments/Dockerfile
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_VERSION=${{ github.sha }}
            VCS_REF=${{ github.sha }}
            BUILD_DATE=1970-01-01T00:00:00Z
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Get first Docker tag for Trivy scan
        id: first-tag
        run: echo "tag=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.first-tag.outputs.tag }}
          format: 'sarif'
          output: 'trivy-image.sarif'

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image.sarif'
        if: always() && hashFiles('trivy-image.sarif') != ''

      # Docker Scout vulnerability scanning
      - name: Check Docker Scout authentication
        id: scout-auth
        run: |
          echo "Checking Docker Scout authentication..."
          if docker scout version >/dev/null 2>&1; then
            echo "authenticated=true" >> $GITHUB_OUTPUT
            echo "✅ Docker Scout is authenticated and available"
          else
            echo "authenticated=false" >> $GITHUB_OUTPUT
            echo "❌ Docker Scout authentication failed - skipping Docker Scout scans"
          fi
        continue-on-error: true

      - name: Enable Docker Scout
        uses: docker/scout-action@v1
        with:
          command: version
        if: steps.scout-auth.outputs.authenticated == 'true'

      - name: Docker Scout - Quick Overview
        uses: docker/scout-action@v1
        with:
          command: quickview
          image: ${{ steps.first-tag.outputs.tag }}
          only-severities: critical,high,medium
          write-comment: false
        if: steps.scout-auth.outputs.authenticated == 'true'

      - name: Docker Scout - CVE Analysis
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ steps.first-tag.outputs.tag }}
          format: sarif
          output: docker-scout-cves.sarif
          only-severities: critical,high,medium
        continue-on-error: true
        if: steps.scout-auth.outputs.authenticated == 'true'

      - name: Upload Docker Scout CVE results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'docker-scout-cves.sarif'
        if: steps.scout-auth.outputs.authenticated == 'true' && hashFiles('docker-scout-cves.sarif') != ''

      - name: Docker Scout - Security Recommendations
        uses: docker/scout-action@v1
        with:
          command: recommendations
          image: ${{ steps.first-tag.outputs.tag }}
          only-severities: critical,high,medium
        continue-on-error: true
        if: steps.scout-auth.outputs.authenticated == 'true'

      - name: Push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          file: ./deployments/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_VERSION=${{ github.sha }}
            VCS_REF=${{ github.sha }}
            BUILD_DATE=1970-01-01T00:00:00Z

  # SBOM Generation
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
      - name: Workflow Start - CI - Quality Testing / sbom (ci-quality.yml)
        run: |
          echo "=========================================="
          echo "Workflow: ${{ github.workflow }}"
          echo "File: .github/workflows/ci-quality.yml"
          echo "Job: sbom"
          echo "Triggered by: ${{ github.event_name }}"
          echo "=========================================="

      - name: Checkout code
        uses: actions/checkout@v5.0.0
        with:
          sparse-checkout-cone-mode: false

      - name: Set up Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Generate SBOM with syft
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v5.0.0
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 2

      - name: Upload SBOM to dependency graph
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: spdx-json
          upload-artifact: false
          upload-release-assets: false
          dependency-snapshot: true

  # Mutation Testing - Quality Assessment
  mutation-testing:
    name: Mutation Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Only on main branch
    steps:
      - name: Workflow Start - CI - Quality Testing / mutation-testing (ci-quality.yml)
        run: |
          echo "=========================================="
          echo "Workflow: ${{ github.workflow }}"
          echo "File: .github/workflows/ci-quality.yml"
          echo "Job: mutation-testing"
          echo "Triggered by: ${{ github.event_name }}"
          echo "=========================================="

      - name: Checkout code
        uses: actions/checkout@v5.0.0
        with:
          sparse-checkout-cone-mode: false

      - name: Set up Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Gremlins
        run: go install github.com/go-gremlins/gremlins/cmd/gremlins@latest

      - name: Run mutation testing on high-coverage packages
        run: |
          echo "🧪 Running mutation testing on packages with high test coverage..."

          # Test packages with excellent coverage
          HIGH_COVERAGE_PACKAGES=(
            "./internal/common/util/datetime/"
            "./internal/common/util/thread/"
            "./internal/common/util/sysinfo/"
          )

          TOTAL_KILLED=0
          TOTAL_LIVED=0
          TOTAL_NOT_COVERED=0
          MUTATION_REPORTS=""

          for package in "${HIGH_COVERAGE_PACKAGES[@]}"; do
            echo "🎯 Testing package: $package"

            # Run mutation testing with reasonable settings
            OUTPUT=$(gremlins unleash "$package" \
              --workers 2 \
              --timeout-coefficient 3 \
              --threshold-efficacy 70.0 \
              --threshold-mcover 60.0 \
              --output "mutation-$(basename "$package").json" 2>&1) || true

            echo "$OUTPUT"
            MUTATION_REPORTS="$MUTATION_REPORTS mutation-$(basename "$package").json"

            # Extract metrics from output
            KILLED=$(echo "$OUTPUT" | grep -o "Killed: [0-9]*" | grep -o "[0-9]*" || echo "0")
            LIVED=$(echo "$OUTPUT" | grep -o "Lived: [0-9]*" | grep -o "[0-9]*" || echo "0")
            NOT_COVERED=$(echo "$OUTPUT" | grep -o "Not covered: [0-9]*" | grep -o "[0-9]*" || echo "0")

            TOTAL_KILLED=$((TOTAL_KILLED + KILLED))
            TOTAL_LIVED=$((TOTAL_LIVED + LIVED))
            TOTAL_NOT_COVERED=$((TOTAL_NOT_COVERED + NOT_COVERED))

            echo "Package results - Killed: $KILLED, Lived: $LIVED, Not covered: $NOT_COVERED"
            echo ""
          done

          # Calculate overall metrics
          TOTAL_TESTED=$((TOTAL_KILLED + TOTAL_LIVED))
          if [ $TOTAL_TESTED -gt 0 ]; then
            EFFICACY=$(( (TOTAL_KILLED * 100) / TOTAL_TESTED ))
          else
            EFFICACY=0
          fi

          echo "📊 MUTATION TESTING SUMMARY"
          echo "========================="
          echo "Total Killed: $TOTAL_KILLED"
          echo "Total Lived: $TOTAL_LIVED"
          echo "Total Not Covered: $TOTAL_NOT_COVERED"
          echo "Test Efficacy: ${EFFICACY}%"

          # Set up summary for GitHub
          echo "## 🧬 Mutation Testing Results" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🎯 Killed | $TOTAL_KILLED |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧟 Lived | $TOTAL_LIVED |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚫 Not Covered | $TOTAL_NOT_COVERED |" >> $GITHUB_STEP_SUMMARY
          echo "| 📈 Test Efficacy | ${EFFICACY}% |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ $TOTAL_LIVED -gt 0 ]; then
            echo "⚠️ **Warning**: $TOTAL_LIVED mutations survived testing" >> $GITHUB_STEP_SUMMARY
            echo "This indicates potential gaps in test coverage or assertion quality." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Excellent**: All testable mutations were killed by the test suite!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload mutation testing reports
        uses: actions/upload-artifact@v5.0.0
        if: always()
        with:
          name: mutation-testing-reports
          path: mutation-*.json
          retention-days: 2
