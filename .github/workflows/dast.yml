name: DAST Security Testing
# IMPORTANT: Test locally with `act --bind -j dast-security-scan`

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run DAST weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL for DAST scanning (default: https://localhost:8080)'
        required: false
        default: 'https://localhost:8080'

env:
  GO_VERSION: '1.25.1'

  TARGET_URL: ${{ github.event.inputs.target_url || 'https://localhost:8080' }}

  APP_BIND_PUBLIC_PROTOCOL: https
  APP_BIND_PUBLIC_ADDRESS: 0.0.0.0
  APP_BIND_PUBLIC_PORT: 8080

  APP_BIND_PRIVATE_PROTOCOL: http
  APP_BIND_PRIVATE_ADDRESS: 127.0.0.1
  APP_BIND_PRIVATE_PORT: 9090

  DB_HOST: localhost
  DB_PORT: 5432
  DB_NAME: DB
  DB_USER: USR
  DB_PASSWORD: PWD

jobs:
  dast-security-scan:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ env.DB_NAME }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
          POSTGRES_USER: ${{ env.DB_USER }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432 # env context is not available in the services.ports section

    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Build application
      run: go build -o cryptoutil ./cmd/cryptoutil

    # See internal\common\config\config.go for configuration options
    - name: Start application for DAST testing
      run: |
        # Create test configuration
        mkdir -p configs/test

        # Create unseal secret file
        cat > ./configs/test/dast-simple-unseal-secret-value-1.secret <<EOF
        dast-simple-unseal-secret-value-1
        EOF

        # Create config file
        cat > ./configs/test/config.yml <<EOF
        bind-public-protocol: "${APP_BIND_PUBLIC_PROTOCOL}"
        bind-public-address: "${APP_BIND_PUBLIC_ADDRESS}"
        bind-public-port: ${APP_BIND_PUBLIC_PORT}
        bind-private-protocol: "${APP_BIND_PRIVATE_PROTOCOL}"
        bind-private-address: "${APP_BIND_PRIVATE_ADDRESS}"
        bind-private-port: ${APP_BIND_PRIVATE_PORT}
        database-url: "postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable"
        unseal-mode: "1-of-1"
        unseal-files:
          - ./configs/test/dast-simple-unseal-secret-value-1.secret
        EOF

        # Start application in background, capture PID for cleanup; use nohup to avoid termination on shell exit
        nohup ./cryptoutil server start --config configs/test/config.yml &
        APP_PID=$!
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV

        # Wait for application to be ready
        timeout 20 bash -c '
          until curl -k -f ${APP_BIND_PUBLIC_PROTOCOL}://${APP_BIND_PUBLIC_ADDRESS}:${APP_BIND_PUBLIC_PORT}/ui/swagger/doc.json; do
            sleep 1
          done
        '

        curl -f -k https://localhost:8080/ui/swagger/doc.json > /dev/null 2>&1
        echo "Application listening on https://localhost:8080"

    - name: Test application curl connectivity
      run: |
        curl -f -k https://localhost:8080/ui/swagger/doc.json > /dev/null 2>&1
        echo "Application listening on https://localhost:8080"

    # # Options doc: https://www.zaproxy.org/docs/docker/full-scan/
  # - name: Run OWASP ZAP DAST Scan
  #   uses: zaproxy/action-full-scan@v0.12.0
  #   with:
  #     target: ${{ env.TARGET_URL }}
  #     rules_file_name: '.zap/rules.tsv'
  #     # Cookie ignore list trimmed: only _csrf is used by cryptoutil.
  #     # JSESSIONID / csrftoken are from other stacks; keeping them caused confusion.
  #     cmd_options: '-a -j -m 10 -T 60 -z "-config rules.cookie.ignorelist=_csrf"'
  #     allow_issue_writing: false
  #     artifact_name: 'zap-report'

    # - name: Run OWASP ZAP API Scan
    #   uses: zaproxy/action-api-scan@v0.9.0
    #   with:
    #     target: '${{ env.TARGET_URL }}/ui/swagger/doc.json'
    #     format: openapi
    #     cmd_options: '-a -j -T 60'
    #     allow_issue_writing: false
    #     artifact_name: 'zap-api-report'

    # Doc: https://github.com/projectdiscovery/nuclei-action
    - name: Nuclei - Vulnerability Scan
      id: nuclei_scan
      uses: projectdiscovery/nuclei-action@main
      with:
        target: ${{ env.TARGET_URL }}
        user-agent: "User-Agent:'Nuclei - Vulnerability Scan (Have a nice day)'"
        flags: "-c 24 -rl 200 -timeout 5 -stats"

    - name: GitHub Workflow artifacts
      if: ${{ !env.ACT }}
      uses: actions/upload-artifact@v4
      with:
        name: nuclei.log
        path: nuclei.log

    - name: GitHub Security Dashboard Alerts update
      uses: github/codeql-action/upload-sarif@v3
      if: ${{ !env.ACT }} && steps.nuclei_scan.outputs.sarif_exists == 'true'
      with:
        sarif_file: nuclei.sarif
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate Security Summary
      if: always()
      run: |
        echo "# DAST Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Scan Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Target URL:** ${{ env.TARGET_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Scan Date:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **OpenAPI Spec:** Available at /ui/swagger/doc.json" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Scan Coverage" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **OWASP ZAP Full Scan:** Comprehensive web application security testing" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **OWASP ZAP API Scan:** OpenAPI specification-driven API security testing" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Nuclei Scan:** CVE and vulnerability template-based testing" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Reports Generated" >> $GITHUB_STEP_SUMMARY
        echo "- ZAP Full Scan Report (HTML/JSON)" >> $GITHUB_STEP_SUMMARY
        echo "- ZAP API Scan Report (HTML/JSON)" >> $GITHUB_STEP_SUMMARY
        echo "- Nuclei Vulnerability Report (JSON)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Review scan reports in workflow artifacts" >> $GITHUB_STEP_SUMMARY
        echo "2. Address any HIGH or CRITICAL findings immediately" >> $GITHUB_STEP_SUMMARY
        echo "3. Update security configurations as needed" >> $GITHUB_STEP_SUMMARY
        echo "4. Consider adding custom ZAP rules for cryptographic endpoints" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup
      if: always()
      run: |
        if [ ! -z "$APP_PID" ]; then
          kill $APP_PID || true
          sleep 2
          kill -9 $APP_PID 2>/dev/null || true
        fi
