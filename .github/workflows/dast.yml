name: DAST Security Testing
# IMPORTANT: Test locally with:
#   [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
#   act workflow_dispatch -j dast-security-scan --input scan_profile=quick --bind 2>&1 | Out-File -FilePath .\dast-reports\act-dast.log -Encoding utf8
#   act workflow_dispatch -j dast-security-scan --input scan_profile=full --bind 2>&1 | Out-File -FilePath .\dast-reports\act-dast.log -Encoding utf8
# OUTPUT CONVENTION: All scan outputs and reports must be written to ./dast-reports/ directory

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.github/copilot-instructions.md'
      - '.github/instructions/**'
      - 'dast-reports/**'
      - 'nohup.out'
      - 'LICENSE'
      - '.editorconfig'
      - '.gitignore'
      - '.gitattributes'
      - '.golangci.yml'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/pull_request_template.md'
      - '.github/dependabot.yml'
      - 'scripts/**'
      - '**/*.log'
      - '**/*.sarif'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.github/copilot-instructions.md'
      - '.github/instructions/**'
      - 'dast-reports/**'
      - 'nohup.out'
      - 'LICENSE'
      - '.editorconfig'
      - '.gitignore'
      - '.gitattributes'
      - '.golangci.yml'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/pull_request_template.md'
      - '.github/dependabot.yml'
      - 'scripts/**'
      - '**/*.log'
      - '**/*.sarif'
  schedule:
    # Run DAST weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL for DAST scanning (default: https://localhost:8080)'
        required: false
        default: 'https://localhost:8080'
      scan_profile:
        description: 'Scan profile for performance optimization'
        required: false
        default: 'full'
        type: choice
        options:
          - quick
          - full
          - deep

env:
  GO_VERSION: '1.25.1'

  TARGET_URL: ${{ github.event.inputs.target_url || 'https://localhost:8080' }}
  SCAN_PROFILE: ${{ github.event.inputs.scan_profile || 'full' }}

  APP_BIND_PUBLIC_PROTOCOL: https
  APP_BIND_PUBLIC_ADDRESS: 0.0.0.0
  APP_BIND_PUBLIC_PORT: 8080

  APP_BIND_PRIVATE_PROTOCOL: http
  APP_BIND_PRIVATE_ADDRESS: 127.0.0.1
  APP_BIND_PRIVATE_PORT: 9090

  DB_HOST: localhost
  DB_PORT: 5432
  DB_NAME: DB
  DB_USER: USR
  DB_PASSWORD: PWD

jobs:
  dast-security-scan:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ env.DB_NAME }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
          POSTGRES_USER: ${{ env.DB_USER }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432 # env context is not available in the services.ports section

    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup directories and Nuclei templates version
      id: nuclei-version
      run: |
        # Create required directories
        mkdir -p ./dast-reports configs/test
        # Ephemeral mode: always use latest nuclei templates
        echo "templates_version=LATEST" >> $GITHUB_OUTPUT

    - name: Cache Nuclei Templates
      id: cache-nuclei-templates
      uses: actions/cache@v4
      with:
        path: /root/nuclei-templates
        key: nuclei-templates-${{ runner.os }}-${{ steps.nuclei-version.outputs.templates_version }}
        restore-keys: |
          nuclei-templates-${{ runner.os }}-

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Build application
      run: go build -o cryptoutil ./cmd/cryptoutil

    # See internal\common\config\config.go for configuration options
    - name: Start application for DAST testing
      run: |
        # Create unseal secret and config files
        echo "dast-simple-unseal-secret-value-1" > ./configs/test/dast-simple-unseal-secret-value-1.secret
        cat > ./configs/test/config.yml <<EOF
        bind-public-protocol: "${APP_BIND_PUBLIC_PROTOCOL}"
        bind-public-address: "${APP_BIND_PUBLIC_ADDRESS}"
        bind-public-port: ${APP_BIND_PUBLIC_PORT}
        bind-private-protocol: "${APP_BIND_PRIVATE_PROTOCOL}"
        bind-private-address: "${APP_BIND_PRIVATE_ADDRESS}"
        bind-private-port: ${APP_BIND_PRIVATE_PORT}
        database-url: "postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable"
        unseal-mode: "1-of-1"
        unseal-files:
          - ./configs/test/dast-simple-unseal-secret-value-1.secret
        EOF

        # Start application in background, capture PID for cleanup; use nohup to avoid termination on shell exit
        nohup ./cryptoutil server start --config configs/test/config.yml &
        APP_PID=$!
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV

        # Enhanced readiness probe with retry/backoff logic
        echo "Waiting for application to be ready..."
        MAX_ATTEMPTS=30
        ATTEMPT=0
        BACKOFF=1
        READY=false

        # Progressive health check: private health endpoints first, then public Swagger
        HEALTH_ENDPOINTS=(
          "http://127.0.0.1:${APP_BIND_PRIVATE_PORT}/readyz"
          "http://localhost:${APP_BIND_PRIVATE_PORT}/readyz"
          "${TARGET_URL}/ui/swagger/doc.json"
        )

        while [ $ATTEMPT -lt $MAX_ATTEMPTS ] && [ "$READY" != "true" ]; do
          ATTEMPT=$((ATTEMPT + 1))
          echo "Attempt $ATTEMPT/$MAX_ATTEMPTS (backoff: ${BACKOFF}s)"

          for endpoint in "${HEALTH_ENDPOINTS[@]}"; do
            echo "Testing: $endpoint"
            if curl -k -f --connect-timeout 5 --max-time 10 "$endpoint" >/dev/null 2>&1; then
              echo "✓ Application ready at: $endpoint"
              READY=true
              break
            else
              echo "✗ Not ready: $endpoint"
            fi
          done

          if [ "$READY" != "true" ]; then
            sleep $BACKOFF
            # Exponential backoff with max 5 seconds
            BACKOFF=$((BACKOFF < 5 ? BACKOFF + 1 : 5))
          fi
        done

        if [ "$READY" != "true" ]; then
          echo "❌ Application failed to become ready within timeout"
          exit 1
        fi

        echo "✅ Application is ready and responsive"

    - name: Capture baseline response headers (immediate)
      if: always()
      run: |
        # Capture headers from key API endpoints (app is ready per health check)
        echo "🔍 Starting header capture from ${{ env.TARGET_URL }}..."
        echo "📂 Current directory: $(pwd)"
        echo "📁 Contents of dast-reports before capture:"
        ls -la dast-reports/ || echo "dast-reports directory not found"

        # Test each endpoint individually with detailed logging
        echo "🧪 Testing individual endpoints:"

        echo "1️⃣ Testing Swagger UI main page..."
        if curl -skI ${{ env.TARGET_URL }}/ui/swagger/ 2>&1; then
          echo "✅ Swagger UI main page - SUCCESS"
        else
          echo "❌ Swagger UI main page - FAILED (exit code: $?)"
        fi

        echo "2️⃣ Testing Swagger API spec..."
        if curl -skI ${{ env.TARGET_URL }}/ui/swagger/doc.json 2>&1; then
          echo "✅ Swagger API spec - SUCCESS"
        else
          echo "❌ Swagger API spec - FAILED (exit code: $?)"
        fi

        echo "3️⃣ Testing Browser API CSRF token..."
        if curl -skI ${{ env.TARGET_URL }}/browser/api/v1/csrf-token 2>&1; then
          echo "✅ Browser API CSRF token - SUCCESS"
        else
          echo "❌ Browser API CSRF token - FAILED (exit code: $?)"
        fi

        echo "4️⃣ Testing Browser API Elastic Keys..."
        if curl -skI ${{ env.TARGET_URL }}/browser/api/v1/elastickeys 2>&1; then
          echo "✅ Browser API Elastic Keys - SUCCESS"
        else
          echo "❌ Browser API Elastic Keys - FAILED (exit code: $?)"
        fi

        echo "5️⃣ Testing Service API Elastic Keys..."
        if curl -skI ${{ env.TARGET_URL }}/service/api/v1/elastickeys 2>&1; then
          echo "✅ Service API Elastic Keys - SUCCESS"
        else
          echo "❌ Service API Elastic Keys - FAILED (exit code: $?)"
        fi

        echo "📝 Creating header baseline file..."
        {
          echo "# Header Baseline ($(date -u))"
          echo "## Swagger UI (main page)"
          curl -skI ${{ env.TARGET_URL }}/ui/swagger/ 2>/dev/null || echo "(failed)"
          echo -e "\\n## Swagger API spec"
          curl -skI ${{ env.TARGET_URL }}/ui/swagger/doc.json 2>/dev/null || echo "(failed)"
          echo -e "\\n## Browser API - CSRF token endpoint"
          curl -skI ${{ env.TARGET_URL }}/browser/api/v1/csrf-token 2>/dev/null || echo "(failed)"
          echo -e "\\n## Browser API - Elastic Keys endpoint"
          curl -skI ${{ env.TARGET_URL }}/browser/api/v1/elastickeys 2>/dev/null || echo "(failed)"
          echo -e "\\n## Service API - Elastic Keys endpoint"
          curl -skI ${{ env.TARGET_URL }}/service/api/v1/elastickeys 2>/dev/null || echo "(failed)"
        } > dast-reports/response-headers.txt

        echo "📄 Verifying file creation:"
        if [ -f "dast-reports/response-headers.txt" ]; then
          echo "✅ File created successfully: dast-reports/response-headers.txt"
          echo "📏 File size: $(wc -c < dast-reports/response-headers.txt) bytes"
          echo "📋 File contents preview (first 10 lines):"
          head -10 dast-reports/response-headers.txt
        else
          echo "❌ File NOT created: dast-reports/response-headers.txt"
        fi

        echo "📁 Contents of dast-reports after capture:"
        ls -la dast-reports/ || echo "dast-reports directory not found"

        echo "✅ Header capture process completed"

    # Options doc: https://www.zaproxy.org/docs/docker/full-scan/
    - name: Run OWASP ZAP DAST Scan
      uses: zaproxy/action-full-scan@v0.12.0
      with:
        target: ${{ env.TARGET_URL }}
        rules_file_name: '.zap/rules.tsv'
        # Cookie ignore list trimmed: only _csrf is used by cryptoutil.
        # JSESSIONID / csrftoken are from other stacks; keeping them caused confusion.
        cmd_options: '-a -j -m 10 -T 60 -z "-config rules.cookie.ignorelist=_csrf"'
        allow_issue_writing: false
        artifact_name: 'zap-report'
        # Note: ZAP action outputs will be moved to dast-reports/ in collect step

    - name: Run OWASP ZAP API Scan
      uses: zaproxy/action-api-scan@v0.9.0
      with:
        target: '${{ env.TARGET_URL }}/ui/swagger/doc.json'
        format: openapi
        cmd_options: '-a -j -T 60'
        allow_issue_writing: false
        artifact_name: 'zap-api-report'
        # Note: ZAP action outputs will be moved to dast-reports/ in collect step

    # Doc: https://github.com/projectdiscovery/nuclei-action
    - name: Set Nuclei scan configuration based on profile
      id: nuclei_config
      run: |
        case "$SCAN_PROFILE" in
          "quick")
            echo "timeout=60" >> $GITHUB_OUTPUT
            echo "concurrency=12" >> $GITHUB_OUTPUT
            echo "rate_limit=100" >> $GITHUB_OUTPUT
            echo "templates=cves/2023/,cves/2024/,vulnerabilities/,security-misconfiguration/generic/" >> $GITHUB_OUTPUT
            echo "description=Quick scan (PRs): ~2-3 minutes, recent CVEs and basic misconfigurations" >> $GITHUB_OUTPUT
            ;;
          "deep")
            echo "timeout=1200" >> $GITHUB_OUTPUT
            echo "concurrency=32" >> $GITHUB_OUTPUT
            echo "rate_limit=300" >> $GITHUB_OUTPUT
            echo "templates=" >> $GITHUB_OUTPUT
            echo "description=Deep scan (scheduled): ~15-20 minutes, all templates" >> $GITHUB_OUTPUT
            ;;
          *) # full (default)
            echo "timeout=600" >> $GITHUB_OUTPUT
            echo "concurrency=24" >> $GITHUB_OUTPUT
            echo "rate_limit=200" >> $GITHUB_OUTPUT
            echo "templates=cves/,vulnerabilities/,security-misconfiguration/,default-logins/,exposed-panels/" >> $GITHUB_OUTPUT
            echo "description=Full scan (main push): ~8-10 minutes, comprehensive coverage" >> $GITHUB_OUTPUT
            ;;
        esac
        echo "Profile: $SCAN_PROFILE"
        echo "Configuration set for profile: $SCAN_PROFILE"

    - name: Nuclei - Vulnerability Scan (${{ steps.nuclei_config.outputs.description }})
      id: nuclei_scan
      uses: projectdiscovery/nuclei-action@main
      with:
        target: ${{ env.TARGET_URL }}
        user-agent: "User-Agent:'Nuclei - Vulnerability Scan (Have a nice day)'"
        # Exclude tcp/javascript protocol templates to avoid scanning infrastructure services (SSH:22, PostgreSQL:5432, RPC:111)
        # See: https://github.com/orgs/projectdiscovery/discussions/5159
        flags: "-c ${{ steps.nuclei_config.outputs.concurrency }} -rl ${{ steps.nuclei_config.outputs.rate_limit }} -timeout ${{ steps.nuclei_config.outputs.timeout }} -stats -ept tcp,javascript${{ steps.nuclei_config.outputs.templates && format(' -t {0}', steps.nuclei_config.outputs.templates) || '' }}"

    - name: Set dummy token for local act runs
      if: ${{ github.actor == 'nektos/act' }}
      run: |
        if [ -n "${GITHUB_TOKEN}" ]; then
          echo "GITHUB_TOKEN already set; leaving existing token in place";
        else
          echo "Setting dummy GITHUB_TOKEN for act local run to avoid upload-sarif failure";
          echo "GITHUB_TOKEN=act-dummy-token" >> $GITHUB_ENV;
        fi

    - name: Collect scan artifacts
      if: always()
      run: |
        # Move artifacts to dast-reports (suppressed verbose logging)
        [ -f "nuclei.log" ] && mv nuclei.log ./dast-reports/ || true
        [ -f "nuclei.sarif" ] && mv nuclei.sarif ./dast-reports/ || true

        # Move ZAP artifacts if present
        for artifact in zap-report.{html,json,xml} zap-api-report.{html,json}; do
          [ -f "$artifact" ] && mv "$artifact" ./dast-reports/ || true
        done

        # For GitHub runs, copy SARIF back to root for upload-sarif action
        if [ "${{ github.actor }}" != "nektos/act" ] && [ -f "./dast-reports/nuclei.sarif" ]; then
          cp ./dast-reports/nuclei.sarif nuclei.sarif
        fi

        echo "Artifact collection complete"

    - name: GitHub Workflow artifacts
      if: ${{ github.actor != 'nektos/act' }}
      uses: actions/upload-artifact@v4
      with:
        name: dast-reports
        path: |
          dast-reports/nuclei.log
          dast-reports/nuclei.sarif
          dast-reports/response-headers.txt

    - name: GitHub Security Dashboard Alerts update
      uses: github/codeql-action/upload-sarif@v3
      # Skip entirely when running under act; also ensure SARIF file actually exists
      if: ${{ github.actor != 'nektos/act' && hashFiles('nuclei.sarif') != '' }}
      with:
        sarif_file: nuclei.sarif
      env:
        # Use real token in GitHub hosted runner
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate Security Summary
      if: always()
      run: |
        {
          echo "# DAST Security Scan Results"
          echo ""
          echo "**Profile:** ${{ env.SCAN_PROFILE }} (${{ steps.nuclei_config.outputs.description }})"
          echo "**Target:** ${{ env.TARGET_URL }} | **Date:** $(date -u)"
          echo ""
          echo "## Scan Coverage"
          [ -f "dast-reports/nuclei.log" ] && echo "- ✅ **Nuclei Scan**" || echo "- ⏭ **Nuclei Scan:** Skipped"
          ls zap-*-report.html >/dev/null 2>&1 && echo "- ✅ **OWASP ZAP Scans**" || echo "- ⏭ **OWASP ZAP Scans:** Disabled"
          echo ""
          echo "## Generated Reports"
          [ -f dast-reports/nuclei.log ] && echo "- Nuclei Log/SARIF" || true
          [ -f dast-reports/response-headers.txt ] && echo "- Security Headers" || true
          ls zap-*-report.html >/dev/null 2>&1 && echo "- ZAP Reports" || true
        } >> $GITHUB_STEP_SUMMARY

    - name: Cleanup
      if: always()
      run: |
        # Stop application
        [ -n "${APP_PID:-}" ] && { kill "$APP_PID" 2>/dev/null || true; sleep 1; kill -9 "$APP_PID" 2>/dev/null || true; }
