name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.25.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Formatting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install formatting tools
        run: |
          go install mvdan.cc/gofumpt@latest
          go install golang.org/x/tools/cmd/goimports@latest

      - name: Check gofumpt formatting
        run: |
          # Check if any files need gofumpt formatting
          UNFORMATTED=$(gofumpt -l .)
          if [ -n "$UNFORMATTED" ]; then
            echo "❌ The following files need gofumpt formatting:"
            echo "$UNFORMATTED"
            echo ""
            echo "Please run: gofumpt -w ."
            echo "Or install pre-commit hooks: pip install pre-commit && pre-commit install"
            exit 1
          else
            echo "✅ All Go files are properly formatted with gofumpt"
          fi

      - name: Check goimports formatting
        run: |
          # Check if any files need goimports formatting
          UNFORMATTED=$(goimports -l .)
          if [ -n "$UNFORMATTED" ]; then
            echo "❌ The following files need goimports formatting:"
            echo "$UNFORMATTED"
            echo ""
            echo "Please run: goimports -w ."
            echo "Or install pre-commit hooks: pip install pre-commit && pre-commit install"
            exit 1
          else
            echo "✅ All Go files have properly organized imports"
          fi

      - name: Go vet
        run: go vet ./...

  # Comprehensive Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests with coverage
        env:
          POSTGRES_URL: postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

  # Linting and Static Analysis
  lint:
    name: Lint & Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install golangci-lint from source
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run golangci-lint
        run: |
          golangci-lint run --timeout=10m --config=.golangci.yml

      - name: Run go mod tidy check
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      # Security Static Analysis with Staticcheck (reliable alternative)
      - name: Install Staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run Staticcheck Security Analysis
        run: |
          staticcheck -f sarif ./... > staticcheck.sarif 2>/dev/null || true
          if [ -f staticcheck.sarif ] && [ -s staticcheck.sarif ]; then
            echo "Staticcheck SARIF file created successfully"
            ls -la staticcheck.sarif
          else
            echo "Staticcheck produced no issues, generating minimal SARIF"
            echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"staticcheck","version":"latest"}},"results":[]}]}' > staticcheck.sarif
          fi

      - name: Upload Staticcheck SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: staticcheck.sarif
        if: always() && hashFiles('staticcheck.sarif') != ''

      # Govulncheck - Official Go vulnerability scanner
      - name: Install Govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run Go Vulnerability Check
        run: govulncheck ./...

      # Trivy - Vulnerability scanner for dependencies
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        if: always() && hashFiles('trivy-results.sarif') != ''

  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Build and Container Security
  build:
    name: Build & Container Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binary
        run: |
          go build -v -ldflags="-w -s" -o cryptoutil ./cmd/cryptoutil

      - name: Test binary
        run: |
          # Test that the binary was built successfully
          ls -la ./cryptoutil
          file ./cryptoutil
          # Test basic execution (expect it to show usage and exit with error since no valid command given)
          ./cryptoutil || echo "Binary executed successfully (expected error due to no command)"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployments/Dockerfile
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Get first Docker tag for Trivy scan
        id: first-tag
        run: echo "tag=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.first-tag.outputs.tag }}
          format: 'sarif'
          output: 'trivy-image.sarif'

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image.sarif'
        if: always() && hashFiles('trivy-image.sarif') != ''

      # Docker Scout vulnerability scanning
      - name: Enable Docker Scout
        uses: docker/scout-action@v1
        with:
          command: version

      - name: Docker Scout - Quick Overview
        uses: docker/scout-action@v1
        with:
          command: quickview
          image: ${{ steps.first-tag.outputs.tag }}
          only-severities: critical,high,medium
          write-comment: false

      - name: Docker Scout - CVE Analysis
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ steps.first-tag.outputs.tag }}
          format: sarif
          output: docker-scout-cves.sarif
          only-severities: critical,high,medium
        continue-on-error: true

      - name: Upload Docker Scout CVE results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'docker-scout-cves.sarif'
        if: always() && hashFiles('docker-scout-cves.sarif') != ''

      - name: Docker Scout - Security Recommendations
        uses: docker/scout-action@v1
        with:
          command: recommendations
          image: ${{ steps.first-tag.outputs.tag }}
          only-severities: critical,high,medium
        continue-on-error: true

      - name: Push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployments/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # SBOM Generation
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Generate SBOM with syft
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

      - name: Upload SBOM to dependency graph
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: spdx-json
          upload-artifact: false
          upload-release-assets: false
          dependency-snapshot: true

  # Mutation Testing - Quality Assessment
  mutation-testing:
    name: Mutation Testing
    runs-on: ubuntu-latest
    needs: [test]  # Only run if tests pass
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Only on main branch
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Gremlins
        run: go install github.com/go-gremlins/gremlins/cmd/gremlins@latest

      - name: Run mutation testing on high-coverage packages
        run: |
          echo "🧪 Running mutation testing on packages with high test coverage..."

          # Test packages with excellent coverage
          HIGH_COVERAGE_PACKAGES=(
            "./internal/common/util/datetime/"
            "./internal/common/util/thread/"
            "./internal/common/util/sysinfo/"
          )

          TOTAL_KILLED=0
          TOTAL_LIVED=0
          TOTAL_NOT_COVERED=0
          MUTATION_REPORTS=""

          for package in "${HIGH_COVERAGE_PACKAGES[@]}"; do
            echo "🎯 Testing package: $package"

            # Run mutation testing with reasonable settings
            OUTPUT=$(gremlins unleash "$package" \
              --workers 2 \
              --timeout-coefficient 3 \
              --threshold-efficacy 70.0 \
              --threshold-mcover 60.0 \
              --output "mutation-$(basename "$package").json" 2>&1) || true

            echo "$OUTPUT"
            MUTATION_REPORTS="$MUTATION_REPORTS mutation-$(basename "$package").json"

            # Extract metrics from output
            KILLED=$(echo "$OUTPUT" | grep -o "Killed: [0-9]*" | grep -o "[0-9]*" || echo "0")
            LIVED=$(echo "$OUTPUT" | grep -o "Lived: [0-9]*" | grep -o "[0-9]*" || echo "0")
            NOT_COVERED=$(echo "$OUTPUT" | grep -o "Not covered: [0-9]*" | grep -o "[0-9]*" || echo "0")

            TOTAL_KILLED=$((TOTAL_KILLED + KILLED))
            TOTAL_LIVED=$((TOTAL_LIVED + LIVED))
            TOTAL_NOT_COVERED=$((TOTAL_NOT_COVERED + NOT_COVERED))

            echo "Package results - Killed: $KILLED, Lived: $LIVED, Not covered: $NOT_COVERED"
            echo ""
          done

          # Calculate overall metrics
          TOTAL_TESTED=$((TOTAL_KILLED + TOTAL_LIVED))
          if [ $TOTAL_TESTED -gt 0 ]; then
            EFFICACY=$(( (TOTAL_KILLED * 100) / TOTAL_TESTED ))
          else
            EFFICACY=0
          fi

          echo "📊 MUTATION TESTING SUMMARY"
          echo "========================="
          echo "Total Killed: $TOTAL_KILLED"
          echo "Total Lived: $TOTAL_LIVED"
          echo "Total Not Covered: $TOTAL_NOT_COVERED"
          echo "Test Efficacy: ${EFFICACY}%"

          # Set up summary for GitHub
          echo "## 🧬 Mutation Testing Results" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🎯 Killed | $TOTAL_KILLED |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧟 Lived | $TOTAL_LIVED |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚫 Not Covered | $TOTAL_NOT_COVERED |" >> $GITHUB_STEP_SUMMARY
          echo "| 📈 Test Efficacy | ${EFFICACY}% |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ $TOTAL_LIVED -gt 0 ]; then
            echo "⚠️ **Warning**: $TOTAL_LIVED mutations survived testing" >> $GITHUB_STEP_SUMMARY
            echo "This indicates potential gaps in test coverage or assertion quality." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Excellent**: All testable mutations were killed by the test suite!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload mutation testing reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mutation-testing-reports
          path: mutation-*.json
          retention-days: 30
