name: CI - Robustness Testing
# CROSS-PLATFORM COMPATIBILITY: All file references in this workflow MUST use relative paths
# to support both GitHub Actions Ubuntu runners and Windows `act` local runner testing.
# Absolute paths (e.g., C:\...) break cross-platform compatibility.
# Example: Use './deployments/compose/compose.yml'

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.github/copilot-instructions.md'
      - '.github/instructions/**'
      - 'dast-reports/**'
      - 'nohup.out'
      - 'LICENSE'
      - '.editorconfig'
      - '.gitignore'
      - '.gitattributes'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/pull_request_template.md'
      - '.github/dependabot.yml'
      - '**/*.log'
      - '**/*.sarif'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.github/copilot-instructions.md'
      - '.github/instructions/**'
      - 'dast-reports/**'
      - 'nohup.out'
      - 'LICENSE'
      - '.editorconfig'
      - '.gitignore'
      - '.gitattributes'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/pull_request_template.md'
      - '.github/dependabot.yml'
      - '**/*.log'
      - '**/*.sarif'
  workflow_dispatch:
    inputs:
      test_profile:
        description: 'Test profile to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - concurrency
          - fuzz
          - fuzz-keygen
          - fuzz-digests
          - benchmark
          - race

env:
  GO_VERSION: '1.25.1'

jobs:
  concurrency:
    name: Concurrency & Race Detection Tests
    runs-on: ubuntu-latest

    steps:
    - name: Workflow Start - CI - Robustness Testing / concurrency (ci-robust.yml)
      run: |
        echo "=========================================="
        echo "Workflow: ${{ github.workflow }}"
        echo "File: .github/workflows/ci-robust.yml"
        echo "Job: concurrency"
        echo "Triggered by: ${{ github.event_name }}"
        echo "=========================================="

    - name: Checkout code
      uses: actions/checkout@v5.0.0
      with:
        sparse-checkout-cone-mode: false

    - name: Set up Go
      uses: actions/setup-go@v6.0.0
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Clean and verify module files
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum

    - name: Run concurrency and race detection tests
      working-directory: .
      run: |
        echo "üîÑ Running comprehensive concurrency and race detection tests..."
        SECONDS=0
        go test -race -timeout=15m -count=2 ./internal/... ./scripts/...
        TEST_DURATION=$SECONDS
        echo "‚è±Ô∏è Race detection tests completed in: ${TEST_DURATION}s"

    - name: Run coverage on concurrency tests
      working-directory: .
      run: |
        echo "üìä Generating coverage report for concurrency tests..."
        SECONDS=0
        go test -count=1 -p=2 -coverprofile=concurrency-coverage.out -covermode=atomic ./internal/... ./scripts/...
        COVERAGE_DURATION=$SECONDS
        echo "‚è±Ô∏è Coverage tests completed in: ${COVERAGE_DURATION}s"

    - name: Generate concurrency coverage report
      run: go tool cover -html=concurrency-coverage.out -o concurrency-coverage.html

    - name: Upload concurrency coverage
      uses: codecov/codecov-action@v5.5.1
      with:
        files: ./concurrency-coverage.out
        flags: concurrency-tests
        name: codecov-concurrency
        fail_ci_if_error: false

    - name: Concurrency test summary
      run: |
        echo "## üîÑ Concurrency & Race Detection Results" >> $GITHUB_STEP_SUMMARY
        echo "Comprehensive concurrency and race detection tests completed successfully." >> $GITHUB_STEP_SUMMARY
        echo "- Coverage: All packages" >> $GITHUB_STEP_SUMMARY
        echo "- Race detector: Enabled (sequential for better detection)" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage collection: 2 parallel packages" >> $GITHUB_STEP_SUMMARY
        echo "- Concurrent execution: 2 runs" >> $GITHUB_STEP_SUMMARY
        echo "- Timeout: 15 minutes" >> $GITHUB_STEP_SUMMARY
        echo "- Race detection duration: \${TEST_DURATION}s" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage collection duration: \${COVERAGE_DURATION}s" >> $GITHUB_STEP_SUMMARY

  # Fuzz Testing - Keygen Package - Property-based testing for cryptographic key generation
  fuzz-keygen:
    name: Fuzz Tests - Keygen
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_profile == 'all' || github.event.inputs.test_profile == 'fuzz' || github.event_name != 'workflow_dispatch' }}

    steps:
      - name: Workflow Start - CI - Robustness Testing / fuzz-keygen (ci-robust.yml)
        run: |
          echo "=========================================="
          echo "Workflow: ${{ github.workflow }}"
          echo "File: .github/workflows/ci-robust.yml"
          echo "Job: fuzz-keygen"
          echo "Triggered by: ${{ github.event_name }}"
          echo "=========================================="

      - name: Checkout code
        uses: actions/checkout@v5.0.0
        with:
          sparse-checkout-cone-mode: false

      - name: Set up Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Clean and verify module files
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Run RSA keygen fuzz test
        working-directory: .
        run: |
          echo "üîë Running RSA keygen fuzz test..."
          # NOTE: -fuzztimeout causes invoking fuzz test to break - avoid using it
          go test -fuzz=FuzzGenerateRSAKeyPair -fuzztime=30s ./internal/common/crypto/keygen

      - name: Run ECDSA keygen fuzz test
        working-directory: .
        run: |
          echo "üîê Running ECDSA keygen fuzz test..."
          go test -fuzz=FuzzGenerateECDSAKeyPair -fuzztime=15s ./internal/common/crypto/keygen

      - name: Run ECDH keygen fuzz test
        working-directory: .
        run: |
          echo "üîê Running ECDH keygen fuzz test..."
          go test -fuzz=FuzzGenerateECDHKeyPair -fuzztime=15s ./internal/common/crypto/keygen

      - name: Run EdDSA keygen fuzz test
        working-directory: .
        run: |
          echo "üîê Running EdDSA keygen fuzz test..."
          go test -fuzz=FuzzGenerateEDDSAKeyPair -fuzztime=15s ./internal/common/crypto/keygen

      - name: Run AES keygen fuzz test
        working-directory: .
        run: |
          echo "üîê Running AES keygen fuzz test..."
          go test -fuzz=FuzzGenerateAESKey -fuzztime=15s ./internal/common/crypto/keygen

      - name: Run AES-HS keygen fuzz test
        working-directory: .
        run: |
          echo "üîê Running AES-HS keygen fuzz test..."
          go test -fuzz=FuzzGenerateAESHSKey -fuzztime=15s ./internal/common/crypto/keygen

      - name: Run HMAC keygen fuzz test
        working-directory: .
        run: |
          echo "üîê Running HMAC keygen fuzz test..."
          go test -fuzz=FuzzGenerateHMACKey -fuzztime=15s ./internal/common/crypto/keygen

      - name: Keygen fuzz test summary
        run: |
          echo "## üîê Keygen Fuzz Testing Results" >> $GITHUB_STEP_SUMMARY
          echo "Fuzz tests for cryptographic key generation completed successfully." >> $GITHUB_STEP_SUMMARY
          echo "- Duration: RSA=30s, Others=15s each (sequential)" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage: 7 key generation functions" >> $GITHUB_STEP_SUMMARY
          echo "- Purpose: Property-based testing for secure key generation" >> $GITHUB_STEP_SUMMARY

  # Fuzz Testing - Digests Package - Property-based testing for cryptographic hash functions
  fuzz-digests:
    name: Fuzz Tests - Digests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_profile == 'all' || github.event.inputs.test_profile == 'fuzz' || github.event_name != 'workflow_dispatch' }}

    steps:
      - name: Workflow Start - CI - Robustness Testing / fuzz-digests (ci-robust.yml)
        run: |
          echo "=========================================="
          echo "Workflow: ${{ github.workflow }}"
          echo "File: .github/workflows/ci-robust.yml"
          echo "Job: fuzz-digests"
          echo "Triggered by: ${{ github.event_name }}"
          echo "=========================================="

      - name: Checkout code
        uses: actions/checkout@v5.0.0
        with:
          sparse-checkout-cone-mode: false

      - name: Set up Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Clean and verify module files
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Run HKDF All Variants fuzz test
        working-directory: .
        run: |
          echo "üîê Running HKDF All Variants fuzz test..."
          go test -fuzz=FuzzHKDFAllVariants -fuzztime=15s ./internal/common/crypto/digests

      - name: Run HKDF-SHA256 fuzz test
        working-directory: .
        run: |
          echo "üîê Running HKDF-SHA256 fuzz test..."
          go test -fuzz=FuzzHKDFwithSHA256 -fuzztime=15s ./internal/common/crypto/digests

      - name: Run HKDF-SHA384 fuzz test
        working-directory: .
        run: |
          echo "üîê Running HKDF-SHA384 fuzz test..."
          go test -fuzz=FuzzHKDFwithSHA384 -fuzztime=15s ./internal/common/crypto/digests

      - name: Run HKDF-SHA512 fuzz test
        working-directory: .
        run: |
          echo "üîê Running HKDF-SHA512 fuzz test..."
          go test -fuzz=FuzzHKDFwithSHA512 -fuzztime=15s ./internal/common/crypto/digests

      - name: Run HKDF-SHA224 fuzz test
        working-directory: .
        run: |
          echo "üîê Running HKDF-SHA224 fuzz test..."
          go test -fuzz=FuzzHKDFwithSHA224 -fuzztime=15s ./internal/common/crypto/digests

      - name: Run SHA512 fuzz test
        working-directory: .
        run: |
          echo "üîê Running SHA512 fuzz test..."
          go test -fuzz=FuzzSHA512 -fuzztime=15s ./internal/common/crypto/digests

      - name: Run SHA384 fuzz test
        working-directory: .
        run: |
          echo "üîê Running SHA384 fuzz test..."
          go test -fuzz=FuzzSHA384 -fuzztime=15s ./internal/common/crypto/digests

      - name: Run SHA256 fuzz test
        working-directory: .
        run: |
          echo "üîê Running SHA256 fuzz test..."
          go test -fuzz=FuzzSHA256 -fuzztime=15s ./internal/common/crypto/digests

      - name: Run SHA224 fuzz test
        working-directory: .
        run: |
          echo "üîê Running SHA224 fuzz test..."
          go test -fuzz=FuzzSHA224 -fuzztime=15s ./internal/common/crypto/digests

      - name: Digests fuzz test summary
        run: |
          echo "## üîê Digests Fuzz Testing Results" >> $GITHUB_STEP_SUMMARY
          echo "Fuzz tests for cryptographic digest functions completed successfully." >> $GITHUB_STEP_SUMMARY
          echo "- Duration: 15s each (sequential)" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage: 9 digest functions (HKDF variants + SHA-2 family)" >> $GITHUB_STEP_SUMMARY
          echo "- Purpose: Property-based testing for secure hash operations" >> $GITHUB_STEP_SUMMARY

  # Benchmark Testing - Performance validation and regression detection
  benchmark:
    name: Benchmark Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_profile == 'all' || github.event_name != 'workflow_dispatch' }}

    steps:
      - name: Workflow Start - CI - Robustness Testing / benchmark (ci-robust.yml)
        run: |
          echo "=========================================="
          echo "Workflow: ${{ github.workflow }}"
          echo "File: .github/workflows/ci-robust.yml"
          echo "Job: benchmark"
          echo "Triggered by: ${{ github.event_name }}"
          echo "=========================================="

      - name: Checkout code
        uses: actions/checkout@v5.0.0
        with:
          sparse-checkout-cone-mode: false

      - name: Set up Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Clean and verify module files
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Run benchmark tests
        working-directory: .
        run: |
          echo "üìä Running benchmark tests for performance validation..."
          go test -bench=. -benchmem -run=^$ ./internal/common/crypto/... > benchmark-results.txt

      - name: Display benchmark results
        run: |
          echo "## üìä Benchmark Results" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat benchmark-results.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Upload benchmark results
        uses: actions/upload-artifact@v5.0.0
        with:
          name: benchmark-results
          path: benchmark-results.txt
          retention-days: 2

      - name: Benchmark test summary
        run: |
          echo "## üìä Benchmark Testing Results" >> $GITHUB_STEP_SUMMARY
          echo "Performance benchmark tests completed successfully." >> $GITHUB_STEP_SUMMARY
          echo "- Coverage: Key generation and cryptographic operations" >> $GITHUB_STEP_SUMMARY
          echo "- Output: Memory allocation statistics included" >> $GITHUB_STEP_SUMMARY
          echo "- Purpose: Performance validation and regression detection" >> $GITHUB_STEP_SUMMARY
