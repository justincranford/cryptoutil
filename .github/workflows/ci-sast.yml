name: CI - SAST Pipeline
# CROSS-PLATFORM COMPATIBILITY: All file references in this workflow MUST use relative paths
# to support both GitHub Actions Ubuntu runners and Windows `act` local runner testing.
# Absolute paths (e.g., C:\...) break cross-platform compatibility.
# Example: Use './deployments/compose/compose.yml'

# Covers: Go, JavaScript (embedded + shell scripts), Python
# Jobs: security (Staticcheck, Govulncheck, Trivy), codeql (multi-language analysis)

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.github/copilot-instructions.md'
      - '.github/instructions/**'
      - 'dast-reports/**'
      - 'nohup.out'
      - 'LICENSE'
      - '.editorconfig'
      - '.gitignore'
      - '.gitattributes'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/pull_request_template.md'
      - '.github/dependabot.yml'
      - '**/*.log'
      - '**/*.sarif'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.github/copilot-instructions.md'
      - '.github/instructions/**'
      - 'dast-reports/**'
      - 'nohup.out'
      - 'LICENSE'
      - '.editorconfig'
      - '.gitignore'
      - '.gitattributes'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/pull_request_template.md'
      - '.github/dependabot.yml'
      - '**/*.log'
      - '**/*.sarif'
  workflow_dispatch:

env:
  GO_VERSION: '1.25.1'

jobs:
  # Security Scanning
  # Multiple SAST tools run sequentially in one job for efficiency
  # Tools: Staticcheck (Go linter), Govulncheck (Go vuln scanner), Trivy (dependency scanner)
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    steps:
      - name: Workflow Start - CI - SAST Pipeline / security (ci-sast.yml)
        run: |
          echo "=========================================="
          echo "Workflow: ${{ github.workflow }}"
          echo "File: .github/workflows/ci-sast.yml"
          echo "Job: security"
          echo "Triggered by: ${{ github.event_name }}"
          echo "=========================================="

      - name: Checkout code
        uses: actions/checkout@v5.0.0
        with:
          sparse-checkout-cone-mode: false

      - name: Set up Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Security Static Analysis with Staticcheck
      - name: Install Staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run Staticcheck Security Analysis
        run: |
          echo "🔍 Running Staticcheck security analysis..."
          staticcheck -f sarif ./... > staticcheck.sarif 2>/dev/null || true

          if [ -f staticcheck.sarif ] && [ -s staticcheck.sarif ]; then
            echo "✅ Staticcheck SARIF file created successfully"
            ls -la staticcheck.sarif
            # Validate SARIF format
            if jq -e '.version' staticcheck.sarif >/dev/null 2>&1; then
              echo "✅ SARIF file format is valid"
            else
              echo "⚠️ SARIF file format may be invalid, but proceeding with upload"
            fi
          else
            echo "ℹ️ Staticcheck produced no issues, generating minimal SARIF for GitHub Security tab"
            cat > staticcheck.sarif << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Staticcheck",
                    "version": "2025.1.1",
                    "informationUri": "https://staticcheck.dev"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          fi

      - name: Upload Staticcheck results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: staticcheck.sarif
        if: always() && hashFiles('staticcheck.sarif') != ''

      # Govulncheck - Official Go vulnerability scanner
      - name: Install Govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run Go Vulnerability Check
        run: govulncheck ./...

      # Trivy - Vulnerability scanner for dependencies
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        if: always() && hashFiles('trivy-results.sarif') != ''

  # CodeQL Analysis
  # Multi-language security analysis using CodeQL
  # Matrix covers: Go (primary), JavaScript (embedded JS + shell scripts), Python
  # Note: 'javascript' pack includes shell script analysis (bash/sh/zsh)
  # No separate 'bash' entry needed - bundled in javascript language pack
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['go', 'javascript', 'python']  # go: Go code, javascript: JS+shell scripts, python: Python scripts
    steps:
      - name: Workflow Start - CI - SAST Pipeline / codeql (${{ matrix.language }}) (ci-sast.yml)
        run: |
          echo "=========================================="
          echo "Workflow: ${{ github.workflow }}"
          echo "File: .github/workflows/ci-sast.yml"
          echo "Job: codeql"
          echo "Language: ${{ matrix.language }}"
          echo "Triggered by: ${{ github.event_name }}"
          echo "=========================================="

      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          sparse-checkout-cone-mode: false

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
