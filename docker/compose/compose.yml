services:

  cryptoutil_sqlite:
    build:
      context: ../..
      dockerfile: docker/Dockerfile
    entrypoint: ["/sbin/tini", "--"]
    command: >
      sh -c '
      echo "Container starting. Service available at host port 8090.";
      echo "Container ID: $$(hostname)";
      /app/cryptoutil --config=/app/sqlite.yml
      '
    ports:
      - "8090:8080"
    volumes:
      - ./cryptoutil/sqlite.yml:/app/sqlite.yml:ro

  cryptoutil_postgres:
    build:
      context: ../..
      dockerfile: docker/Dockerfile
    entrypoint: ["/sbin/tini", "--"]
    command: >
      sh -c '
      DB_URL=$$(cat /run/secrets/cryptoutil_database-url.secret);
      echo "Container starting. Check docker container ls for port mapping."; 
      echo "Container ID: $$(hostname)";
      /app/cryptoutil --config=/app/postgresql.yml --database-url="$$DB_URL"
      '
    volumes:
      - ./cryptoutil/postgresql.yml:/app/postgresql.yml:ro
    secrets:
      - cryptoutil_database-url.secret
      - cryptoutil_unseal_1of5.secret
      - cryptoutil_unseal_2of5.secret
      - cryptoutil_unseal_3of5.secret
      - cryptoutil_unseal_4of5.secret
      - cryptoutil_unseal_5of5.secret
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cryptoutil-network

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER_FILE: /run/secrets/postgres_username.secret
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password.secret
      POSTGRES_DB_FILE: /run/secrets/postgres_database.secret
    secrets:
      - postgres_username.secret
      - postgres_password.secret
      - postgres_database.secret
    shm_size: 256mb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/postgres_username.secret) -d $$(cat /run/secrets/postgres_database.secret)"]
      start_period: 5s
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - cryptoutil-network

networks:
  cryptoutil-network:
    driver: bridge

volumes:
 postgres_data:
   name: cryptoutil_postgres_volume

secrets:

  postgres_username.secret:
    file: ./postgres/postgres_username.secret
  postgres_password.secret:
    file: ./postgres/postgres_password.secret
  postgres_database.secret:
    file: ./postgres/postgres_database.secret

  cryptoutil_database-url.secret:
    file: ./cryptoutil/cryptoutil_database_url.secret

  cryptoutil_unseal_1of5.secret:
    file: ./cryptoutil/cryptoutil_unseal_1of5.secret
  cryptoutil_unseal_2of5.secret:
    file: ./cryptoutil/cryptoutil_unseal_2of5.secret
  cryptoutil_unseal_3of5.secret:
    file: ./cryptoutil/cryptoutil_unseal_3of5.secret
  cryptoutil_unseal_4of5.secret:
    file: ./cryptoutil/cryptoutil_unseal_4of5.secret
  cryptoutil_unseal_5of5.secret:
    file: ./cryptoutil/cryptoutil_unseal_5of5.secret