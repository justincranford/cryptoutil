services:

  cryptoutil_sqlite:
    build:
      context: ../..
      dockerfile: deployments/Dockerfile
      args:
        APP_VERSION: "dev"
        VCS_REF: "local"
        BUILD_DATE: "2025-10-13T00:00:00Z"
    command: ["server", "start", "--dev", "--config=/app/config/cryptoutil-sqlite.yml"]
    working_dir: /tmp
    ports:
      - "8080:8080"    # HTTPS public
    volumes:
      - ./cryptoutil/cryptoutil-sqlite.yml:/app/config/cryptoutil-sqlite.yml:ro
    secrets:
      - cryptoutil_database-url.secret
      - cryptoutil_unseal_1of5.secret
      - cryptoutil_unseal_2of5.secret
      - cryptoutil_unseal_3of5.secret
      - cryptoutil_unseal_4of5.secret
      - cryptoutil_unseal_5of5.secret
    # DISABLED FOR TESTING
    # depends_on:
    #   opentelemetry-collector:
    #     condition: service_started
    networks:
      - cryptoutil-network

  cryptoutil_postgres:
    build:
      context: ../..
      dockerfile: deployments/Dockerfile
      args:
        APP_VERSION: "dev"
        VCS_REF: "local"
        BUILD_DATE: "2025-10-13T00:00:00Z"
    command: server start --config=/app/config/cryptoutil-postgresql.yml -u "file:///run/secrets/cryptoutil_database-url.secret"
    working_dir: /tmp
    ports:
      - "8081:8080"    # HTTPS public
    volumes:
      - ./cryptoutil/cryptoutil-postgresql.yml:/app/config/cryptoutil-postgresql.yml:ro
    secrets:
      - cryptoutil_database-url.secret
      - cryptoutil_unseal_1of5.secret
      - cryptoutil_unseal_2of5.secret
      - cryptoutil_unseal_3of5.secret
      - cryptoutil_unseal_4of5.secret
      - cryptoutil_unseal_5of5.secret
    depends_on:
      postgres:
        condition: service_healthy
      # DISABLED FOR TESTING
      # opentelemetry-collector:
      #   condition: service_started
    networks:
      - cryptoutil-network

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: USR
      POSTGRES_PASSWORD: PWD
      POSTGRES_DB: DB
    shm_size: 256mb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/postgres_username.secret) -d $$(cat /run/secrets/postgres_database.secret)"]
      start_period: 5s
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - cryptoutil-network

  # DISABLED FOR TESTING
  # opentelemetry-collector:
  #   image: otel/opentelemetry-collector-contrib:latest
  #   command: ["--config=/etc/otel-collector-config.yaml"]
  #   volumes:
  #     - ./otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
  #   ports:
  #     - "4317:4317"   # OTLP gRPC
  #     - "4318:4318"   # OTLP HTTP
  #     - "8888:8888"   # Metrics endpoint
  #     - "8889:8889"   # Prometheus metrics
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8889/metrics"]
  #     start_period: 5s
  #     interval: 30s
  #     timeout: 5s
  #     retries: 3
  #   networks:
  #     - cryptoutil-network
  #
  # grafana:
  #   image: grafana/grafana:latest
  #   environment:
  #     GF_SECURITY_ADMIN_PASSWORD: admin
  #     GF_USERS_ALLOW_SIGN_UP: "false"
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./grafana/provisioning:/etc/grafana/provisioning:ro
  #     - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
  #     start_period: 15s
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   depends_on:
  #     - opentelemetry-collector
  #   networks:
  #     - cryptoutil-network

networks:
  cryptoutil-network:
    driver: bridge

volumes:
  postgres_data:
    name: cryptoutil_postgres_volume
  cryptoutil_sqlite_certs:
    name: cryptoutil_sqlite_certs_volume
  cryptoutil_postgres_certs:
    name: cryptoutil_postgres_certs_volume
  grafana_data:
    name: cryptoutil_grafana_volume

secrets:

  postgres_username.secret:
    file: ./postgres/postgres_username.secret
  postgres_password.secret:
    file: ./postgres/postgres_password.secret
  postgres_database.secret:
    file: ./postgres/postgres_database.secret

  cryptoutil_database-url.secret:
    file: ./cryptoutil/cryptoutil_database_url.secret

  cryptoutil_unseal_1of5.secret:
    file: ./cryptoutil/cryptoutil_unseal_1of5.secret
  cryptoutil_unseal_2of5.secret:
    file: ./cryptoutil/cryptoutil_unseal_2of5.secret
  cryptoutil_unseal_3of5.secret:
    file: ./cryptoutil/cryptoutil_unseal_3of5.secret
  cryptoutil_unseal_4of5.secret:
    file: ./cryptoutil/cryptoutil_unseal_4of5.secret
  cryptoutil_unseal_5of5.secret:
    file: ./cryptoutil/cryptoutil_unseal_5of5.secret
