services:

  cryptoutil_sqlite:
    build:
      context: ../..
      dockerfile: deployments/Dockerfile
      args:
        APP_VERSION: "dev"
        VCS_REF: "local"
        BUILD_DATE: "2025-10-13T00:00:00Z"
    command: ["server", "start", "--config=/app/config/cryptoutil-sqlite.yml", "--config=/app/config/cryptoutil-common.yml", "--config=/app/otel/cryptoutil-otel.yml"]
    working_dir: /tmp # TODO Verify it works with /app/run instead of /tmp
    ports:
      - "8080:8080"    # HTTPS public
      # - "9090:9090"    # HTTPS admin (health endpoints) - NOT EXPOSED: bound to 127.0.0.1, not externally reachable
    volumes:
      - ./cryptoutil/cryptoutil-sqlite.yml:/app/config/cryptoutil-sqlite.yml:ro
      - ./cryptoutil/cryptoutil-common.yml:/app/config/cryptoutil-common.yml:ro
      - ./otel/cryptoutil-otel.yml:/app/otel/cryptoutil-otel.yml:ro
    secrets:
      # IMPORTANT: ALL cryptoutil instances MUST use the SAME secrets for unseal keys
      # to enable shared encryption/decryption of data in the database. NEVER use
      # instance-specific secrets as this breaks cryptographic interoperability.
      - cryptoutil_unseal_1of5.secret
      - cryptoutil_unseal_2of5.secret
      - cryptoutil_unseal_3of5.secret
      - cryptoutil_unseal_4of5.secret
      - cryptoutil_unseal_5of5.secret
      # IMPORTANT: ALL cryptoutil-sqlite instances MUST NOT use url secret
      # for database connection, as they do not share data.
    depends_on:
      opentelemetry-collector-contrib:
        condition: service_started
      opentelemetry-collector-contrib-healthcheck:
        condition: service_completed_successfully
    healthcheck:
      # curl is not available in Alpine-based containers, use wget instead
      test: ["CMD", "wget", "--no-check-certificate", "-q", "-O", "/dev/null", "https://127.0.0.1:9090/livez"]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - cryptoutil-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  cryptoutil_postgres_1:
    build:
      context: ../..
      dockerfile: deployments/Dockerfile
      args:
        APP_VERSION: "dev"
        VCS_REF: "local"
        BUILD_DATE: "2025-10-13T00:00:00Z"
    command: ["server", "start", "--config=/app/config/cryptoutil-postgresql-1.yml", "--config=/app/config/cryptoutil-common.yml", "--config=/app/otel/cryptoutil-otel.yml", "-u", "file:///run/secrets/postgres_url.secret"]
    working_dir: /tmp # TODO Verify it works with /app/run instead of /tmp
    ports:
      - "8081:8080"    # HTTPS public
    volumes:
      - ./cryptoutil/cryptoutil-postgresql-1.yml:/app/config/cryptoutil-postgresql-1.yml:ro
      - ./cryptoutil/cryptoutil-common.yml:/app/config/cryptoutil-common.yml:ro
      - ./otel/cryptoutil-otel.yml:/app/otel/cryptoutil-otel.yml:ro
    secrets:
      # IMPORTANT: ALL cryptoutil instances MUST use the SAME secrets for unseal keys
      # to enable shared encryption/decryption of data in the database. NEVER use
      # instance-specific secrets as this breaks cryptographic interoperability.
      - cryptoutil_unseal_1of5.secret
      - cryptoutil_unseal_2of5.secret
      - cryptoutil_unseal_3of5.secret
      - cryptoutil_unseal_4of5.secret
      - cryptoutil_unseal_5of5.secret
      # IMPORTANT: ALL cryptoutil-postgres instances MUST use the SAME url secret
      # for database connection to enable shared data in the database.
      - postgres_url.secret
    depends_on:
      postgres:
        condition: service_started
      opentelemetry-collector-contrib:
        condition: service_started
      opentelemetry-collector-contrib-healthcheck:
        condition: service_completed_successfully
    healthcheck:
      # curl is not available in Alpine-based containers, use wget instead
      test: ["CMD", "wget", "--no-check-certificate", "-q", "-O", "/dev/null", "https://127.0.0.1:9090/livez"]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - cryptoutil-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  cryptoutil_postgres_2:
    build:
      context: ../..
      dockerfile: deployments/Dockerfile
      args:
        APP_VERSION: "dev"
        VCS_REF: "local"
        BUILD_DATE: "2025-10-13T00:00:00Z"
    command: ["server", "start", "--config=/app/config/cryptoutil-postgresql-2.yml", "--config=/app/config/cryptoutil-common.yml", "--config=/app/otel/cryptoutil-otel.yml", "-u", "file:///run/secrets/postgres_url.secret"]
    working_dir: /tmp # TODO Verify it works with /app/run instead of /tmp
    ports:
      - "8082:8080"    # HTTPS public
      # - "9090:9090"    # HTTPS admin (health endpoints) - NOT EXPOSED: bound to 127.0.0.1, not externally reachable
    volumes:
      - ./cryptoutil/cryptoutil-postgresql-2.yml:/app/config/cryptoutil-postgresql-2.yml:ro
      - ./cryptoutil/cryptoutil-common.yml:/app/config/cryptoutil-common.yml:ro
      - ./otel/cryptoutil-otel.yml:/app/otel/cryptoutil-otel.yml:ro
    secrets:
      # IMPORTANT: ALL cryptoutil instances MUST use the SAME secrets for unseal keys
      # to enable shared encryption/decryption of data in the database. NEVER use
      # instance-specific secrets as this breaks cryptographic interoperability.
      - cryptoutil_unseal_1of5.secret
      - cryptoutil_unseal_2of5.secret
      - cryptoutil_unseal_3of5.secret
      - cryptoutil_unseal_4of5.secret
      - cryptoutil_unseal_5of5.secret
      # IMPORTANT: ALL cryptoutil-postgres instances MUST use the SAME url secret
      # for database connection to enable shared data in the database.
      - postgres_url.secret
    depends_on:
      postgres:
        condition: service_started
      opentelemetry-collector-contrib:
        condition: service_started
      opentelemetry-collector-contrib-healthcheck:
        condition: service_completed_successfully
      cryptoutil_postgres_1:
        condition: service_healthy
    healthcheck:
      # curl is not available in Alpine-based containers, use wget instead
      test: ["CMD", "wget", "--no-check-certificate", "-q", "-O", "/dev/null", "https://127.0.0.1:9090/livez"]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - cryptoutil-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  postgres:
    image: postgres:18
    # TODO: Switch postgres service to use mounted secrets files instead of hard-coded environment variables
    # TODO: Update cryptoutil-postgres services to use individual postgres secrets (username, password, database) instead of postgres_url.secret
    environment:
      POSTGRES_USER: USR # pragma: allowlist secret
      POSTGRES_PASSWORD: PWD # pragma: allowlist secret
      POSTGRES_DB: DB # pragma: allowlist secret
    shm_size: 256mb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U USR -d DB"] # pragma: allowlist secret
      start_period: 5s
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - cryptoutil-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  opentelemetry-collector-contrib:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Self-metrics (Prometheus)
      - "8889:8889"   # Received-metrics (Prometheus, for re-export)
      - "13133:13133" # Health check
      - "1777:1777"   # pprof
      - "55679:55679" # zPages
    volumes:
      - ./otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    depends_on:
      # grafana takes a long time to be healthy, so only wait for it to start
      grafana-otel-lgtm:
        # condition: service_healthy
        condition: service_started
    networks:
      - cryptoutil-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  opentelemetry-collector-contrib-healthcheck:
    image: alpine:latest
#   command: ["sh", "-c", "ping_success() { ping -c 1 -W 1 opentelemetry-collector-contrib; }; for i in $(seq 1 10); do if ping_success; then for j in $(seq 1 20); do wget --quiet --spider http://opentelemetry-collector-contrib:13133/ && echo 'Health check successful' && exit 0; sleep 1; done; echo 'Wget failed after ping success'; exit 1; fi; sleep 1; done; echo 'Ping failed after 10 attempts'; exit 1"]
    command: ["sh", "-c", "echo 'Waiting for OTEL collector to be ready...'; sleep 10; ping_success() { ping -c 1 -W 1 opentelemetry-collector-contrib >/dev/null 2>&1; }; wget_success() { wget --quiet --spider --timeout=5 http://opentelemetry-collector-contrib:13133/ >/dev/null 2>&1; }; for i in $$(seq 1 15); do echo \"Attempt $$i: Checking OTEL collector...\"; if ping_success; then echo 'Ping successful, checking health endpoint...'; if wget_success; then echo 'Health check successful - OTEL collector is ready'; exit 0; else echo 'Health endpoint not ready yet, retrying...'; fi; else echo 'Ping failed, waiting...'; fi; sleep 2; done; echo 'Health check failed after 15 attempts'; exit 1"]
    depends_on:
      opentelemetry-collector-contrib:
        condition: service_started
    networks:
      - cryptoutil-network

  grafana-otel-lgtm:
    image: grafana/otel-lgtm:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin # pragma: allowlist secret
      GF_USERS_ALLOW_SIGN_UP: "false"
    ports:
      - "3000:3000"    # Grafana UI
      - "14317:4317"    # OTLP gRPC
      - "14318:4318"    # OTLP HTTP
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-otel-lgtm/provisioning:/etc/grafana/provisioning:ro
      - ./grafana-otel-lgtm/dashboards:/var/lib/grafana/dashboards:ro
    healthcheck:
      # curl is available in this container, but using wget would be consistent with other containers
      # however wget is not available here, so curl is used for this container only
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cryptoutil-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

networks:
  cryptoutil-network:
    driver: bridge

volumes:
  postgres_data:
    name: cryptoutil_postgres_volume
  cryptoutil_sqlite_certs:
    name: cryptoutil_sqlite_certs_volume
  cryptoutil_postgres_certs:
    name: cryptoutil_postgres_certs_volume
  grafana_data:
    name: cryptoutil_grafana_volume

secrets:
  # IMPORTANT: ALL cryptoutil-postgres instances MUST use the SAME secrets
  # for database connection to enable shared data in the database.
  # NEVER create instance-specific database connection.
  # IMPORTANT: All cryptoutil-sqlite instances MAY use different database
  # connection secrets as they do not share data.
  postgres_username.secret:
    file: ./postgres/postgres_username.secret
  postgres_password.secret:
    file: ./postgres/postgres_password.secret
  postgres_database.secret:
    file: ./postgres/postgres_database.secret
  postgres_url.secret:
    file: ./postgres/postgres_url.secret

  # IMPORTANT: ALL cryptoutil instances MUST use the SAME unseal secrets
  # to enable shared encryption/decryption of data in the database.
  # NEVER create instance-specific secrets as this breaks cryptographic interoperability.
  cryptoutil_unseal_1of5.secret:
    file: ./cryptoutil/cryptoutil_unseal_1of5.secret # pragma: allowlist secret
  cryptoutil_unseal_2of5.secret:
    file: ./cryptoutil/cryptoutil_unseal_2of5.secret
  cryptoutil_unseal_3of5.secret:
    file: ./cryptoutil/cryptoutil_unseal_3of5.secret
  cryptoutil_unseal_4of5.secret:
    file: ./cryptoutil/cryptoutil_unseal_4of5.secret
  cryptoutil_unseal_5of5.secret:
    file: ./cryptoutil/cryptoutil_unseal_5of5.secret
