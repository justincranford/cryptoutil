# Pre-commit hooks configuration for automatic code formatting
# Install: pip install pre-commit && pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # Generic file checks (lightweight and reliable)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      # Ensure files end with newline
      - id: end-of-file-fixer
        name: Fix end of files
        exclude: '\.(exe|dll|so|dylib|key|crt)$'  # Skip binary/executable files

      # Remove trailing whitespace
      - id: trailing-whitespace
        name: Remove trailing whitespace
        args: [--markdown-linebreak-ext=md]

      # Check for UTF-8 encoding without BOM
      - id: fix-byte-order-marker
        name: Fix UTF-8 without BOM
        exclude: '\.(exe|dll|so|dylib|key|crt|pem)$'  # Skip binary files

      # Check YAML syntax
      - id: check-yaml
        name: Check YAML syntax

      # Check JSON syntax (excluding VS Code JSONC files with comments)
      - id: check-json
        name: Check JSON syntax
        exclude: '\.vscode/.*\.json$'  # Skip VS Code settings with comments

      # Prevent large files from being committed
      - id: check-added-large-files
        name: Check for large files
        args: ['--maxkb=1024']

      # Prevent merge conflict markers
      - id: check-merge-conflict
        name: Check for merge conflict markers

      # Security checks (critical for crypto project)
      - id: detect-aws-credentials
        name: Check for AWS credentials
        args: [--allow-missing-credentials]
      - id: detect-private-key
        name: Check for private keys

      # Cross-platform compatibility
      - id: check-case-conflict
        name: Check for case conflicts
      - id: check-illegal-windows-names
        name: Check for illegal Windows filenames

      # File validation
      - id: check-toml
        name: Check TOML syntax
      - id: check-symlinks
        name: Check for broken symlinks

      # Script validation
      - id: check-executables-have-shebangs
        name: Check executables have shebangs
      - id: check-shebang-scripts-are-executable
        name: Check shebang scripts are executable
        exclude: '\.(ps1|sh)$'  # Skip PowerShell and shell scripts (don't need execute permission on Windows)

      # VCS and repository checks
      - id: check-vcs-permalinks
        name: Check VCS permalinks
      - id: forbid-new-submodules
        name: Prevent new git submodules

      # Formatting and branch protection
      - id: pretty-format-json
        name: Pretty format JSON files
        args: [--autofix, --indent=2]
        exclude: '\.vscode/.*\.json$'  # Skip VS Code settings with comments
      - id: no-commit-to-branch
        name: Prevent commits to protected branches
        args: [--branch, main]
        stages: [pre-push]  # Only run on push, not on commit
      - id: mixed-line-ending
        name: Fix mixed line endings
        args: [--fix=auto]

  # GitHub Actions workflow linting
  - repo: https://github.com/rhysd/actionlint
    rev: v1.7.7
    hooks:
      - id: actionlint

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker

  # Go build check
  - repo: local
    hooks:
      - id: go-build
        name: go build
        entry: go
        args: [build, ./...]
        language: system
        pass_filenames: false

  # Go formatting
  - repo: local
    hooks:
      - id: gofumpt
        name: gofumpt (Go formatting)
        entry: gofumpt
        args: [-extra, -w]
        language: system
        files: '\.go$'
        exclude: '_gen\.go$|\.pb\.go$|vendor/|api/client|api/model|api/server'  # Skip generated files and dirs

  # Go linting (subset of golangci-lint embedded linters; just a few fast, local, high-frequency linters)
  - repo: local
    hooks:
      - id: goimports
        name: goimports (Go import organization)
        entry: goimports
        args: [-w]
        language: system
        files: '\.go$'
        exclude: '_gen\.go$|\.pb\.go$|vendor/|api/client|api/model|api/server'  # Skip generated files and dirs

      - id: errcheck
        name: errcheck (error checking)
        entry: powershell
        args: [-Command, "Get-ChildItem -Recurse -Include *.go -Exclude *_gen.go,*.pb.go | Where-Object { $_.FullName -notmatch 'vendor|api/client|api/model|api/server' } | Group-Object { $_.DirectoryName } | ForEach-Object { Push-Location $_.Name; try { & 'C:/Users/justi/go/bin/errcheck.exe' -blank -asserts -exclude ../../../scripts/errcheck_excludes.txt ./ } finally { Pop-Location } }"]
        language: system
        pass_filenames: false

  # Go mod tidy
  - repo: local
    hooks:
      - id: go-mod-tidy
        name: go mod tidy
        entry: go
        args: [mod, tidy]
        language: system
        pass_filenames: false
        files: go\.mod$

  # Test pattern enforcement
  - repo: local
    hooks:
      - id: test-patterns
        name: Enforce test patterns (UUIDv7, testify assertions)
        entry: go
        args: [run, scripts/cicd_utils.go, enforce-test-patterns]
        language: system
        pass_filenames: false
        files: go\.mod$  # Only run when go.mod changes (not per test file)

# Global configuration
default_stages: [pre-commit]
minimum_pre_commit_version: '2.20.0'
