# Pre-commit hooks configuration for automatic code formatting
# Install: pip install pre-commit && pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # Generic file checks (lightweight and reliable)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      # Ensure files end with newline
      - id: end-of-file-fixer
        name: Fix end of files
        exclude: '\.(exe|dll|so|dylib|key|crt)$'  # Skip binary/executable files
        stages: [pre-commit]

      # Remove trailing whitespace
      - id: trailing-whitespace
        name: Remove trailing whitespace
        args: [--markdown-linebreak-ext=md]
        stages: [pre-commit]

      # Check for UTF-8 encoding without BOM
      - id: fix-byte-order-marker
        name: Fix UTF-8 without BOM
        exclude: '\.(exe|dll|so|dylib|key|crt)$'  # Skip binary files
        stages: [pre-commit]

      # Check YAML syntax
      - id: check-yaml
        name: Check YAML syntax
        stages: [pre-commit]

      # Check JSON syntax (excluding VS Code JSONC files with comments)
      - id: check-json
        name: Check JSON syntax
        exclude: '\.vscode/.*\.json$'  # Skip VS Code settings with comments
        stages: [pre-commit]

      # Prevent large files from being committed
      - id: check-added-large-files
        name: Check for large files
        args: ['--maxkb=1024']
        stages: [pre-commit]

      # Prevent merge conflict markers
      - id: check-merge-conflict
        name: Check for merge conflict markers
        stages: [pre-commit]

      # Security checks (critical for crypto project)
      - id: detect-aws-credentials
        name: Check for AWS credentials
        args: [--allow-missing-credentials]
        stages: [pre-commit]
      - id: detect-private-key
        name: Check for private keys
        stages: [pre-commit]

      # Cross-platform compatibility
      - id: check-case-conflict
        name: Check for case conflicts
        stages: [pre-commit]
      - id: check-illegal-windows-names
        name: Check for illegal Windows filenames
        stages: [pre-commit]

      # File validation
      - id: check-toml
        name: Check TOML syntax
        stages: [pre-commit]
      - id: check-symlinks
        name: Check for broken symlinks
        stages: [pre-commit]

      # Script validation
      - id: check-executables-have-shebangs
        name: Check executables have shebangs
        stages: [pre-commit]
      - id: check-shebang-scripts-are-executable
        name: Check shebang scripts are executable
        exclude: '\.(ps1|sh)$'  # Skip PowerShell and shell scripts (don't need execute permission on Windows)
        stages: [pre-commit]

      # VCS and repository checks
      - id: check-vcs-permalinks
        name: Check VCS permalinks
        stages: [pre-commit]
      - id: forbid-new-submodules
        name: Prevent new git submodules
        stages: [pre-commit]

      # Formatting and branch protection
      - id: pretty-format-json
        name: Pretty format JSON files
        args: [--autofix, --indent=2]
        exclude: '\.vscode/.*\.json$'  # Skip VS Code settings with comments
      # - id: no-commit-to-branch
      #   name: Prevent commits to protected branches
      #   args: [--branch, main]
      #   stages: [pre-push]  # Only run on push, not on commit
      - id: mixed-line-ending
        name: Fix mixed line endings

  # Go dependency management (clean state before linting)
  - repo: local
    hooks:
      - id: go-mod-tidy
        name: go mod tidy
        entry: go
        args: [mod, tidy]
        language: system
        pass_filenames: false
        files: go\.mod$

  # Go linting with auto-fix (includes formatting, imports, and all enabled linters)
  - repo: local
    hooks:
      - id: golangci-lint
        name: golangci-lint (auto-fix + validation)
        entry: golangci-lint
        args: [run, --fix, --timeout=10m]
        language: system
        pass_filenames: false
        stages: [pre-commit]  # Run full linting on commit, not just on push

      - id: gofumpt-extra
        name: gofumpt extra rules (additional formatting beyond golangci-lint)
        entry: gofumpt
        args: [-extra, -w, .]
        language: system
        pass_filenames: false
        stages: [pre-commit]

  # Go build validation
  - repo: local
    hooks:
      - id: go-build
        name: go build
        entry: go
        args: [build, ./...]
        language: system
        pass_filenames: false

  # Custom project checks
  - repo: local
    hooks:
      - id: cicd-checks
        name: Run all CI/CD quality checks (test patterns, go-enforce-any, workflow lint, circular deps, file encoding)
        entry: go
        args: [run, cmd/cicd/main.go, all-enforce-utf8, go-enforce-test-patterns, go-enforce-any, github-workflow-lint, go-check-circular-package-dependencies]
        language: system
        pass_filenames: false

  # Specialized file linting: GitHub Actions workflow linting
  - repo: https://github.com/rhysd/actionlint
    rev: v1.7.8
    hooks:
      - id: actionlint

  # Specialized file linting: Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.14.0
    hooks:
      - id: hadolint-docker

  # Specialized file linting: Shell script linting
  - repo: https://github.com/koalaman/shellcheck-precommit
    rev: v0.11.0
    hooks:
      - id: shellcheck
        name: Shell script linting
        args: [--severity=warning, --exclude=SC1111]

  # Specialized file linting: Python security linting
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.6
    hooks:
      - id: bandit
        name: Python security linting
        files: '\.py$'

  # Conventional commit validation
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v4.9.1
    hooks:
      - id: commitizen
        name: Check conventional commit message
        stages: [commit-msg]

# Global configuration
default_stages: [pre-commit]
minimum_pre_commit_version: '2.20.0'
