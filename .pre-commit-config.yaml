# Pre-commit hooks configuration for automatic code formatting
# Install: pip install pre-commit && pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # Generic file checks (lightweight and reliable)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      # Ensure files end with newline
      - id: end-of-file-fixer
        name: Fix end of files
        exclude: '\.(exe|dll|so|dylib|key|crt)$'  # Skip binary/executable files

      # Remove trailing whitespace
      - id: trailing-whitespace
        name: Remove trailing whitespace
        args: [--markdown-linebreak-ext=md]

      # Check YAML syntax
      - id: check-yaml
        name: Check YAML syntax

      # Check JSON syntax (excluding VS Code JSONC files with comments)
      - id: check-json
        name: Check JSON syntax
        exclude: '\.vscode/.*\.json$'  # Skip VS Code settings with comments

      # Prevent large files from being committed
      - id: check-added-large-files
        name: Check for large files
        args: ['--maxkb=1024']

      # Prevent merge conflict markers
      - id: check-merge-conflict
        name: Check for merge conflict markers

  # GitHub Actions workflow linting
  - repo: https://github.com/rhysd/actionlint
    rev: v1.7.7
    hooks:
      - id: actionlint

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker

  # Go build check
  - repo: local
    hooks:
      - id: go-build
        name: go build
        entry: go
        args: [build, ./...]
        language: system
        pass_filenames: false

  # Go formatting
  - repo: local
    hooks:
      - id: gofumpt
        name: gofumpt (Go formatting)
        entry: gofumpt
        args: [-extra, -w]
        language: system
        files: '\.go$'
        exclude: '_gen\.go$|\.pb\.go$|vendor/|api/'  # Skip generated files and dirs

  # Go linting (subset of golangci-lint embedded linters; just a few fast, local, high-frequency linters)
  - repo: local
    hooks:
      - id: goimports
        name: goimports (Go import organization)
        entry: goimports
        args: [-w]
        language: system
        files: '\.go$'
        exclude: '_gen\.go$|\.pb\.go$|vendor/|api/'  # Skip generated files and dirs

      - id: errcheck
        name: errcheck (error checking)
        entry: powershell
        args: [-Command, "Get-ChildItem -Recurse -Include *.go -Exclude *_gen.go,*.pb.go | Where-Object { $_.FullName -notmatch 'vendor|api' } | Group-Object { $_.DirectoryName } | ForEach-Object { Push-Location $_.Name; try { & 'C:/Users/justi/go/bin/errcheck.exe' -blank -asserts -exclude ../../../scripts/errcheck_excludes.txt ./ } finally { Pop-Location } }"]
        language: system
        pass_filenames: false

  # Go mod tidy
  - repo: local
    hooks:
      - id: go-mod-tidy
        name: go mod tidy
        entry: go
        args: [mod, tidy]
        language: system
        pass_filenames: false
        files: go\.mod$

  # Comprehensive Go linting (runs on pre-push instead of pre-commit, because it can be slow)
  # Note: Uses exclusions from .golangci.yml config file, not pre-commit file filters
  - repo: local
    hooks:
      - id: golangci-lint
        name: golangci-lint
        entry: golangci-lint
        args: [run, --timeout=5m]
        language: system
        pass_filenames: false
        stages: [pre-push]

      # Dependency and Actions checking (runs on pre-push)
      - id: check-outdated-deps-and-actions
        name: Check for outdated Go dependencies and GitHub Actions
        entry: go
        args: [run, scripts/cicd_utils.go, go-dependency-versions, github-action-versions]
        language: system
        pass_filenames: false
        stages: [pre-push]

# Global configuration
default_stages: [pre-commit]
minimum_pre_commit_version: '2.20.0'
