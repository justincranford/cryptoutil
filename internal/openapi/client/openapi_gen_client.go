// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "cryptoutil/internal/openapi/model"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// PostElastickeyElasticKeyIDEncryptParams defines parameters for PostElastickeyElasticKeyIDEncrypt.
type PostElastickeyElasticKeyIDEncryptParams struct {
	Context *externalRef0.EncryptContext `form:"context,omitempty" json:"context,omitempty"`
}

// GetElastickeyElasticKeyIDMaterialkeysParams defines parameters for GetElastickeyElasticKeyIDMaterialkeys.
type GetElastickeyElasticKeyIDMaterialkeysParams struct {
	// MaterialKeyID Filter by the Material Key ID.
	MaterialKeyID *externalRef0.MaterialKeyQueryParamMaterialKeyIds `form:"material_key_id,omitempty" json:"material_key_id,omitempty"`

	// MinGenerateDate Filter by the Material Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.MaterialKeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Material Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.MaterialKeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `material_key_id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.MaterialKeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.MaterialKeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.MaterialKeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostElastickeyElasticKeyIDSignParams defines parameters for PostElastickeyElasticKeyIDSign.
type PostElastickeyElasticKeyIDSignParams struct {
	Context *externalRef0.SignContext `form:"context,omitempty" json:"context,omitempty"`
}

// GetElastickeysParams defines parameters for GetElastickeys.
type GetElastickeysParams struct {
	// ElasticKeyID Filter by the Elastic Key ID (UUID).
	ElasticKeyID *externalRef0.ElasticKeyQueryParamElasticKeyIds `form:"elastic_key_id,omitempty" json:"elastic_key_id,omitempty"`

	// Name Filter by the Elastic Key name.
	Name *externalRef0.ElasticKeyQueryParamNames `form:"name,omitempty" json:"name,omitempty"`

	// Provider Filter by Elastic Key provider.
	Provider *externalRef0.ElasticKeyQueryParamProviders `form:"provider,omitempty" json:"provider,omitempty"`

	// Algorithm Filter by cryptographic algorithm.
	Algorithm *externalRef0.ElasticKeyQueryParamAlgorithms `form:"algorithm,omitempty" json:"algorithm,omitempty"`

	// VersioningAllowed Filter by whether versioning is allowed.
	VersioningAllowed *externalRef0.ElasticKeyQueryParamVersioningAllowed `form:"versioning_allowed,omitempty" json:"versioning_allowed,omitempty"`

	// ImportAllowed Filter by whether import is allowed.
	ImportAllowed *externalRef0.ElasticKeyQueryParamImportAllowed `form:"import_allowed,omitempty" json:"import_allowed,omitempty"`

	// ExportAllowed Filter by whether export is allowed.
	ExportAllowed *externalRef0.ElasticKeyQueryParamExportAllowed `form:"export_allowed,omitempty" json:"export_allowed,omitempty"`

	// Status Filter by the Elastic Key status.
	Status *externalRef0.ElasticKeyQueryParamStatuses `form:"status,omitempty" json:"status,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `name:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.ElasticKeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.ElasticKeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.ElasticKeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetMaterialkeysParams defines parameters for GetMaterialkeys.
type GetMaterialkeysParams struct {
	// ElasticKeyID Filter by the Elastic Key ID (uuid).
	ElasticKeyID *externalRef0.MaterialKeyQueryParamElasticKeyIds `form:"elastic_key_id,omitempty" json:"elastic_key_id,omitempty"`

	// MaterialKeyID Filter by the Material Key ID.
	MaterialKeyID *externalRef0.MaterialKeyQueryParamMaterialKeyIds `form:"material_key_id,omitempty" json:"material_key_id,omitempty"`

	// MinGenerateDate Filter by the Material Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.MaterialKeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Material Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.MaterialKeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `material_key_id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.MaterialKeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.MaterialKeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.MaterialKeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostElastickeyJSONRequestBody defines body for PostElastickey for application/json ContentType.
type PostElastickeyJSONRequestBody = externalRef0.ElasticKeyCreate

// PostElastickeyElasticKeyIDDecryptTextRequestBody defines body for PostElastickeyElasticKeyIDDecrypt for text/plain ContentType.
type PostElastickeyElasticKeyIDDecryptTextRequestBody = externalRef0.DecryptRequest

// PostElastickeyElasticKeyIDEncryptTextRequestBody defines body for PostElastickeyElasticKeyIDEncrypt for text/plain ContentType.
type PostElastickeyElasticKeyIDEncryptTextRequestBody = externalRef0.EncryptRequest

// PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody defines body for PostElastickeyElasticKeyIDMaterialkey for application/json ContentType.
type PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody = externalRef0.MaterialKeyGenerate

// PostElastickeyElasticKeyIDSignTextRequestBody defines body for PostElastickeyElasticKeyIDSign for text/plain ContentType.
type PostElastickeyElasticKeyIDSignTextRequestBody = externalRef0.SignRequest

// PostElastickeyElasticKeyIDVerifyTextRequestBody defines body for PostElastickeyElasticKeyIDVerify for text/plain ContentType.
type PostElastickeyElasticKeyIDVerifyTextRequestBody = externalRef0.VerifyRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostElastickeyWithBody request with any body
	PostElastickeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostElastickey(ctx context.Context, body PostElastickeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetElastickeyElasticKeyID request
	GetElastickeyElasticKeyID(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostElastickeyElasticKeyIDDecryptWithBody request with any body
	PostElastickeyElasticKeyIDDecryptWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostElastickeyElasticKeyIDDecryptWithTextBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, body PostElastickeyElasticKeyIDDecryptTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostElastickeyElasticKeyIDEncryptWithBody request with any body
	PostElastickeyElasticKeyIDEncryptWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDEncryptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostElastickeyElasticKeyIDEncryptWithTextBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDEncryptParams, body PostElastickeyElasticKeyIDEncryptTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostElastickeyElasticKeyIDMaterialkeyWithBody request with any body
	PostElastickeyElasticKeyIDMaterialkeyWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostElastickeyElasticKeyIDMaterialkey(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, body PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID request
	GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, materialKeyID externalRef0.MaterialKeyID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetElastickeyElasticKeyIDMaterialkeys request
	GetElastickeyElasticKeyIDMaterialkeys(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *GetElastickeyElasticKeyIDMaterialkeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostElastickeyElasticKeyIDSignWithBody request with any body
	PostElastickeyElasticKeyIDSignWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDSignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostElastickeyElasticKeyIDSignWithTextBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDSignParams, body PostElastickeyElasticKeyIDSignTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostElastickeyElasticKeyIDVerifyWithBody request with any body
	PostElastickeyElasticKeyIDVerifyWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostElastickeyElasticKeyIDVerifyWithTextBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, body PostElastickeyElasticKeyIDVerifyTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetElastickeys request
	GetElastickeys(ctx context.Context, params *GetElastickeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMaterialkeys request
	GetMaterialkeys(ctx context.Context, params *GetMaterialkeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostElastickeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickey(ctx context.Context, body PostElastickeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElastickeyElasticKeyID(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElastickeyElasticKeyIDRequest(c.Server, elasticKeyID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDDecryptWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDDecryptRequestWithBody(c.Server, elasticKeyID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDDecryptWithTextBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, body PostElastickeyElasticKeyIDDecryptTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDDecryptRequestWithTextBody(c.Server, elasticKeyID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDEncryptWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDEncryptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDEncryptRequestWithBody(c.Server, elasticKeyID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDEncryptWithTextBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDEncryptParams, body PostElastickeyElasticKeyIDEncryptTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDEncryptRequestWithTextBody(c.Server, elasticKeyID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDMaterialkeyWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDMaterialkeyRequestWithBody(c.Server, elasticKeyID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDMaterialkey(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, body PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDMaterialkeyRequest(c.Server, elasticKeyID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, materialKeyID externalRef0.MaterialKeyID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDRequest(c.Server, elasticKeyID, materialKeyID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElastickeyElasticKeyIDMaterialkeys(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *GetElastickeyElasticKeyIDMaterialkeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElastickeyElasticKeyIDMaterialkeysRequest(c.Server, elasticKeyID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDSignWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDSignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDSignRequestWithBody(c.Server, elasticKeyID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDSignWithTextBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDSignParams, body PostElastickeyElasticKeyIDSignTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDSignRequestWithTextBody(c.Server, elasticKeyID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDVerifyWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDVerifyRequestWithBody(c.Server, elasticKeyID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDVerifyWithTextBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, body PostElastickeyElasticKeyIDVerifyTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDVerifyRequestWithTextBody(c.Server, elasticKeyID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElastickeys(ctx context.Context, params *GetElastickeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElastickeysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMaterialkeys(ctx context.Context, params *GetMaterialkeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMaterialkeysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostElastickeyRequest calls the generic PostElastickey builder with application/json body
func NewPostElastickeyRequest(server string, body PostElastickeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostElastickeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostElastickeyRequestWithBody generates requests for PostElastickey with any type of body
func NewPostElastickeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickey")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetElastickeyElasticKeyIDRequest generates requests for GetElastickeyElasticKeyID
func NewGetElastickeyElasticKeyIDRequest(server string, elasticKeyID externalRef0.ElasticKeyID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elasticKeyID", runtime.ParamLocationPath, elasticKeyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickey/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostElastickeyElasticKeyIDDecryptRequestWithTextBody calls the generic PostElastickeyElasticKeyIDDecrypt builder with text/plain body
func NewPostElastickeyElasticKeyIDDecryptRequestWithTextBody(server string, elasticKeyID externalRef0.ElasticKeyID, body PostElastickeyElasticKeyIDDecryptTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostElastickeyElasticKeyIDDecryptRequestWithBody(server, elasticKeyID, "text/plain", bodyReader)
}

// NewPostElastickeyElasticKeyIDDecryptRequestWithBody generates requests for PostElastickeyElasticKeyIDDecrypt with any type of body
func NewPostElastickeyElasticKeyIDDecryptRequestWithBody(server string, elasticKeyID externalRef0.ElasticKeyID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elasticKeyID", runtime.ParamLocationPath, elasticKeyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickey/%s/decrypt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostElastickeyElasticKeyIDEncryptRequestWithTextBody calls the generic PostElastickeyElasticKeyIDEncrypt builder with text/plain body
func NewPostElastickeyElasticKeyIDEncryptRequestWithTextBody(server string, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDEncryptParams, body PostElastickeyElasticKeyIDEncryptTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostElastickeyElasticKeyIDEncryptRequestWithBody(server, elasticKeyID, params, "text/plain", bodyReader)
}

// NewPostElastickeyElasticKeyIDEncryptRequestWithBody generates requests for PostElastickeyElasticKeyIDEncrypt with any type of body
func NewPostElastickeyElasticKeyIDEncryptRequestWithBody(server string, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDEncryptParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elasticKeyID", runtime.ParamLocationPath, elasticKeyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickey/%s/encrypt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Context != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, *params.Context); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostElastickeyElasticKeyIDMaterialkeyRequest calls the generic PostElastickeyElasticKeyIDMaterialkey builder with application/json body
func NewPostElastickeyElasticKeyIDMaterialkeyRequest(server string, elasticKeyID externalRef0.ElasticKeyID, body PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostElastickeyElasticKeyIDMaterialkeyRequestWithBody(server, elasticKeyID, "application/json", bodyReader)
}

// NewPostElastickeyElasticKeyIDMaterialkeyRequestWithBody generates requests for PostElastickeyElasticKeyIDMaterialkey with any type of body
func NewPostElastickeyElasticKeyIDMaterialkeyRequestWithBody(server string, elasticKeyID externalRef0.ElasticKeyID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elasticKeyID", runtime.ParamLocationPath, elasticKeyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickey/%s/materialkey", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDRequest generates requests for GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID
func NewGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDRequest(server string, elasticKeyID externalRef0.ElasticKeyID, materialKeyID externalRef0.MaterialKeyID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elasticKeyID", runtime.ParamLocationPath, elasticKeyID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "material_key_id", runtime.ParamLocationPath, materialKeyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickey/%s/materialkey/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetElastickeyElasticKeyIDMaterialkeysRequest generates requests for GetElastickeyElasticKeyIDMaterialkeys
func NewGetElastickeyElasticKeyIDMaterialkeysRequest(server string, elasticKeyID externalRef0.ElasticKeyID, params *GetElastickeyElasticKeyIDMaterialkeysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elasticKeyID", runtime.ParamLocationPath, elasticKeyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickey/%s/materialkeys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MaterialKeyID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "material_key_id", runtime.ParamLocationQuery, *params.MaterialKeyID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinGenerateDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_generate_date", runtime.ParamLocationQuery, *params.MinGenerateDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxGenerateDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_generate_date", runtime.ParamLocationQuery, *params.MaxGenerateDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostElastickeyElasticKeyIDSignRequestWithTextBody calls the generic PostElastickeyElasticKeyIDSign builder with text/plain body
func NewPostElastickeyElasticKeyIDSignRequestWithTextBody(server string, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDSignParams, body PostElastickeyElasticKeyIDSignTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostElastickeyElasticKeyIDSignRequestWithBody(server, elasticKeyID, params, "text/plain", bodyReader)
}

// NewPostElastickeyElasticKeyIDSignRequestWithBody generates requests for PostElastickeyElasticKeyIDSign with any type of body
func NewPostElastickeyElasticKeyIDSignRequestWithBody(server string, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDSignParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elasticKeyID", runtime.ParamLocationPath, elasticKeyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickey/%s/sign", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Context != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, *params.Context); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostElastickeyElasticKeyIDVerifyRequestWithTextBody calls the generic PostElastickeyElasticKeyIDVerify builder with text/plain body
func NewPostElastickeyElasticKeyIDVerifyRequestWithTextBody(server string, elasticKeyID externalRef0.ElasticKeyID, body PostElastickeyElasticKeyIDVerifyTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostElastickeyElasticKeyIDVerifyRequestWithBody(server, elasticKeyID, "text/plain", bodyReader)
}

// NewPostElastickeyElasticKeyIDVerifyRequestWithBody generates requests for PostElastickeyElasticKeyIDVerify with any type of body
func NewPostElastickeyElasticKeyIDVerifyRequestWithBody(server string, elasticKeyID externalRef0.ElasticKeyID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elasticKeyID", runtime.ParamLocationPath, elasticKeyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickey/%s/verify", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetElastickeysRequest generates requests for GetElastickeys
func NewGetElastickeysRequest(server string, params *GetElastickeysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickeys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ElasticKeyID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "elastic_key_id", runtime.ParamLocationQuery, *params.ElasticKeyID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Algorithm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "algorithm", runtime.ParamLocationQuery, *params.Algorithm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VersioningAllowed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "versioning_allowed", runtime.ParamLocationQuery, *params.VersioningAllowed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ImportAllowed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "import_allowed", runtime.ParamLocationQuery, *params.ImportAllowed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExportAllowed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export_allowed", runtime.ParamLocationQuery, *params.ExportAllowed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMaterialkeysRequest generates requests for GetMaterialkeys
func NewGetMaterialkeysRequest(server string, params *GetMaterialkeysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/materialkeys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ElasticKeyID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "elastic_key_id", runtime.ParamLocationQuery, *params.ElasticKeyID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaterialKeyID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "material_key_id", runtime.ParamLocationQuery, *params.MaterialKeyID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinGenerateDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_generate_date", runtime.ParamLocationQuery, *params.MinGenerateDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxGenerateDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_generate_date", runtime.ParamLocationQuery, *params.MaxGenerateDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostElastickeyWithBodyWithResponse request with any body
	PostElastickeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyResponse, error)

	PostElastickeyWithResponse(ctx context.Context, body PostElastickeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyResponse, error)

	// GetElastickeyElasticKeyIDWithResponse request
	GetElastickeyElasticKeyIDWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, reqEditors ...RequestEditorFn) (*GetElastickeyElasticKeyIDResponse, error)

	// PostElastickeyElasticKeyIDDecryptWithBodyWithResponse request with any body
	PostElastickeyElasticKeyIDDecryptWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDDecryptResponse, error)

	PostElastickeyElasticKeyIDDecryptWithTextBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, body PostElastickeyElasticKeyIDDecryptTextRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDDecryptResponse, error)

	// PostElastickeyElasticKeyIDEncryptWithBodyWithResponse request with any body
	PostElastickeyElasticKeyIDEncryptWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDEncryptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDEncryptResponse, error)

	PostElastickeyElasticKeyIDEncryptWithTextBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDEncryptParams, body PostElastickeyElasticKeyIDEncryptTextRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDEncryptResponse, error)

	// PostElastickeyElasticKeyIDMaterialkeyWithBodyWithResponse request with any body
	PostElastickeyElasticKeyIDMaterialkeyWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDMaterialkeyResponse, error)

	PostElastickeyElasticKeyIDMaterialkeyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, body PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDMaterialkeyResponse, error)

	// GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDWithResponse request
	GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, materialKeyID externalRef0.MaterialKeyID, reqEditors ...RequestEditorFn) (*GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse, error)

	// GetElastickeyElasticKeyIDMaterialkeysWithResponse request
	GetElastickeyElasticKeyIDMaterialkeysWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *GetElastickeyElasticKeyIDMaterialkeysParams, reqEditors ...RequestEditorFn) (*GetElastickeyElasticKeyIDMaterialkeysResponse, error)

	// PostElastickeyElasticKeyIDSignWithBodyWithResponse request with any body
	PostElastickeyElasticKeyIDSignWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDSignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDSignResponse, error)

	PostElastickeyElasticKeyIDSignWithTextBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDSignParams, body PostElastickeyElasticKeyIDSignTextRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDSignResponse, error)

	// PostElastickeyElasticKeyIDVerifyWithBodyWithResponse request with any body
	PostElastickeyElasticKeyIDVerifyWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDVerifyResponse, error)

	PostElastickeyElasticKeyIDVerifyWithTextBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, body PostElastickeyElasticKeyIDVerifyTextRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDVerifyResponse, error)

	// GetElastickeysWithResponse request
	GetElastickeysWithResponse(ctx context.Context, params *GetElastickeysParams, reqEditors ...RequestEditorFn) (*GetElastickeysResponse, error)

	// GetMaterialkeysWithResponse request
	GetMaterialkeysWithResponse(ctx context.Context, params *GetMaterialkeysParams, reqEditors ...RequestEditorFn) (*GetMaterialkeysResponse, error)
}

type PostElastickeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ElasticKey
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostElastickeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostElastickeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetElastickeyElasticKeyIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ElasticKey
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetElastickeyElasticKeyIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetElastickeyElasticKeyIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostElastickeyElasticKeyIDDecryptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostElastickeyElasticKeyIDDecryptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostElastickeyElasticKeyIDDecryptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostElastickeyElasticKeyIDEncryptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostElastickeyElasticKeyIDEncryptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostElastickeyElasticKeyIDEncryptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostElastickeyElasticKeyIDMaterialkeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.MaterialKey
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostElastickeyElasticKeyIDMaterialkeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostElastickeyElasticKeyIDMaterialkeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.MaterialKey
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetElastickeyElasticKeyIDMaterialkeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.MaterialKey
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetElastickeyElasticKeyIDMaterialkeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetElastickeyElasticKeyIDMaterialkeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostElastickeyElasticKeyIDSignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostElastickeyElasticKeyIDSignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostElastickeyElasticKeyIDSignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostElastickeyElasticKeyIDVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostElastickeyElasticKeyIDVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostElastickeyElasticKeyIDVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetElastickeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.ElasticKey
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetElastickeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetElastickeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMaterialkeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.MaterialKey
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetMaterialkeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMaterialkeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostElastickeyWithBodyWithResponse request with arbitrary body returning *PostElastickeyResponse
func (c *ClientWithResponses) PostElastickeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyResponse, error) {
	rsp, err := c.PostElastickeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyResponse(rsp)
}

func (c *ClientWithResponses) PostElastickeyWithResponse(ctx context.Context, body PostElastickeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyResponse, error) {
	rsp, err := c.PostElastickey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyResponse(rsp)
}

// GetElastickeyElasticKeyIDWithResponse request returning *GetElastickeyElasticKeyIDResponse
func (c *ClientWithResponses) GetElastickeyElasticKeyIDWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, reqEditors ...RequestEditorFn) (*GetElastickeyElasticKeyIDResponse, error) {
	rsp, err := c.GetElastickeyElasticKeyID(ctx, elasticKeyID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElastickeyElasticKeyIDResponse(rsp)
}

// PostElastickeyElasticKeyIDDecryptWithBodyWithResponse request with arbitrary body returning *PostElastickeyElasticKeyIDDecryptResponse
func (c *ClientWithResponses) PostElastickeyElasticKeyIDDecryptWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDDecryptResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDDecryptWithBody(ctx, elasticKeyID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDDecryptResponse(rsp)
}

func (c *ClientWithResponses) PostElastickeyElasticKeyIDDecryptWithTextBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, body PostElastickeyElasticKeyIDDecryptTextRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDDecryptResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDDecryptWithTextBody(ctx, elasticKeyID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDDecryptResponse(rsp)
}

// PostElastickeyElasticKeyIDEncryptWithBodyWithResponse request with arbitrary body returning *PostElastickeyElasticKeyIDEncryptResponse
func (c *ClientWithResponses) PostElastickeyElasticKeyIDEncryptWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDEncryptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDEncryptResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDEncryptWithBody(ctx, elasticKeyID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDEncryptResponse(rsp)
}

func (c *ClientWithResponses) PostElastickeyElasticKeyIDEncryptWithTextBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDEncryptParams, body PostElastickeyElasticKeyIDEncryptTextRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDEncryptResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDEncryptWithTextBody(ctx, elasticKeyID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDEncryptResponse(rsp)
}

// PostElastickeyElasticKeyIDMaterialkeyWithBodyWithResponse request with arbitrary body returning *PostElastickeyElasticKeyIDMaterialkeyResponse
func (c *ClientWithResponses) PostElastickeyElasticKeyIDMaterialkeyWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDMaterialkeyResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDMaterialkeyWithBody(ctx, elasticKeyID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDMaterialkeyResponse(rsp)
}

func (c *ClientWithResponses) PostElastickeyElasticKeyIDMaterialkeyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, body PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDMaterialkeyResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDMaterialkey(ctx, elasticKeyID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDMaterialkeyResponse(rsp)
}

// GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDWithResponse request returning *GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse
func (c *ClientWithResponses) GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, materialKeyID externalRef0.MaterialKeyID, reqEditors ...RequestEditorFn) (*GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse, error) {
	rsp, err := c.GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(ctx, elasticKeyID, materialKeyID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(rsp)
}

// GetElastickeyElasticKeyIDMaterialkeysWithResponse request returning *GetElastickeyElasticKeyIDMaterialkeysResponse
func (c *ClientWithResponses) GetElastickeyElasticKeyIDMaterialkeysWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *GetElastickeyElasticKeyIDMaterialkeysParams, reqEditors ...RequestEditorFn) (*GetElastickeyElasticKeyIDMaterialkeysResponse, error) {
	rsp, err := c.GetElastickeyElasticKeyIDMaterialkeys(ctx, elasticKeyID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElastickeyElasticKeyIDMaterialkeysResponse(rsp)
}

// PostElastickeyElasticKeyIDSignWithBodyWithResponse request with arbitrary body returning *PostElastickeyElasticKeyIDSignResponse
func (c *ClientWithResponses) PostElastickeyElasticKeyIDSignWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDSignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDSignResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDSignWithBody(ctx, elasticKeyID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDSignResponse(rsp)
}

func (c *ClientWithResponses) PostElastickeyElasticKeyIDSignWithTextBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, params *PostElastickeyElasticKeyIDSignParams, body PostElastickeyElasticKeyIDSignTextRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDSignResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDSignWithTextBody(ctx, elasticKeyID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDSignResponse(rsp)
}

// PostElastickeyElasticKeyIDVerifyWithBodyWithResponse request with arbitrary body returning *PostElastickeyElasticKeyIDVerifyResponse
func (c *ClientWithResponses) PostElastickeyElasticKeyIDVerifyWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDVerifyResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDVerifyWithBody(ctx, elasticKeyID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDVerifyResponse(rsp)
}

func (c *ClientWithResponses) PostElastickeyElasticKeyIDVerifyWithTextBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyID, body PostElastickeyElasticKeyIDVerifyTextRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDVerifyResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDVerifyWithTextBody(ctx, elasticKeyID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDVerifyResponse(rsp)
}

// GetElastickeysWithResponse request returning *GetElastickeysResponse
func (c *ClientWithResponses) GetElastickeysWithResponse(ctx context.Context, params *GetElastickeysParams, reqEditors ...RequestEditorFn) (*GetElastickeysResponse, error) {
	rsp, err := c.GetElastickeys(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElastickeysResponse(rsp)
}

// GetMaterialkeysWithResponse request returning *GetMaterialkeysResponse
func (c *ClientWithResponses) GetMaterialkeysWithResponse(ctx context.Context, params *GetMaterialkeysParams, reqEditors ...RequestEditorFn) (*GetMaterialkeysResponse, error) {
	rsp, err := c.GetMaterialkeys(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMaterialkeysResponse(rsp)
}

// ParsePostElastickeyResponse parses an HTTP response from a PostElastickeyWithResponse call
func ParsePostElastickeyResponse(rsp *http.Response) (*PostElastickeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostElastickeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ElasticKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetElastickeyElasticKeyIDResponse parses an HTTP response from a GetElastickeyElasticKeyIDWithResponse call
func ParseGetElastickeyElasticKeyIDResponse(rsp *http.Response) (*GetElastickeyElasticKeyIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetElastickeyElasticKeyIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ElasticKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostElastickeyElasticKeyIDDecryptResponse parses an HTTP response from a PostElastickeyElasticKeyIDDecryptWithResponse call
func ParsePostElastickeyElasticKeyIDDecryptResponse(rsp *http.Response) (*PostElastickeyElasticKeyIDDecryptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostElastickeyElasticKeyIDDecryptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostElastickeyElasticKeyIDEncryptResponse parses an HTTP response from a PostElastickeyElasticKeyIDEncryptWithResponse call
func ParsePostElastickeyElasticKeyIDEncryptResponse(rsp *http.Response) (*PostElastickeyElasticKeyIDEncryptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostElastickeyElasticKeyIDEncryptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostElastickeyElasticKeyIDMaterialkeyResponse parses an HTTP response from a PostElastickeyElasticKeyIDMaterialkeyWithResponse call
func ParsePostElastickeyElasticKeyIDMaterialkeyResponse(rsp *http.Response) (*PostElastickeyElasticKeyIDMaterialkeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostElastickeyElasticKeyIDMaterialkeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.MaterialKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse parses an HTTP response from a GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDWithResponse call
func ParseGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(rsp *http.Response) (*GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.MaterialKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetElastickeyElasticKeyIDMaterialkeysResponse parses an HTTP response from a GetElastickeyElasticKeyIDMaterialkeysWithResponse call
func ParseGetElastickeyElasticKeyIDMaterialkeysResponse(rsp *http.Response) (*GetElastickeyElasticKeyIDMaterialkeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetElastickeyElasticKeyIDMaterialkeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.MaterialKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostElastickeyElasticKeyIDSignResponse parses an HTTP response from a PostElastickeyElasticKeyIDSignWithResponse call
func ParsePostElastickeyElasticKeyIDSignResponse(rsp *http.Response) (*PostElastickeyElasticKeyIDSignResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostElastickeyElasticKeyIDSignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostElastickeyElasticKeyIDVerifyResponse parses an HTTP response from a PostElastickeyElasticKeyIDVerifyWithResponse call
func ParsePostElastickeyElasticKeyIDVerifyResponse(rsp *http.Response) (*PostElastickeyElasticKeyIDVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostElastickeyElasticKeyIDVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetElastickeysResponse parses an HTTP response from a GetElastickeysWithResponse call
func ParseGetElastickeysResponse(rsp *http.Response) (*GetElastickeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetElastickeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.ElasticKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetMaterialkeysResponse parses an HTTP response from a GetMaterialkeysWithResponse call
func ParseGetMaterialkeysResponse(rsp *http.Response) (*GetMaterialkeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMaterialkeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.MaterialKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"y1gcdIOD4OHzw/8FAAD///szmRkNpAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./openapi_spec_components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
