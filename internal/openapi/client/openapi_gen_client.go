// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "cryptoutil/internal/openapi/model"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// PostElastickeyElasticKeyIDEncryptParams defines parameters for PostElastickeyElasticKeyIDEncrypt.
type PostElastickeyElasticKeyIDEncryptParams struct {
	Context *externalRef0.EncryptContext `form:"context,omitempty" json:"context,omitempty"`
}

// GetElastickeyElasticKeyIDMaterialkeysParams defines parameters for GetElastickeyElasticKeyIDMaterialkeys.
type GetElastickeyElasticKeyIDMaterialkeysParams struct {
	// MaterialKeyId Filter by the Material Key ID.
	MaterialKeyId *externalRef0.MaterialKeyQueryParamMaterialKeyIds `form:"material_key_id,omitempty" json:"material_key_id,omitempty"`

	// MinGenerateDate Filter by the Material Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.MaterialKeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Material Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.MaterialKeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `material_key_id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.MaterialKeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.MaterialKeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.MaterialKeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostElastickeyElasticKeyIDSignParams defines parameters for PostElastickeyElasticKeyIDSign.
type PostElastickeyElasticKeyIDSignParams struct {
	Context *externalRef0.SignContext `form:"context,omitempty" json:"context,omitempty"`
}

// GetElastickeysParams defines parameters for GetElastickeys.
type GetElastickeysParams struct {
	// ElasticKeyId Filter by the Elastic Key ID (UUID).
	ElasticKeyId *externalRef0.ElasticKeyQueryParamElasticKeyIds `form:"elastic_key_id,omitempty" json:"elastic_key_id,omitempty"`

	// Name Filter by the Elastic Key name.
	Name *externalRef0.ElasticKeyQueryParamNames `form:"name,omitempty" json:"name,omitempty"`

	// Provider Filter by Elastic Key provider.
	Provider *externalRef0.ElasticKeyQueryParamProviders `form:"provider,omitempty" json:"provider,omitempty"`

	// Algorithm Filter by cryptographic algorithm.
	Algorithm *externalRef0.ElasticKeyQueryParamAlgorithms `form:"algorithm,omitempty" json:"algorithm,omitempty"`

	// VersioningAllowed Filter by whether versioning is allowed.
	VersioningAllowed *externalRef0.ElasticKeyQueryParamVersioningAllowed `form:"versioning_allowed,omitempty" json:"versioning_allowed,omitempty"`

	// ImportAllowed Filter by whether import is allowed.
	ImportAllowed *externalRef0.ElasticKeyQueryParamImportAllowed `form:"import_allowed,omitempty" json:"import_allowed,omitempty"`

	// ExportAllowed Filter by whether export is allowed.
	ExportAllowed *externalRef0.ElasticKeyQueryParamExportAllowed `form:"export_allowed,omitempty" json:"export_allowed,omitempty"`

	// Status Filter by the Elastic Key status.
	Status *externalRef0.ElasticKeyQueryParamStatuses `form:"status,omitempty" json:"status,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `name:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.ElasticKeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.ElasticKeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.ElasticKeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetMaterialkeysParams defines parameters for GetMaterialkeys.
type GetMaterialkeysParams struct {
	// ElasticKeyId Filter by the Elastic Key ID (uuid).
	ElasticKeyId *externalRef0.MaterialKeyQueryParamElasticKeyIds `form:"elastic_key_id,omitempty" json:"elastic_key_id,omitempty"`

	// MaterialKeyId Filter by the Material Key ID.
	MaterialKeyId *externalRef0.MaterialKeyQueryParamMaterialKeyIds `form:"material_key_id,omitempty" json:"material_key_id,omitempty"`

	// MinGenerateDate Filter by the Material Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.MaterialKeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Material Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.MaterialKeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `material_key_id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.MaterialKeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.MaterialKeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.MaterialKeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostElastickeyJSONRequestBody defines body for PostElastickey for application/json ContentType.
type PostElastickeyJSONRequestBody = externalRef0.ElasticKeyCreate

// PostElastickeyElasticKeyIDDecryptTextRequestBody defines body for PostElastickeyElasticKeyIDDecrypt for text/plain ContentType.
type PostElastickeyElasticKeyIDDecryptTextRequestBody = externalRef0.DecryptRequest

// PostElastickeyElasticKeyIDEncryptTextRequestBody defines body for PostElastickeyElasticKeyIDEncrypt for text/plain ContentType.
type PostElastickeyElasticKeyIDEncryptTextRequestBody = externalRef0.EncryptRequest

// PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody defines body for PostElastickeyElasticKeyIDMaterialkey for application/json ContentType.
type PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody = externalRef0.MaterialKeyGenerate

// PostElastickeyElasticKeyIDSignTextRequestBody defines body for PostElastickeyElasticKeyIDSign for text/plain ContentType.
type PostElastickeyElasticKeyIDSignTextRequestBody = externalRef0.SignRequest

// PostElastickeyElasticKeyIDVerifyTextRequestBody defines body for PostElastickeyElasticKeyIDVerify for text/plain ContentType.
type PostElastickeyElasticKeyIDVerifyTextRequestBody = externalRef0.VerifyRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostElastickeyWithBody request with any body
	PostElastickeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostElastickey(ctx context.Context, body PostElastickeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetElastickeyElasticKeyID request
	GetElastickeyElasticKeyID(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostElastickeyElasticKeyIDDecryptWithBody request with any body
	PostElastickeyElasticKeyIDDecryptWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostElastickeyElasticKeyIDDecryptWithTextBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, body PostElastickeyElasticKeyIDDecryptTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostElastickeyElasticKeyIDEncryptWithBody request with any body
	PostElastickeyElasticKeyIDEncryptWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDEncryptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostElastickeyElasticKeyIDEncryptWithTextBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDEncryptParams, body PostElastickeyElasticKeyIDEncryptTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostElastickeyElasticKeyIDMaterialkeyWithBody request with any body
	PostElastickeyElasticKeyIDMaterialkeyWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostElastickeyElasticKeyIDMaterialkey(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, body PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId request
	GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, materialKeyId externalRef0.MaterialKeyId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetElastickeyElasticKeyIDMaterialkeys request
	GetElastickeyElasticKeyIDMaterialkeys(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *GetElastickeyElasticKeyIDMaterialkeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostElastickeyElasticKeyIDSignWithBody request with any body
	PostElastickeyElasticKeyIDSignWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDSignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostElastickeyElasticKeyIDSignWithTextBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDSignParams, body PostElastickeyElasticKeyIDSignTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostElastickeyElasticKeyIDVerifyWithBody request with any body
	PostElastickeyElasticKeyIDVerifyWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostElastickeyElasticKeyIDVerifyWithTextBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, body PostElastickeyElasticKeyIDVerifyTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetElastickeys request
	GetElastickeys(ctx context.Context, params *GetElastickeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMaterialkeys request
	GetMaterialkeys(ctx context.Context, params *GetMaterialkeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostElastickeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickey(ctx context.Context, body PostElastickeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElastickeyElasticKeyID(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElastickeyElasticKeyIDRequest(c.Server, elasticKeyID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDDecryptWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDDecryptRequestWithBody(c.Server, elasticKeyID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDDecryptWithTextBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, body PostElastickeyElasticKeyIDDecryptTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDDecryptRequestWithTextBody(c.Server, elasticKeyID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDEncryptWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDEncryptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDEncryptRequestWithBody(c.Server, elasticKeyID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDEncryptWithTextBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDEncryptParams, body PostElastickeyElasticKeyIDEncryptTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDEncryptRequestWithTextBody(c.Server, elasticKeyID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDMaterialkeyWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDMaterialkeyRequestWithBody(c.Server, elasticKeyID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDMaterialkey(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, body PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDMaterialkeyRequest(c.Server, elasticKeyID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, materialKeyId externalRef0.MaterialKeyId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdRequest(c.Server, elasticKeyID, materialKeyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElastickeyElasticKeyIDMaterialkeys(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *GetElastickeyElasticKeyIDMaterialkeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElastickeyElasticKeyIDMaterialkeysRequest(c.Server, elasticKeyID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDSignWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDSignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDSignRequestWithBody(c.Server, elasticKeyID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDSignWithTextBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDSignParams, body PostElastickeyElasticKeyIDSignTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDSignRequestWithTextBody(c.Server, elasticKeyID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDVerifyWithBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDVerifyRequestWithBody(c.Server, elasticKeyID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostElastickeyElasticKeyIDVerifyWithTextBody(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, body PostElastickeyElasticKeyIDVerifyTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostElastickeyElasticKeyIDVerifyRequestWithTextBody(c.Server, elasticKeyID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElastickeys(ctx context.Context, params *GetElastickeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElastickeysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMaterialkeys(ctx context.Context, params *GetMaterialkeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMaterialkeysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostElastickeyRequest calls the generic PostElastickey builder with application/json body
func NewPostElastickeyRequest(server string, body PostElastickeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostElastickeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostElastickeyRequestWithBody generates requests for PostElastickey with any type of body
func NewPostElastickeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickey")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetElastickeyElasticKeyIDRequest generates requests for GetElastickeyElasticKeyID
func NewGetElastickeyElasticKeyIDRequest(server string, elasticKeyID externalRef0.ElasticKeyId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elasticKeyID", runtime.ParamLocationPath, elasticKeyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickey/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostElastickeyElasticKeyIDDecryptRequestWithTextBody calls the generic PostElastickeyElasticKeyIDDecrypt builder with text/plain body
func NewPostElastickeyElasticKeyIDDecryptRequestWithTextBody(server string, elasticKeyID externalRef0.ElasticKeyId, body PostElastickeyElasticKeyIDDecryptTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostElastickeyElasticKeyIDDecryptRequestWithBody(server, elasticKeyID, "text/plain", bodyReader)
}

// NewPostElastickeyElasticKeyIDDecryptRequestWithBody generates requests for PostElastickeyElasticKeyIDDecrypt with any type of body
func NewPostElastickeyElasticKeyIDDecryptRequestWithBody(server string, elasticKeyID externalRef0.ElasticKeyId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elasticKeyID", runtime.ParamLocationPath, elasticKeyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickey/%s/decrypt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostElastickeyElasticKeyIDEncryptRequestWithTextBody calls the generic PostElastickeyElasticKeyIDEncrypt builder with text/plain body
func NewPostElastickeyElasticKeyIDEncryptRequestWithTextBody(server string, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDEncryptParams, body PostElastickeyElasticKeyIDEncryptTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostElastickeyElasticKeyIDEncryptRequestWithBody(server, elasticKeyID, params, "text/plain", bodyReader)
}

// NewPostElastickeyElasticKeyIDEncryptRequestWithBody generates requests for PostElastickeyElasticKeyIDEncrypt with any type of body
func NewPostElastickeyElasticKeyIDEncryptRequestWithBody(server string, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDEncryptParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elasticKeyID", runtime.ParamLocationPath, elasticKeyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickey/%s/encrypt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Context != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, *params.Context); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostElastickeyElasticKeyIDMaterialkeyRequest calls the generic PostElastickeyElasticKeyIDMaterialkey builder with application/json body
func NewPostElastickeyElasticKeyIDMaterialkeyRequest(server string, elasticKeyID externalRef0.ElasticKeyId, body PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostElastickeyElasticKeyIDMaterialkeyRequestWithBody(server, elasticKeyID, "application/json", bodyReader)
}

// NewPostElastickeyElasticKeyIDMaterialkeyRequestWithBody generates requests for PostElastickeyElasticKeyIDMaterialkey with any type of body
func NewPostElastickeyElasticKeyIDMaterialkeyRequestWithBody(server string, elasticKeyID externalRef0.ElasticKeyId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elasticKeyID", runtime.ParamLocationPath, elasticKeyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickey/%s/materialkey", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdRequest generates requests for GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId
func NewGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdRequest(server string, elasticKeyID externalRef0.ElasticKeyId, materialKeyId externalRef0.MaterialKeyId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elasticKeyID", runtime.ParamLocationPath, elasticKeyID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "material_key_id", runtime.ParamLocationPath, materialKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickey/%s/materialkey/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetElastickeyElasticKeyIDMaterialkeysRequest generates requests for GetElastickeyElasticKeyIDMaterialkeys
func NewGetElastickeyElasticKeyIDMaterialkeysRequest(server string, elasticKeyID externalRef0.ElasticKeyId, params *GetElastickeyElasticKeyIDMaterialkeysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elasticKeyID", runtime.ParamLocationPath, elasticKeyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickey/%s/materialkeys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MaterialKeyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "material_key_id", runtime.ParamLocationQuery, *params.MaterialKeyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinGenerateDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_generate_date", runtime.ParamLocationQuery, *params.MinGenerateDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxGenerateDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_generate_date", runtime.ParamLocationQuery, *params.MaxGenerateDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostElastickeyElasticKeyIDSignRequestWithTextBody calls the generic PostElastickeyElasticKeyIDSign builder with text/plain body
func NewPostElastickeyElasticKeyIDSignRequestWithTextBody(server string, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDSignParams, body PostElastickeyElasticKeyIDSignTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostElastickeyElasticKeyIDSignRequestWithBody(server, elasticKeyID, params, "text/plain", bodyReader)
}

// NewPostElastickeyElasticKeyIDSignRequestWithBody generates requests for PostElastickeyElasticKeyIDSign with any type of body
func NewPostElastickeyElasticKeyIDSignRequestWithBody(server string, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDSignParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elasticKeyID", runtime.ParamLocationPath, elasticKeyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickey/%s/sign", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Context != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, *params.Context); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostElastickeyElasticKeyIDVerifyRequestWithTextBody calls the generic PostElastickeyElasticKeyIDVerify builder with text/plain body
func NewPostElastickeyElasticKeyIDVerifyRequestWithTextBody(server string, elasticKeyID externalRef0.ElasticKeyId, body PostElastickeyElasticKeyIDVerifyTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostElastickeyElasticKeyIDVerifyRequestWithBody(server, elasticKeyID, "text/plain", bodyReader)
}

// NewPostElastickeyElasticKeyIDVerifyRequestWithBody generates requests for PostElastickeyElasticKeyIDVerify with any type of body
func NewPostElastickeyElasticKeyIDVerifyRequestWithBody(server string, elasticKeyID externalRef0.ElasticKeyId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elasticKeyID", runtime.ParamLocationPath, elasticKeyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickey/%s/verify", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetElastickeysRequest generates requests for GetElastickeys
func NewGetElastickeysRequest(server string, params *GetElastickeysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/elastickeys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ElasticKeyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "elastic_key_id", runtime.ParamLocationQuery, *params.ElasticKeyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Algorithm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "algorithm", runtime.ParamLocationQuery, *params.Algorithm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VersioningAllowed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "versioning_allowed", runtime.ParamLocationQuery, *params.VersioningAllowed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ImportAllowed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "import_allowed", runtime.ParamLocationQuery, *params.ImportAllowed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExportAllowed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export_allowed", runtime.ParamLocationQuery, *params.ExportAllowed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMaterialkeysRequest generates requests for GetMaterialkeys
func NewGetMaterialkeysRequest(server string, params *GetMaterialkeysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/materialkeys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ElasticKeyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "elastic_key_id", runtime.ParamLocationQuery, *params.ElasticKeyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaterialKeyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "material_key_id", runtime.ParamLocationQuery, *params.MaterialKeyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinGenerateDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_generate_date", runtime.ParamLocationQuery, *params.MinGenerateDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxGenerateDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_generate_date", runtime.ParamLocationQuery, *params.MaxGenerateDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostElastickeyWithBodyWithResponse request with any body
	PostElastickeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyResponse, error)

	PostElastickeyWithResponse(ctx context.Context, body PostElastickeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyResponse, error)

	// GetElastickeyElasticKeyIDWithResponse request
	GetElastickeyElasticKeyIDWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, reqEditors ...RequestEditorFn) (*GetElastickeyElasticKeyIDResponse, error)

	// PostElastickeyElasticKeyIDDecryptWithBodyWithResponse request with any body
	PostElastickeyElasticKeyIDDecryptWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDDecryptResponse, error)

	PostElastickeyElasticKeyIDDecryptWithTextBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, body PostElastickeyElasticKeyIDDecryptTextRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDDecryptResponse, error)

	// PostElastickeyElasticKeyIDEncryptWithBodyWithResponse request with any body
	PostElastickeyElasticKeyIDEncryptWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDEncryptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDEncryptResponse, error)

	PostElastickeyElasticKeyIDEncryptWithTextBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDEncryptParams, body PostElastickeyElasticKeyIDEncryptTextRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDEncryptResponse, error)

	// PostElastickeyElasticKeyIDMaterialkeyWithBodyWithResponse request with any body
	PostElastickeyElasticKeyIDMaterialkeyWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDMaterialkeyResponse, error)

	PostElastickeyElasticKeyIDMaterialkeyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, body PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDMaterialkeyResponse, error)

	// GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdWithResponse request
	GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, materialKeyId externalRef0.MaterialKeyId, reqEditors ...RequestEditorFn) (*GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse, error)

	// GetElastickeyElasticKeyIDMaterialkeysWithResponse request
	GetElastickeyElasticKeyIDMaterialkeysWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *GetElastickeyElasticKeyIDMaterialkeysParams, reqEditors ...RequestEditorFn) (*GetElastickeyElasticKeyIDMaterialkeysResponse, error)

	// PostElastickeyElasticKeyIDSignWithBodyWithResponse request with any body
	PostElastickeyElasticKeyIDSignWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDSignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDSignResponse, error)

	PostElastickeyElasticKeyIDSignWithTextBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDSignParams, body PostElastickeyElasticKeyIDSignTextRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDSignResponse, error)

	// PostElastickeyElasticKeyIDVerifyWithBodyWithResponse request with any body
	PostElastickeyElasticKeyIDVerifyWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDVerifyResponse, error)

	PostElastickeyElasticKeyIDVerifyWithTextBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, body PostElastickeyElasticKeyIDVerifyTextRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDVerifyResponse, error)

	// GetElastickeysWithResponse request
	GetElastickeysWithResponse(ctx context.Context, params *GetElastickeysParams, reqEditors ...RequestEditorFn) (*GetElastickeysResponse, error)

	// GetMaterialkeysWithResponse request
	GetMaterialkeysWithResponse(ctx context.Context, params *GetMaterialkeysParams, reqEditors ...RequestEditorFn) (*GetMaterialkeysResponse, error)
}

type PostElastickeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ElasticKey
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostElastickeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostElastickeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetElastickeyElasticKeyIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ElasticKey
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetElastickeyElasticKeyIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetElastickeyElasticKeyIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostElastickeyElasticKeyIDDecryptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostElastickeyElasticKeyIDDecryptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostElastickeyElasticKeyIDDecryptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostElastickeyElasticKeyIDEncryptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostElastickeyElasticKeyIDEncryptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostElastickeyElasticKeyIDEncryptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostElastickeyElasticKeyIDMaterialkeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.MaterialKey
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostElastickeyElasticKeyIDMaterialkeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostElastickeyElasticKeyIDMaterialkeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.MaterialKey
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetElastickeyElasticKeyIDMaterialkeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.MaterialKey
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetElastickeyElasticKeyIDMaterialkeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetElastickeyElasticKeyIDMaterialkeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostElastickeyElasticKeyIDSignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostElastickeyElasticKeyIDSignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostElastickeyElasticKeyIDSignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostElastickeyElasticKeyIDVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostElastickeyElasticKeyIDVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostElastickeyElasticKeyIDVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetElastickeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.ElasticKey
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetElastickeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetElastickeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMaterialkeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.MaterialKey
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetMaterialkeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMaterialkeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostElastickeyWithBodyWithResponse request with arbitrary body returning *PostElastickeyResponse
func (c *ClientWithResponses) PostElastickeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyResponse, error) {
	rsp, err := c.PostElastickeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyResponse(rsp)
}

func (c *ClientWithResponses) PostElastickeyWithResponse(ctx context.Context, body PostElastickeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyResponse, error) {
	rsp, err := c.PostElastickey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyResponse(rsp)
}

// GetElastickeyElasticKeyIDWithResponse request returning *GetElastickeyElasticKeyIDResponse
func (c *ClientWithResponses) GetElastickeyElasticKeyIDWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, reqEditors ...RequestEditorFn) (*GetElastickeyElasticKeyIDResponse, error) {
	rsp, err := c.GetElastickeyElasticKeyID(ctx, elasticKeyID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElastickeyElasticKeyIDResponse(rsp)
}

// PostElastickeyElasticKeyIDDecryptWithBodyWithResponse request with arbitrary body returning *PostElastickeyElasticKeyIDDecryptResponse
func (c *ClientWithResponses) PostElastickeyElasticKeyIDDecryptWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDDecryptResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDDecryptWithBody(ctx, elasticKeyID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDDecryptResponse(rsp)
}

func (c *ClientWithResponses) PostElastickeyElasticKeyIDDecryptWithTextBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, body PostElastickeyElasticKeyIDDecryptTextRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDDecryptResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDDecryptWithTextBody(ctx, elasticKeyID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDDecryptResponse(rsp)
}

// PostElastickeyElasticKeyIDEncryptWithBodyWithResponse request with arbitrary body returning *PostElastickeyElasticKeyIDEncryptResponse
func (c *ClientWithResponses) PostElastickeyElasticKeyIDEncryptWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDEncryptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDEncryptResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDEncryptWithBody(ctx, elasticKeyID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDEncryptResponse(rsp)
}

func (c *ClientWithResponses) PostElastickeyElasticKeyIDEncryptWithTextBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDEncryptParams, body PostElastickeyElasticKeyIDEncryptTextRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDEncryptResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDEncryptWithTextBody(ctx, elasticKeyID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDEncryptResponse(rsp)
}

// PostElastickeyElasticKeyIDMaterialkeyWithBodyWithResponse request with arbitrary body returning *PostElastickeyElasticKeyIDMaterialkeyResponse
func (c *ClientWithResponses) PostElastickeyElasticKeyIDMaterialkeyWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDMaterialkeyResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDMaterialkeyWithBody(ctx, elasticKeyID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDMaterialkeyResponse(rsp)
}

func (c *ClientWithResponses) PostElastickeyElasticKeyIDMaterialkeyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, body PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDMaterialkeyResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDMaterialkey(ctx, elasticKeyID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDMaterialkeyResponse(rsp)
}

// GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdWithResponse request returning *GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse
func (c *ClientWithResponses) GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, materialKeyId externalRef0.MaterialKeyId, reqEditors ...RequestEditorFn) (*GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse, error) {
	rsp, err := c.GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId(ctx, elasticKeyID, materialKeyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse(rsp)
}

// GetElastickeyElasticKeyIDMaterialkeysWithResponse request returning *GetElastickeyElasticKeyIDMaterialkeysResponse
func (c *ClientWithResponses) GetElastickeyElasticKeyIDMaterialkeysWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *GetElastickeyElasticKeyIDMaterialkeysParams, reqEditors ...RequestEditorFn) (*GetElastickeyElasticKeyIDMaterialkeysResponse, error) {
	rsp, err := c.GetElastickeyElasticKeyIDMaterialkeys(ctx, elasticKeyID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElastickeyElasticKeyIDMaterialkeysResponse(rsp)
}

// PostElastickeyElasticKeyIDSignWithBodyWithResponse request with arbitrary body returning *PostElastickeyElasticKeyIDSignResponse
func (c *ClientWithResponses) PostElastickeyElasticKeyIDSignWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDSignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDSignResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDSignWithBody(ctx, elasticKeyID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDSignResponse(rsp)
}

func (c *ClientWithResponses) PostElastickeyElasticKeyIDSignWithTextBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, params *PostElastickeyElasticKeyIDSignParams, body PostElastickeyElasticKeyIDSignTextRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDSignResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDSignWithTextBody(ctx, elasticKeyID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDSignResponse(rsp)
}

// PostElastickeyElasticKeyIDVerifyWithBodyWithResponse request with arbitrary body returning *PostElastickeyElasticKeyIDVerifyResponse
func (c *ClientWithResponses) PostElastickeyElasticKeyIDVerifyWithBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDVerifyResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDVerifyWithBody(ctx, elasticKeyID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDVerifyResponse(rsp)
}

func (c *ClientWithResponses) PostElastickeyElasticKeyIDVerifyWithTextBodyWithResponse(ctx context.Context, elasticKeyID externalRef0.ElasticKeyId, body PostElastickeyElasticKeyIDVerifyTextRequestBody, reqEditors ...RequestEditorFn) (*PostElastickeyElasticKeyIDVerifyResponse, error) {
	rsp, err := c.PostElastickeyElasticKeyIDVerifyWithTextBody(ctx, elasticKeyID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostElastickeyElasticKeyIDVerifyResponse(rsp)
}

// GetElastickeysWithResponse request returning *GetElastickeysResponse
func (c *ClientWithResponses) GetElastickeysWithResponse(ctx context.Context, params *GetElastickeysParams, reqEditors ...RequestEditorFn) (*GetElastickeysResponse, error) {
	rsp, err := c.GetElastickeys(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElastickeysResponse(rsp)
}

// GetMaterialkeysWithResponse request returning *GetMaterialkeysResponse
func (c *ClientWithResponses) GetMaterialkeysWithResponse(ctx context.Context, params *GetMaterialkeysParams, reqEditors ...RequestEditorFn) (*GetMaterialkeysResponse, error) {
	rsp, err := c.GetMaterialkeys(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMaterialkeysResponse(rsp)
}

// ParsePostElastickeyResponse parses an HTTP response from a PostElastickeyWithResponse call
func ParsePostElastickeyResponse(rsp *http.Response) (*PostElastickeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostElastickeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ElasticKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetElastickeyElasticKeyIDResponse parses an HTTP response from a GetElastickeyElasticKeyIDWithResponse call
func ParseGetElastickeyElasticKeyIDResponse(rsp *http.Response) (*GetElastickeyElasticKeyIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetElastickeyElasticKeyIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ElasticKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostElastickeyElasticKeyIDDecryptResponse parses an HTTP response from a PostElastickeyElasticKeyIDDecryptWithResponse call
func ParsePostElastickeyElasticKeyIDDecryptResponse(rsp *http.Response) (*PostElastickeyElasticKeyIDDecryptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostElastickeyElasticKeyIDDecryptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostElastickeyElasticKeyIDEncryptResponse parses an HTTP response from a PostElastickeyElasticKeyIDEncryptWithResponse call
func ParsePostElastickeyElasticKeyIDEncryptResponse(rsp *http.Response) (*PostElastickeyElasticKeyIDEncryptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostElastickeyElasticKeyIDEncryptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostElastickeyElasticKeyIDMaterialkeyResponse parses an HTTP response from a PostElastickeyElasticKeyIDMaterialkeyWithResponse call
func ParsePostElastickeyElasticKeyIDMaterialkeyResponse(rsp *http.Response) (*PostElastickeyElasticKeyIDMaterialkeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostElastickeyElasticKeyIDMaterialkeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.MaterialKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse parses an HTTP response from a GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdWithResponse call
func ParseGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse(rsp *http.Response) (*GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.MaterialKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetElastickeyElasticKeyIDMaterialkeysResponse parses an HTTP response from a GetElastickeyElasticKeyIDMaterialkeysWithResponse call
func ParseGetElastickeyElasticKeyIDMaterialkeysResponse(rsp *http.Response) (*GetElastickeyElasticKeyIDMaterialkeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetElastickeyElasticKeyIDMaterialkeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.MaterialKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostElastickeyElasticKeyIDSignResponse parses an HTTP response from a PostElastickeyElasticKeyIDSignWithResponse call
func ParsePostElastickeyElasticKeyIDSignResponse(rsp *http.Response) (*PostElastickeyElasticKeyIDSignResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostElastickeyElasticKeyIDSignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostElastickeyElasticKeyIDVerifyResponse parses an HTTP response from a PostElastickeyElasticKeyIDVerifyWithResponse call
func ParsePostElastickeyElasticKeyIDVerifyResponse(rsp *http.Response) (*PostElastickeyElasticKeyIDVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostElastickeyElasticKeyIDVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetElastickeysResponse parses an HTTP response from a GetElastickeysWithResponse call
func ParseGetElastickeysResponse(rsp *http.Response) (*GetElastickeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetElastickeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.ElasticKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetMaterialkeysResponse parses an HTTP response from a GetMaterialkeysWithResponse call
func ParseGetMaterialkeysResponse(rsp *http.Response) (*GetMaterialkeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMaterialkeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.MaterialKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"DrrBQfDw+eH/AgAA//+n+mR+DaQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./openapi_spec_components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
