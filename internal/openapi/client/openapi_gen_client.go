// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "cryptoutil/internal/openapi/model"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// PostKeypoolKeyPoolIDEncryptParams defines parameters for PostKeypoolKeyPoolIDEncrypt.
type PostKeypoolKeyPoolIDEncryptParams struct {
	Context *externalRef0.EncryptContext `form:"context,omitempty" json:"context,omitempty"`
}

// GetKeypoolKeyPoolIDKeysParams defines parameters for GetKeypoolKeyPoolIDKeys.
type GetKeypoolKeyPoolIDKeysParams struct {
	// Id Filter by the Key ID.
	Id *externalRef0.KeyQueryParamIds `form:"id,omitempty" json:"id,omitempty"`

	// MinGenerateDate Filter by the Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.KeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.KeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostKeypoolKeyPoolIDSignParams defines parameters for PostKeypoolKeyPoolIDSign.
type PostKeypoolKeyPoolIDSignParams struct {
	Context *externalRef0.SignContext `form:"context,omitempty" json:"context,omitempty"`
}

// GetKeypoolsParams defines parameters for GetKeypools.
type GetKeypoolsParams struct {
	// Id Filter by the Key Pool ID (UUID).
	Id *externalRef0.KeyPoolQueryParamIds `form:"id,omitempty" json:"id,omitempty"`

	// Name Filter by the Key Pool name.
	Name *externalRef0.KeyPoolQueryParamNames `form:"name,omitempty" json:"name,omitempty"`

	// Provider Filter by Key Pool provider.
	Provider *externalRef0.KeyPoolQueryParamProviders `form:"provider,omitempty" json:"provider,omitempty"`

	// Algorithm Filter by cryptographic algorithm.
	Algorithm *externalRef0.KeyPoolQueryParamAlgorithms `form:"algorithm,omitempty" json:"algorithm,omitempty"`

	// VersioningAllowed Filter by whether versioning is allowed.
	VersioningAllowed *externalRef0.KeyPoolQueryParamVersioningAllowed `form:"versioning_allowed,omitempty" json:"versioning_allowed,omitempty"`

	// ImportAllowed Filter by whether import is allowed.
	ImportAllowed *externalRef0.KeyPoolQueryParamImportAllowed `form:"import_allowed,omitempty" json:"import_allowed,omitempty"`

	// ExportAllowed Filter by whether export is allowed.
	ExportAllowed *externalRef0.KeyPoolQueryParamExportAllowed `form:"export_allowed,omitempty" json:"export_allowed,omitempty"`

	// Status Filter by the Key Pool status.
	Status *externalRef0.KeyPoolQueryParamStatuses `form:"status,omitempty" json:"status,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `name:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyPoolQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyPoolQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyPoolQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetKeysParams defines parameters for GetKeys.
type GetKeysParams struct {
	// Pool Filter by the Key Pool ID (uuid).
	Pool *externalRef0.KeyQueryParamKeyPoolIds `form:"pool,omitempty" json:"pool,omitempty"`

	// Id Filter by the Key ID.
	Id *externalRef0.KeyQueryParamIds `form:"id,omitempty" json:"id,omitempty"`

	// MinGenerateDate Filter by the Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.KeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.KeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostKeypoolJSONRequestBody defines body for PostKeypool for application/json ContentType.
type PostKeypoolJSONRequestBody = externalRef0.KeyPoolCreate

// PostKeypoolKeyPoolIDDecryptTextRequestBody defines body for PostKeypoolKeyPoolIDDecrypt for text/plain ContentType.
type PostKeypoolKeyPoolIDDecryptTextRequestBody = externalRef0.DecryptRequest

// PostKeypoolKeyPoolIDEncryptTextRequestBody defines body for PostKeypoolKeyPoolIDEncrypt for text/plain ContentType.
type PostKeypoolKeyPoolIDEncryptTextRequestBody = externalRef0.EncryptRequest

// PostKeypoolKeyPoolIDKeyJSONRequestBody defines body for PostKeypoolKeyPoolIDKey for application/json ContentType.
type PostKeypoolKeyPoolIDKeyJSONRequestBody = externalRef0.KeyGenerate

// PostKeypoolKeyPoolIDSignTextRequestBody defines body for PostKeypoolKeyPoolIDSign for text/plain ContentType.
type PostKeypoolKeyPoolIDSignTextRequestBody = externalRef0.SignRequest

// PostKeypoolKeyPoolIDVerifyTextRequestBody defines body for PostKeypoolKeyPoolIDVerify for text/plain ContentType.
type PostKeypoolKeyPoolIDVerifyTextRequestBody = externalRef0.VerifyRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostKeypoolWithBody request with any body
	PostKeypoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeypool(ctx context.Context, body PostKeypoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeypoolKeyPoolID request
	GetKeypoolKeyPoolID(ctx context.Context, keyPoolID externalRef0.KeyPoolId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKeypoolKeyPoolIDDecryptWithBody request with any body
	PostKeypoolKeyPoolIDDecryptWithBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeypoolKeyPoolIDDecryptWithTextBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDDecryptTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKeypoolKeyPoolIDEncryptWithBody request with any body
	PostKeypoolKeyPoolIDEncryptWithBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeypoolKeyPoolIDEncryptWithTextBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, body PostKeypoolKeyPoolIDEncryptTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKeypoolKeyPoolIDKeyWithBody request with any body
	PostKeypoolKeyPoolIDKeyWithBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeypoolKeyPoolIDKey(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeypoolKeyPoolIDKeyKeyID request
	GetKeypoolKeyPoolIDKeyKeyID(ctx context.Context, keyPoolID externalRef0.KeyPoolId, keyID externalRef0.KeyId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeypoolKeyPoolIDKeys request
	GetKeypoolKeyPoolIDKeys(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *GetKeypoolKeyPoolIDKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKeypoolKeyPoolIDSignWithBody request with any body
	PostKeypoolKeyPoolIDSignWithBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDSignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeypoolKeyPoolIDSignWithTextBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDSignParams, body PostKeypoolKeyPoolIDSignTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKeypoolKeyPoolIDVerifyWithBody request with any body
	PostKeypoolKeyPoolIDVerifyWithBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeypoolKeyPoolIDVerifyWithTextBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDVerifyTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeypools request
	GetKeypools(ctx context.Context, params *GetKeypoolsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeys request
	GetKeys(ctx context.Context, params *GetKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostKeypoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypool(ctx context.Context, body PostKeypoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeypoolKeyPoolID(ctx context.Context, keyPoolID externalRef0.KeyPoolId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeypoolKeyPoolIDRequest(c.Server, keyPoolID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypoolKeyPoolIDDecryptWithBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolKeyPoolIDDecryptRequestWithBody(c.Server, keyPoolID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypoolKeyPoolIDDecryptWithTextBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDDecryptTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolKeyPoolIDDecryptRequestWithTextBody(c.Server, keyPoolID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypoolKeyPoolIDEncryptWithBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolKeyPoolIDEncryptRequestWithBody(c.Server, keyPoolID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypoolKeyPoolIDEncryptWithTextBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, body PostKeypoolKeyPoolIDEncryptTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolKeyPoolIDEncryptRequestWithTextBody(c.Server, keyPoolID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypoolKeyPoolIDKeyWithBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolKeyPoolIDKeyRequestWithBody(c.Server, keyPoolID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypoolKeyPoolIDKey(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolKeyPoolIDKeyRequest(c.Server, keyPoolID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeypoolKeyPoolIDKeyKeyID(ctx context.Context, keyPoolID externalRef0.KeyPoolId, keyID externalRef0.KeyId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeypoolKeyPoolIDKeyKeyIDRequest(c.Server, keyPoolID, keyID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeypoolKeyPoolIDKeys(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *GetKeypoolKeyPoolIDKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeypoolKeyPoolIDKeysRequest(c.Server, keyPoolID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypoolKeyPoolIDSignWithBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDSignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolKeyPoolIDSignRequestWithBody(c.Server, keyPoolID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypoolKeyPoolIDSignWithTextBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDSignParams, body PostKeypoolKeyPoolIDSignTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolKeyPoolIDSignRequestWithTextBody(c.Server, keyPoolID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypoolKeyPoolIDVerifyWithBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolKeyPoolIDVerifyRequestWithBody(c.Server, keyPoolID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypoolKeyPoolIDVerifyWithTextBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDVerifyTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolKeyPoolIDVerifyRequestWithTextBody(c.Server, keyPoolID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeypools(ctx context.Context, params *GetKeypoolsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeypoolsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeys(ctx context.Context, params *GetKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostKeypoolRequest calls the generic PostKeypool builder with application/json body
func NewPostKeypoolRequest(server string, body PostKeypoolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKeypoolRequestWithBody(server, "application/json", bodyReader)
}

// NewPostKeypoolRequestWithBody generates requests for PostKeypool with any type of body
func NewPostKeypoolRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKeypoolKeyPoolIDRequest generates requests for GetKeypoolKeyPoolID
func NewGetKeypoolKeyPoolIDRequest(server string, keyPoolID externalRef0.KeyPoolId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyPoolID", runtime.ParamLocationPath, keyPoolID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostKeypoolKeyPoolIDDecryptRequestWithTextBody calls the generic PostKeypoolKeyPoolIDDecrypt builder with text/plain body
func NewPostKeypoolKeyPoolIDDecryptRequestWithTextBody(server string, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDDecryptTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostKeypoolKeyPoolIDDecryptRequestWithBody(server, keyPoolID, "text/plain", bodyReader)
}

// NewPostKeypoolKeyPoolIDDecryptRequestWithBody generates requests for PostKeypoolKeyPoolIDDecrypt with any type of body
func NewPostKeypoolKeyPoolIDDecryptRequestWithBody(server string, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyPoolID", runtime.ParamLocationPath, keyPoolID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool/%s/decrypt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostKeypoolKeyPoolIDEncryptRequestWithTextBody calls the generic PostKeypoolKeyPoolIDEncrypt builder with text/plain body
func NewPostKeypoolKeyPoolIDEncryptRequestWithTextBody(server string, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, body PostKeypoolKeyPoolIDEncryptTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostKeypoolKeyPoolIDEncryptRequestWithBody(server, keyPoolID, params, "text/plain", bodyReader)
}

// NewPostKeypoolKeyPoolIDEncryptRequestWithBody generates requests for PostKeypoolKeyPoolIDEncrypt with any type of body
func NewPostKeypoolKeyPoolIDEncryptRequestWithBody(server string, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyPoolID", runtime.ParamLocationPath, keyPoolID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool/%s/encrypt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Context != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, *params.Context); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostKeypoolKeyPoolIDKeyRequest calls the generic PostKeypoolKeyPoolIDKey builder with application/json body
func NewPostKeypoolKeyPoolIDKeyRequest(server string, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKeypoolKeyPoolIDKeyRequestWithBody(server, keyPoolID, "application/json", bodyReader)
}

// NewPostKeypoolKeyPoolIDKeyRequestWithBody generates requests for PostKeypoolKeyPoolIDKey with any type of body
func NewPostKeypoolKeyPoolIDKeyRequestWithBody(server string, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyPoolID", runtime.ParamLocationPath, keyPoolID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool/%s/key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKeypoolKeyPoolIDKeyKeyIDRequest generates requests for GetKeypoolKeyPoolIDKeyKeyID
func NewGetKeypoolKeyPoolIDKeyKeyIDRequest(server string, keyPoolID externalRef0.KeyPoolId, keyID externalRef0.KeyId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyPoolID", runtime.ParamLocationPath, keyPoolID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyID", runtime.ParamLocationPath, keyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool/%s/key/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKeypoolKeyPoolIDKeysRequest generates requests for GetKeypoolKeyPoolIDKeys
func NewGetKeypoolKeyPoolIDKeysRequest(server string, keyPoolID externalRef0.KeyPoolId, params *GetKeypoolKeyPoolIDKeysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyPoolID", runtime.ParamLocationPath, keyPoolID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool/%s/keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinGenerateDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_generate_date", runtime.ParamLocationQuery, *params.MinGenerateDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxGenerateDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_generate_date", runtime.ParamLocationQuery, *params.MaxGenerateDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostKeypoolKeyPoolIDSignRequestWithTextBody calls the generic PostKeypoolKeyPoolIDSign builder with text/plain body
func NewPostKeypoolKeyPoolIDSignRequestWithTextBody(server string, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDSignParams, body PostKeypoolKeyPoolIDSignTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostKeypoolKeyPoolIDSignRequestWithBody(server, keyPoolID, params, "text/plain", bodyReader)
}

// NewPostKeypoolKeyPoolIDSignRequestWithBody generates requests for PostKeypoolKeyPoolIDSign with any type of body
func NewPostKeypoolKeyPoolIDSignRequestWithBody(server string, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDSignParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyPoolID", runtime.ParamLocationPath, keyPoolID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool/%s/sign", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Context != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, *params.Context); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostKeypoolKeyPoolIDVerifyRequestWithTextBody calls the generic PostKeypoolKeyPoolIDVerify builder with text/plain body
func NewPostKeypoolKeyPoolIDVerifyRequestWithTextBody(server string, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDVerifyTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostKeypoolKeyPoolIDVerifyRequestWithBody(server, keyPoolID, "text/plain", bodyReader)
}

// NewPostKeypoolKeyPoolIDVerifyRequestWithBody generates requests for PostKeypoolKeyPoolIDVerify with any type of body
func NewPostKeypoolKeyPoolIDVerifyRequestWithBody(server string, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyPoolID", runtime.ParamLocationPath, keyPoolID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool/%s/verify", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKeypoolsRequest generates requests for GetKeypools
func NewGetKeypoolsRequest(server string, params *GetKeypoolsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypools")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Algorithm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "algorithm", runtime.ParamLocationQuery, *params.Algorithm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VersioningAllowed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "versioning_allowed", runtime.ParamLocationQuery, *params.VersioningAllowed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ImportAllowed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "import_allowed", runtime.ParamLocationQuery, *params.ImportAllowed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExportAllowed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export_allowed", runtime.ParamLocationQuery, *params.ExportAllowed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKeysRequest generates requests for GetKeys
func NewGetKeysRequest(server string, params *GetKeysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Pool != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pool", runtime.ParamLocationQuery, *params.Pool); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinGenerateDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_generate_date", runtime.ParamLocationQuery, *params.MinGenerateDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxGenerateDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_generate_date", runtime.ParamLocationQuery, *params.MaxGenerateDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostKeypoolWithBodyWithResponse request with any body
	PostKeypoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolResponse, error)

	PostKeypoolWithResponse(ctx context.Context, body PostKeypoolJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolResponse, error)

	// GetKeypoolKeyPoolIDWithResponse request
	GetKeypoolKeyPoolIDWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, reqEditors ...RequestEditorFn) (*GetKeypoolKeyPoolIDResponse, error)

	// PostKeypoolKeyPoolIDDecryptWithBodyWithResponse request with any body
	PostKeypoolKeyPoolIDDecryptWithBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDDecryptResponse, error)

	PostKeypoolKeyPoolIDDecryptWithTextBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDDecryptTextRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDDecryptResponse, error)

	// PostKeypoolKeyPoolIDEncryptWithBodyWithResponse request with any body
	PostKeypoolKeyPoolIDEncryptWithBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDEncryptResponse, error)

	PostKeypoolKeyPoolIDEncryptWithTextBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, body PostKeypoolKeyPoolIDEncryptTextRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDEncryptResponse, error)

	// PostKeypoolKeyPoolIDKeyWithBodyWithResponse request with any body
	PostKeypoolKeyPoolIDKeyWithBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDKeyResponse, error)

	PostKeypoolKeyPoolIDKeyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDKeyResponse, error)

	// GetKeypoolKeyPoolIDKeyKeyIDWithResponse request
	GetKeypoolKeyPoolIDKeyKeyIDWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, keyID externalRef0.KeyId, reqEditors ...RequestEditorFn) (*GetKeypoolKeyPoolIDKeyKeyIDResponse, error)

	// GetKeypoolKeyPoolIDKeysWithResponse request
	GetKeypoolKeyPoolIDKeysWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *GetKeypoolKeyPoolIDKeysParams, reqEditors ...RequestEditorFn) (*GetKeypoolKeyPoolIDKeysResponse, error)

	// PostKeypoolKeyPoolIDSignWithBodyWithResponse request with any body
	PostKeypoolKeyPoolIDSignWithBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDSignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDSignResponse, error)

	PostKeypoolKeyPoolIDSignWithTextBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDSignParams, body PostKeypoolKeyPoolIDSignTextRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDSignResponse, error)

	// PostKeypoolKeyPoolIDVerifyWithBodyWithResponse request with any body
	PostKeypoolKeyPoolIDVerifyWithBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDVerifyResponse, error)

	PostKeypoolKeyPoolIDVerifyWithTextBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDVerifyTextRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDVerifyResponse, error)

	// GetKeypoolsWithResponse request
	GetKeypoolsWithResponse(ctx context.Context, params *GetKeypoolsParams, reqEditors ...RequestEditorFn) (*GetKeypoolsResponse, error)

	// GetKeysWithResponse request
	GetKeysWithResponse(ctx context.Context, params *GetKeysParams, reqEditors ...RequestEditorFn) (*GetKeysResponse, error)
}

type PostKeypoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.KeyPool
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostKeypoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeypoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeypoolKeyPoolIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.KeyPool
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetKeypoolKeyPoolIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeypoolKeyPoolIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKeypoolKeyPoolIDDecryptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostKeypoolKeyPoolIDDecryptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeypoolKeyPoolIDDecryptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKeypoolKeyPoolIDEncryptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostKeypoolKeyPoolIDEncryptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeypoolKeyPoolIDEncryptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKeypoolKeyPoolIDKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Key
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostKeypoolKeyPoolIDKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeypoolKeyPoolIDKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeypoolKeyPoolIDKeyKeyIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Key
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetKeypoolKeyPoolIDKeyKeyIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeypoolKeyPoolIDKeyKeyIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeypoolKeyPoolIDKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.Key
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetKeypoolKeyPoolIDKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeypoolKeyPoolIDKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKeypoolKeyPoolIDSignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostKeypoolKeyPoolIDSignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeypoolKeyPoolIDSignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKeypoolKeyPoolIDVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostKeypoolKeyPoolIDVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeypoolKeyPoolIDVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeypoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.KeyPool
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetKeypoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeypoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.Key
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostKeypoolWithBodyWithResponse request with arbitrary body returning *PostKeypoolResponse
func (c *ClientWithResponses) PostKeypoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolResponse, error) {
	rsp, err := c.PostKeypoolWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolResponse(rsp)
}

func (c *ClientWithResponses) PostKeypoolWithResponse(ctx context.Context, body PostKeypoolJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolResponse, error) {
	rsp, err := c.PostKeypool(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolResponse(rsp)
}

// GetKeypoolKeyPoolIDWithResponse request returning *GetKeypoolKeyPoolIDResponse
func (c *ClientWithResponses) GetKeypoolKeyPoolIDWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, reqEditors ...RequestEditorFn) (*GetKeypoolKeyPoolIDResponse, error) {
	rsp, err := c.GetKeypoolKeyPoolID(ctx, keyPoolID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeypoolKeyPoolIDResponse(rsp)
}

// PostKeypoolKeyPoolIDDecryptWithBodyWithResponse request with arbitrary body returning *PostKeypoolKeyPoolIDDecryptResponse
func (c *ClientWithResponses) PostKeypoolKeyPoolIDDecryptWithBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDDecryptResponse, error) {
	rsp, err := c.PostKeypoolKeyPoolIDDecryptWithBody(ctx, keyPoolID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolKeyPoolIDDecryptResponse(rsp)
}

func (c *ClientWithResponses) PostKeypoolKeyPoolIDDecryptWithTextBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDDecryptTextRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDDecryptResponse, error) {
	rsp, err := c.PostKeypoolKeyPoolIDDecryptWithTextBody(ctx, keyPoolID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolKeyPoolIDDecryptResponse(rsp)
}

// PostKeypoolKeyPoolIDEncryptWithBodyWithResponse request with arbitrary body returning *PostKeypoolKeyPoolIDEncryptResponse
func (c *ClientWithResponses) PostKeypoolKeyPoolIDEncryptWithBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDEncryptResponse, error) {
	rsp, err := c.PostKeypoolKeyPoolIDEncryptWithBody(ctx, keyPoolID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolKeyPoolIDEncryptResponse(rsp)
}

func (c *ClientWithResponses) PostKeypoolKeyPoolIDEncryptWithTextBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, body PostKeypoolKeyPoolIDEncryptTextRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDEncryptResponse, error) {
	rsp, err := c.PostKeypoolKeyPoolIDEncryptWithTextBody(ctx, keyPoolID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolKeyPoolIDEncryptResponse(rsp)
}

// PostKeypoolKeyPoolIDKeyWithBodyWithResponse request with arbitrary body returning *PostKeypoolKeyPoolIDKeyResponse
func (c *ClientWithResponses) PostKeypoolKeyPoolIDKeyWithBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDKeyResponse, error) {
	rsp, err := c.PostKeypoolKeyPoolIDKeyWithBody(ctx, keyPoolID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolKeyPoolIDKeyResponse(rsp)
}

func (c *ClientWithResponses) PostKeypoolKeyPoolIDKeyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDKeyResponse, error) {
	rsp, err := c.PostKeypoolKeyPoolIDKey(ctx, keyPoolID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolKeyPoolIDKeyResponse(rsp)
}

// GetKeypoolKeyPoolIDKeyKeyIDWithResponse request returning *GetKeypoolKeyPoolIDKeyKeyIDResponse
func (c *ClientWithResponses) GetKeypoolKeyPoolIDKeyKeyIDWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, keyID externalRef0.KeyId, reqEditors ...RequestEditorFn) (*GetKeypoolKeyPoolIDKeyKeyIDResponse, error) {
	rsp, err := c.GetKeypoolKeyPoolIDKeyKeyID(ctx, keyPoolID, keyID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeypoolKeyPoolIDKeyKeyIDResponse(rsp)
}

// GetKeypoolKeyPoolIDKeysWithResponse request returning *GetKeypoolKeyPoolIDKeysResponse
func (c *ClientWithResponses) GetKeypoolKeyPoolIDKeysWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *GetKeypoolKeyPoolIDKeysParams, reqEditors ...RequestEditorFn) (*GetKeypoolKeyPoolIDKeysResponse, error) {
	rsp, err := c.GetKeypoolKeyPoolIDKeys(ctx, keyPoolID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeypoolKeyPoolIDKeysResponse(rsp)
}

// PostKeypoolKeyPoolIDSignWithBodyWithResponse request with arbitrary body returning *PostKeypoolKeyPoolIDSignResponse
func (c *ClientWithResponses) PostKeypoolKeyPoolIDSignWithBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDSignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDSignResponse, error) {
	rsp, err := c.PostKeypoolKeyPoolIDSignWithBody(ctx, keyPoolID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolKeyPoolIDSignResponse(rsp)
}

func (c *ClientWithResponses) PostKeypoolKeyPoolIDSignWithTextBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDSignParams, body PostKeypoolKeyPoolIDSignTextRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDSignResponse, error) {
	rsp, err := c.PostKeypoolKeyPoolIDSignWithTextBody(ctx, keyPoolID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolKeyPoolIDSignResponse(rsp)
}

// PostKeypoolKeyPoolIDVerifyWithBodyWithResponse request with arbitrary body returning *PostKeypoolKeyPoolIDVerifyResponse
func (c *ClientWithResponses) PostKeypoolKeyPoolIDVerifyWithBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDVerifyResponse, error) {
	rsp, err := c.PostKeypoolKeyPoolIDVerifyWithBody(ctx, keyPoolID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolKeyPoolIDVerifyResponse(rsp)
}

func (c *ClientWithResponses) PostKeypoolKeyPoolIDVerifyWithTextBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDVerifyTextRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDVerifyResponse, error) {
	rsp, err := c.PostKeypoolKeyPoolIDVerifyWithTextBody(ctx, keyPoolID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolKeyPoolIDVerifyResponse(rsp)
}

// GetKeypoolsWithResponse request returning *GetKeypoolsResponse
func (c *ClientWithResponses) GetKeypoolsWithResponse(ctx context.Context, params *GetKeypoolsParams, reqEditors ...RequestEditorFn) (*GetKeypoolsResponse, error) {
	rsp, err := c.GetKeypools(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeypoolsResponse(rsp)
}

// GetKeysWithResponse request returning *GetKeysResponse
func (c *ClientWithResponses) GetKeysWithResponse(ctx context.Context, params *GetKeysParams, reqEditors ...RequestEditorFn) (*GetKeysResponse, error) {
	rsp, err := c.GetKeys(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeysResponse(rsp)
}

// ParsePostKeypoolResponse parses an HTTP response from a PostKeypoolWithResponse call
func ParsePostKeypoolResponse(rsp *http.Response) (*PostKeypoolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKeypoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.KeyPool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetKeypoolKeyPoolIDResponse parses an HTTP response from a GetKeypoolKeyPoolIDWithResponse call
func ParseGetKeypoolKeyPoolIDResponse(rsp *http.Response) (*GetKeypoolKeyPoolIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeypoolKeyPoolIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.KeyPool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostKeypoolKeyPoolIDDecryptResponse parses an HTTP response from a PostKeypoolKeyPoolIDDecryptWithResponse call
func ParsePostKeypoolKeyPoolIDDecryptResponse(rsp *http.Response) (*PostKeypoolKeyPoolIDDecryptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKeypoolKeyPoolIDDecryptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostKeypoolKeyPoolIDEncryptResponse parses an HTTP response from a PostKeypoolKeyPoolIDEncryptWithResponse call
func ParsePostKeypoolKeyPoolIDEncryptResponse(rsp *http.Response) (*PostKeypoolKeyPoolIDEncryptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKeypoolKeyPoolIDEncryptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostKeypoolKeyPoolIDKeyResponse parses an HTTP response from a PostKeypoolKeyPoolIDKeyWithResponse call
func ParsePostKeypoolKeyPoolIDKeyResponse(rsp *http.Response) (*PostKeypoolKeyPoolIDKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKeypoolKeyPoolIDKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Key
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetKeypoolKeyPoolIDKeyKeyIDResponse parses an HTTP response from a GetKeypoolKeyPoolIDKeyKeyIDWithResponse call
func ParseGetKeypoolKeyPoolIDKeyKeyIDResponse(rsp *http.Response) (*GetKeypoolKeyPoolIDKeyKeyIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeypoolKeyPoolIDKeyKeyIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Key
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetKeypoolKeyPoolIDKeysResponse parses an HTTP response from a GetKeypoolKeyPoolIDKeysWithResponse call
func ParseGetKeypoolKeyPoolIDKeysResponse(rsp *http.Response) (*GetKeypoolKeyPoolIDKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeypoolKeyPoolIDKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.Key
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostKeypoolKeyPoolIDSignResponse parses an HTTP response from a PostKeypoolKeyPoolIDSignWithResponse call
func ParsePostKeypoolKeyPoolIDSignResponse(rsp *http.Response) (*PostKeypoolKeyPoolIDSignResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKeypoolKeyPoolIDSignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostKeypoolKeyPoolIDVerifyResponse parses an HTTP response from a PostKeypoolKeyPoolIDVerifyWithResponse call
func ParsePostKeypoolKeyPoolIDVerifyResponse(rsp *http.Response) (*PostKeypoolKeyPoolIDVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKeypoolKeyPoolIDVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetKeypoolsResponse parses an HTTP response from a GetKeypoolsWithResponse call
func ParseGetKeypoolsResponse(rsp *http.Response) (*GetKeypoolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeypoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.KeyPool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetKeysResponse parses an HTTP response from a GetKeysWithResponse call
func ParseGetKeysResponse(rsp *http.Response) (*GetKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.Key
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./openapi_spec_components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
