// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "cryptoutil/internal/openapi/model"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// PostKeypoolKeyPoolIDEncryptParams defines parameters for PostKeypoolKeyPoolIDEncrypt.
type PostKeypoolKeyPoolIDEncryptParams struct {
	Iv  *externalRef0.SymmetricCipherInitializationVector        `form:"iv,omitempty" json:"iv,omitempty"`
	Aad *externalRef0.SymmetricCipherAdditionalAuthenticatedData `form:"aad,omitempty" json:"aad,omitempty"`
	Alg *externalRef0.SymmetricCipherAlgorithm                   `form:"alg,omitempty" json:"alg,omitempty"`
}

// GetKeypoolKeyPoolIDKeysParams defines parameters for GetKeypoolKeyPoolIDKeys.
type GetKeypoolKeyPoolIDKeysParams struct {
	// Id Filter by the Key ID.
	Id *externalRef0.KeyQueryParamIds `form:"id,omitempty" json:"id,omitempty"`

	// MinGenerateDate Filter by the Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.KeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.KeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetKeypoolsParams defines parameters for GetKeypools.
type GetKeypoolsParams struct {
	// Id Filter by the Key Pool ID (UUID).
	Id *externalRef0.KeyPoolQueryParamIds `form:"id,omitempty" json:"id,omitempty"`

	// Name Filter by the Key Pool name.
	Name *externalRef0.KeyPoolQueryParamNames `form:"name,omitempty" json:"name,omitempty"`

	// Provider Filter by Key Pool provider.
	Provider *externalRef0.KeyPoolQueryParamProviders `form:"provider,omitempty" json:"provider,omitempty"`

	// Algorithm Filter by cryptographic algorithm.
	Algorithm *externalRef0.KeyPoolQueryParamAlgorithms `form:"algorithm,omitempty" json:"algorithm,omitempty"`

	// VersioningAllowed Filter by whether versioning is allowed.
	VersioningAllowed *externalRef0.KeyPoolQueryParamVersioningAllowed `form:"versioning_allowed,omitempty" json:"versioning_allowed,omitempty"`

	// ImportAllowed Filter by whether import is allowed.
	ImportAllowed *externalRef0.KeyPoolQueryParamImportAllowed `form:"import_allowed,omitempty" json:"import_allowed,omitempty"`

	// ExportAllowed Filter by whether export is allowed.
	ExportAllowed *externalRef0.KeyPoolQueryParamExportAllowed `form:"export_allowed,omitempty" json:"export_allowed,omitempty"`

	// Status Filter by the Key Pool status.
	Status *externalRef0.KeyPoolQueryParamStatuses `form:"status,omitempty" json:"status,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `name:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyPoolQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyPoolQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyPoolQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetKeysParams defines parameters for GetKeys.
type GetKeysParams struct {
	// Pool Filter by the Key Pool ID (uuid).
	Pool *externalRef0.KeyQueryParamKeyPoolIds `form:"pool,omitempty" json:"pool,omitempty"`

	// Id Filter by the Key ID.
	Id *externalRef0.KeyQueryParamIds `form:"id,omitempty" json:"id,omitempty"`

	// MinGenerateDate Filter by the Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.KeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.KeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostKeypoolJSONRequestBody defines body for PostKeypool for application/json ContentType.
type PostKeypoolJSONRequestBody = externalRef0.KeyPoolCreate

// PostKeypoolKeyPoolIDDecryptTextRequestBody defines body for PostKeypoolKeyPoolIDDecrypt for text/plain ContentType.
type PostKeypoolKeyPoolIDDecryptTextRequestBody = externalRef0.SymmetricDecryptRequest

// PostKeypoolKeyPoolIDEncryptTextRequestBody defines body for PostKeypoolKeyPoolIDEncrypt for text/plain ContentType.
type PostKeypoolKeyPoolIDEncryptTextRequestBody = externalRef0.SymmetricEncryptRequest

// PostKeypoolKeyPoolIDKeyJSONRequestBody defines body for PostKeypoolKeyPoolIDKey for application/json ContentType.
type PostKeypoolKeyPoolIDKeyJSONRequestBody = externalRef0.KeyGenerate

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostKeypoolWithBody request with any body
	PostKeypoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeypool(ctx context.Context, body PostKeypoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeypoolKeyPoolID request
	GetKeypoolKeyPoolID(ctx context.Context, keyPoolID externalRef0.KeyPoolId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKeypoolKeyPoolIDDecryptWithBody request with any body
	PostKeypoolKeyPoolIDDecryptWithBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeypoolKeyPoolIDDecryptWithTextBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDDecryptTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKeypoolKeyPoolIDEncryptWithBody request with any body
	PostKeypoolKeyPoolIDEncryptWithBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeypoolKeyPoolIDEncryptWithTextBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, body PostKeypoolKeyPoolIDEncryptTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKeypoolKeyPoolIDKeyWithBody request with any body
	PostKeypoolKeyPoolIDKeyWithBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeypoolKeyPoolIDKey(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeypoolKeyPoolIDKeyKeyID request
	GetKeypoolKeyPoolIDKeyKeyID(ctx context.Context, keyPoolID externalRef0.KeyPoolId, keyID externalRef0.KeyId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeypoolKeyPoolIDKeys request
	GetKeypoolKeyPoolIDKeys(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *GetKeypoolKeyPoolIDKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeypools request
	GetKeypools(ctx context.Context, params *GetKeypoolsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeys request
	GetKeys(ctx context.Context, params *GetKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostKeypoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypool(ctx context.Context, body PostKeypoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeypoolKeyPoolID(ctx context.Context, keyPoolID externalRef0.KeyPoolId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeypoolKeyPoolIDRequest(c.Server, keyPoolID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypoolKeyPoolIDDecryptWithBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolKeyPoolIDDecryptRequestWithBody(c.Server, keyPoolID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypoolKeyPoolIDDecryptWithTextBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDDecryptTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolKeyPoolIDDecryptRequestWithTextBody(c.Server, keyPoolID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypoolKeyPoolIDEncryptWithBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolKeyPoolIDEncryptRequestWithBody(c.Server, keyPoolID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypoolKeyPoolIDEncryptWithTextBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, body PostKeypoolKeyPoolIDEncryptTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolKeyPoolIDEncryptRequestWithTextBody(c.Server, keyPoolID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypoolKeyPoolIDKeyWithBody(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolKeyPoolIDKeyRequestWithBody(c.Server, keyPoolID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypoolKeyPoolIDKey(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolKeyPoolIDKeyRequest(c.Server, keyPoolID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeypoolKeyPoolIDKeyKeyID(ctx context.Context, keyPoolID externalRef0.KeyPoolId, keyID externalRef0.KeyId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeypoolKeyPoolIDKeyKeyIDRequest(c.Server, keyPoolID, keyID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeypoolKeyPoolIDKeys(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *GetKeypoolKeyPoolIDKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeypoolKeyPoolIDKeysRequest(c.Server, keyPoolID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeypools(ctx context.Context, params *GetKeypoolsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeypoolsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeys(ctx context.Context, params *GetKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostKeypoolRequest calls the generic PostKeypool builder with application/json body
func NewPostKeypoolRequest(server string, body PostKeypoolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKeypoolRequestWithBody(server, "application/json", bodyReader)
}

// NewPostKeypoolRequestWithBody generates requests for PostKeypool with any type of body
func NewPostKeypoolRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKeypoolKeyPoolIDRequest generates requests for GetKeypoolKeyPoolID
func NewGetKeypoolKeyPoolIDRequest(server string, keyPoolID externalRef0.KeyPoolId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyPoolID", runtime.ParamLocationPath, keyPoolID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostKeypoolKeyPoolIDDecryptRequestWithTextBody calls the generic PostKeypoolKeyPoolIDDecrypt builder with text/plain body
func NewPostKeypoolKeyPoolIDDecryptRequestWithTextBody(server string, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDDecryptTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostKeypoolKeyPoolIDDecryptRequestWithBody(server, keyPoolID, "text/plain", bodyReader)
}

// NewPostKeypoolKeyPoolIDDecryptRequestWithBody generates requests for PostKeypoolKeyPoolIDDecrypt with any type of body
func NewPostKeypoolKeyPoolIDDecryptRequestWithBody(server string, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyPoolID", runtime.ParamLocationPath, keyPoolID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool/%s/decrypt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostKeypoolKeyPoolIDEncryptRequestWithTextBody calls the generic PostKeypoolKeyPoolIDEncrypt builder with text/plain body
func NewPostKeypoolKeyPoolIDEncryptRequestWithTextBody(server string, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, body PostKeypoolKeyPoolIDEncryptTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostKeypoolKeyPoolIDEncryptRequestWithBody(server, keyPoolID, params, "text/plain", bodyReader)
}

// NewPostKeypoolKeyPoolIDEncryptRequestWithBody generates requests for PostKeypoolKeyPoolIDEncrypt with any type of body
func NewPostKeypoolKeyPoolIDEncryptRequestWithBody(server string, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyPoolID", runtime.ParamLocationPath, keyPoolID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool/%s/encrypt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Iv != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "iv", runtime.ParamLocationQuery, *params.Iv); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Aad != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aad", runtime.ParamLocationQuery, *params.Aad); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Alg != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "alg", runtime.ParamLocationQuery, *params.Alg); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostKeypoolKeyPoolIDKeyRequest calls the generic PostKeypoolKeyPoolIDKey builder with application/json body
func NewPostKeypoolKeyPoolIDKeyRequest(server string, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKeypoolKeyPoolIDKeyRequestWithBody(server, keyPoolID, "application/json", bodyReader)
}

// NewPostKeypoolKeyPoolIDKeyRequestWithBody generates requests for PostKeypoolKeyPoolIDKey with any type of body
func NewPostKeypoolKeyPoolIDKeyRequestWithBody(server string, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyPoolID", runtime.ParamLocationPath, keyPoolID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool/%s/key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKeypoolKeyPoolIDKeyKeyIDRequest generates requests for GetKeypoolKeyPoolIDKeyKeyID
func NewGetKeypoolKeyPoolIDKeyKeyIDRequest(server string, keyPoolID externalRef0.KeyPoolId, keyID externalRef0.KeyId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyPoolID", runtime.ParamLocationPath, keyPoolID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyID", runtime.ParamLocationPath, keyID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool/%s/key/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKeypoolKeyPoolIDKeysRequest generates requests for GetKeypoolKeyPoolIDKeys
func NewGetKeypoolKeyPoolIDKeysRequest(server string, keyPoolID externalRef0.KeyPoolId, params *GetKeypoolKeyPoolIDKeysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyPoolID", runtime.ParamLocationPath, keyPoolID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool/%s/keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinGenerateDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_generate_date", runtime.ParamLocationQuery, *params.MinGenerateDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxGenerateDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_generate_date", runtime.ParamLocationQuery, *params.MaxGenerateDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKeypoolsRequest generates requests for GetKeypools
func NewGetKeypoolsRequest(server string, params *GetKeypoolsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypools")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Provider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Algorithm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "algorithm", runtime.ParamLocationQuery, *params.Algorithm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VersioningAllowed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "versioning_allowed", runtime.ParamLocationQuery, *params.VersioningAllowed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ImportAllowed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "import_allowed", runtime.ParamLocationQuery, *params.ImportAllowed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExportAllowed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export_allowed", runtime.ParamLocationQuery, *params.ExportAllowed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKeysRequest generates requests for GetKeys
func NewGetKeysRequest(server string, params *GetKeysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Pool != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pool", runtime.ParamLocationQuery, *params.Pool); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinGenerateDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_generate_date", runtime.ParamLocationQuery, *params.MinGenerateDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxGenerateDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_generate_date", runtime.ParamLocationQuery, *params.MaxGenerateDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostKeypoolWithBodyWithResponse request with any body
	PostKeypoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolResponse, error)

	PostKeypoolWithResponse(ctx context.Context, body PostKeypoolJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolResponse, error)

	// GetKeypoolKeyPoolIDWithResponse request
	GetKeypoolKeyPoolIDWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, reqEditors ...RequestEditorFn) (*GetKeypoolKeyPoolIDResponse, error)

	// PostKeypoolKeyPoolIDDecryptWithBodyWithResponse request with any body
	PostKeypoolKeyPoolIDDecryptWithBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDDecryptResponse, error)

	PostKeypoolKeyPoolIDDecryptWithTextBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDDecryptTextRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDDecryptResponse, error)

	// PostKeypoolKeyPoolIDEncryptWithBodyWithResponse request with any body
	PostKeypoolKeyPoolIDEncryptWithBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDEncryptResponse, error)

	PostKeypoolKeyPoolIDEncryptWithTextBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, body PostKeypoolKeyPoolIDEncryptTextRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDEncryptResponse, error)

	// PostKeypoolKeyPoolIDKeyWithBodyWithResponse request with any body
	PostKeypoolKeyPoolIDKeyWithBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDKeyResponse, error)

	PostKeypoolKeyPoolIDKeyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDKeyResponse, error)

	// GetKeypoolKeyPoolIDKeyKeyIDWithResponse request
	GetKeypoolKeyPoolIDKeyKeyIDWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, keyID externalRef0.KeyId, reqEditors ...RequestEditorFn) (*GetKeypoolKeyPoolIDKeyKeyIDResponse, error)

	// GetKeypoolKeyPoolIDKeysWithResponse request
	GetKeypoolKeyPoolIDKeysWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *GetKeypoolKeyPoolIDKeysParams, reqEditors ...RequestEditorFn) (*GetKeypoolKeyPoolIDKeysResponse, error)

	// GetKeypoolsWithResponse request
	GetKeypoolsWithResponse(ctx context.Context, params *GetKeypoolsParams, reqEditors ...RequestEditorFn) (*GetKeypoolsResponse, error)

	// GetKeysWithResponse request
	GetKeysWithResponse(ctx context.Context, params *GetKeysParams, reqEditors ...RequestEditorFn) (*GetKeysResponse, error)
}

type PostKeypoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.KeyPool
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostKeypoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeypoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeypoolKeyPoolIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.KeyPool
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetKeypoolKeyPoolIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeypoolKeyPoolIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKeypoolKeyPoolIDDecryptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostKeypoolKeyPoolIDDecryptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeypoolKeyPoolIDDecryptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKeypoolKeyPoolIDEncryptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostKeypoolKeyPoolIDEncryptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeypoolKeyPoolIDEncryptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKeypoolKeyPoolIDKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Key
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostKeypoolKeyPoolIDKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeypoolKeyPoolIDKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeypoolKeyPoolIDKeyKeyIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Key
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetKeypoolKeyPoolIDKeyKeyIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeypoolKeyPoolIDKeyKeyIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeypoolKeyPoolIDKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.Key
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetKeypoolKeyPoolIDKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeypoolKeyPoolIDKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeypoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.KeyPool
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetKeypoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeypoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.Key
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostKeypoolWithBodyWithResponse request with arbitrary body returning *PostKeypoolResponse
func (c *ClientWithResponses) PostKeypoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolResponse, error) {
	rsp, err := c.PostKeypoolWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolResponse(rsp)
}

func (c *ClientWithResponses) PostKeypoolWithResponse(ctx context.Context, body PostKeypoolJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolResponse, error) {
	rsp, err := c.PostKeypool(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolResponse(rsp)
}

// GetKeypoolKeyPoolIDWithResponse request returning *GetKeypoolKeyPoolIDResponse
func (c *ClientWithResponses) GetKeypoolKeyPoolIDWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, reqEditors ...RequestEditorFn) (*GetKeypoolKeyPoolIDResponse, error) {
	rsp, err := c.GetKeypoolKeyPoolID(ctx, keyPoolID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeypoolKeyPoolIDResponse(rsp)
}

// PostKeypoolKeyPoolIDDecryptWithBodyWithResponse request with arbitrary body returning *PostKeypoolKeyPoolIDDecryptResponse
func (c *ClientWithResponses) PostKeypoolKeyPoolIDDecryptWithBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDDecryptResponse, error) {
	rsp, err := c.PostKeypoolKeyPoolIDDecryptWithBody(ctx, keyPoolID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolKeyPoolIDDecryptResponse(rsp)
}

func (c *ClientWithResponses) PostKeypoolKeyPoolIDDecryptWithTextBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDDecryptTextRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDDecryptResponse, error) {
	rsp, err := c.PostKeypoolKeyPoolIDDecryptWithTextBody(ctx, keyPoolID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolKeyPoolIDDecryptResponse(rsp)
}

// PostKeypoolKeyPoolIDEncryptWithBodyWithResponse request with arbitrary body returning *PostKeypoolKeyPoolIDEncryptResponse
func (c *ClientWithResponses) PostKeypoolKeyPoolIDEncryptWithBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDEncryptResponse, error) {
	rsp, err := c.PostKeypoolKeyPoolIDEncryptWithBody(ctx, keyPoolID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolKeyPoolIDEncryptResponse(rsp)
}

func (c *ClientWithResponses) PostKeypoolKeyPoolIDEncryptWithTextBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *PostKeypoolKeyPoolIDEncryptParams, body PostKeypoolKeyPoolIDEncryptTextRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDEncryptResponse, error) {
	rsp, err := c.PostKeypoolKeyPoolIDEncryptWithTextBody(ctx, keyPoolID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolKeyPoolIDEncryptResponse(rsp)
}

// PostKeypoolKeyPoolIDKeyWithBodyWithResponse request with arbitrary body returning *PostKeypoolKeyPoolIDKeyResponse
func (c *ClientWithResponses) PostKeypoolKeyPoolIDKeyWithBodyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDKeyResponse, error) {
	rsp, err := c.PostKeypoolKeyPoolIDKeyWithBody(ctx, keyPoolID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolKeyPoolIDKeyResponse(rsp)
}

func (c *ClientWithResponses) PostKeypoolKeyPoolIDKeyWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, body PostKeypoolKeyPoolIDKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDKeyResponse, error) {
	rsp, err := c.PostKeypoolKeyPoolIDKey(ctx, keyPoolID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolKeyPoolIDKeyResponse(rsp)
}

// GetKeypoolKeyPoolIDKeyKeyIDWithResponse request returning *GetKeypoolKeyPoolIDKeyKeyIDResponse
func (c *ClientWithResponses) GetKeypoolKeyPoolIDKeyKeyIDWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, keyID externalRef0.KeyId, reqEditors ...RequestEditorFn) (*GetKeypoolKeyPoolIDKeyKeyIDResponse, error) {
	rsp, err := c.GetKeypoolKeyPoolIDKeyKeyID(ctx, keyPoolID, keyID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeypoolKeyPoolIDKeyKeyIDResponse(rsp)
}

// GetKeypoolKeyPoolIDKeysWithResponse request returning *GetKeypoolKeyPoolIDKeysResponse
func (c *ClientWithResponses) GetKeypoolKeyPoolIDKeysWithResponse(ctx context.Context, keyPoolID externalRef0.KeyPoolId, params *GetKeypoolKeyPoolIDKeysParams, reqEditors ...RequestEditorFn) (*GetKeypoolKeyPoolIDKeysResponse, error) {
	rsp, err := c.GetKeypoolKeyPoolIDKeys(ctx, keyPoolID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeypoolKeyPoolIDKeysResponse(rsp)
}

// GetKeypoolsWithResponse request returning *GetKeypoolsResponse
func (c *ClientWithResponses) GetKeypoolsWithResponse(ctx context.Context, params *GetKeypoolsParams, reqEditors ...RequestEditorFn) (*GetKeypoolsResponse, error) {
	rsp, err := c.GetKeypools(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeypoolsResponse(rsp)
}

// GetKeysWithResponse request returning *GetKeysResponse
func (c *ClientWithResponses) GetKeysWithResponse(ctx context.Context, params *GetKeysParams, reqEditors ...RequestEditorFn) (*GetKeysResponse, error) {
	rsp, err := c.GetKeys(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeysResponse(rsp)
}

// ParsePostKeypoolResponse parses an HTTP response from a PostKeypoolWithResponse call
func ParsePostKeypoolResponse(rsp *http.Response) (*PostKeypoolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKeypoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.KeyPool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetKeypoolKeyPoolIDResponse parses an HTTP response from a GetKeypoolKeyPoolIDWithResponse call
func ParseGetKeypoolKeyPoolIDResponse(rsp *http.Response) (*GetKeypoolKeyPoolIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeypoolKeyPoolIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.KeyPool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostKeypoolKeyPoolIDDecryptResponse parses an HTTP response from a PostKeypoolKeyPoolIDDecryptWithResponse call
func ParsePostKeypoolKeyPoolIDDecryptResponse(rsp *http.Response) (*PostKeypoolKeyPoolIDDecryptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKeypoolKeyPoolIDDecryptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostKeypoolKeyPoolIDEncryptResponse parses an HTTP response from a PostKeypoolKeyPoolIDEncryptWithResponse call
func ParsePostKeypoolKeyPoolIDEncryptResponse(rsp *http.Response) (*PostKeypoolKeyPoolIDEncryptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKeypoolKeyPoolIDEncryptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostKeypoolKeyPoolIDKeyResponse parses an HTTP response from a PostKeypoolKeyPoolIDKeyWithResponse call
func ParsePostKeypoolKeyPoolIDKeyResponse(rsp *http.Response) (*PostKeypoolKeyPoolIDKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKeypoolKeyPoolIDKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Key
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetKeypoolKeyPoolIDKeyKeyIDResponse parses an HTTP response from a GetKeypoolKeyPoolIDKeyKeyIDWithResponse call
func ParseGetKeypoolKeyPoolIDKeyKeyIDResponse(rsp *http.Response) (*GetKeypoolKeyPoolIDKeyKeyIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeypoolKeyPoolIDKeyKeyIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Key
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetKeypoolKeyPoolIDKeysResponse parses an HTTP response from a GetKeypoolKeyPoolIDKeysWithResponse call
func ParseGetKeypoolKeyPoolIDKeysResponse(rsp *http.Response) (*GetKeypoolKeyPoolIDKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeypoolKeyPoolIDKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.Key
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetKeypoolsResponse parses an HTTP response from a GetKeypoolsWithResponse call
func ParseGetKeypoolsResponse(rsp *http.Response) (*GetKeypoolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeypoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.KeyPool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetKeysResponse parses an HTTP response from a GetKeysWithResponse call
func ParseGetKeysResponse(rsp *http.Response) (*GetKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.Key
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//n7dXJPR+AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./openapi_spec_components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
