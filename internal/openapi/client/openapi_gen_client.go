// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "cryptoutil/internal/openapi/model"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// GetKeypoolParams defines parameters for GetKeypool.
type GetKeypoolParams struct {
	Filter *externalRef0.QueryParamFilter `form:"filter,omitempty" json:"filter,omitempty"`
	Sort   *externalRef0.QueryParamSort   `form:"sort,omitempty" json:"sort,omitempty"`
	Page   *externalRef0.QueryParamPage   `form:"page,omitempty" json:"page,omitempty"`
}

// GetKeypoolKeyPoolIDKeyParams defines parameters for GetKeypoolKeyPoolIDKey.
type GetKeypoolKeyPoolIDKeyParams struct {
	Filter *externalRef0.QueryParamFilter `form:"filter,omitempty" json:"filter,omitempty"`
	Sort   *externalRef0.QueryParamSort   `form:"sort,omitempty" json:"sort,omitempty"`
	Page   *externalRef0.QueryParamPage   `form:"page,omitempty" json:"page,omitempty"`
}

// PostKeypoolJSONRequestBody defines body for PostKeypool for application/json ContentType.
type PostKeypoolJSONRequestBody = externalRef0.KeyPoolCreate

// PostKeypoolKeyPoolIDKeyJSONRequestBody defines body for PostKeypoolKeyPoolIDKey for application/json ContentType.
type PostKeypoolKeyPoolIDKeyJSONRequestBody = externalRef0.KeyGenerate

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetKeypool request
	GetKeypool(ctx context.Context, params *GetKeypoolParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKeypoolWithBody request with any body
	PostKeypoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeypool(ctx context.Context, body PostKeypoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeypoolKeyPoolIDKey request
	GetKeypoolKeyPoolIDKey(ctx context.Context, keyPoolID string, params *GetKeypoolKeyPoolIDKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKeypoolKeyPoolIDKeyWithBody request with any body
	PostKeypoolKeyPoolIDKeyWithBody(ctx context.Context, keyPoolID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeypoolKeyPoolIDKey(ctx context.Context, keyPoolID string, body PostKeypoolKeyPoolIDKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetKeypool(ctx context.Context, params *GetKeypoolParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeypoolRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypool(ctx context.Context, body PostKeypoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeypoolKeyPoolIDKey(ctx context.Context, keyPoolID string, params *GetKeypoolKeyPoolIDKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeypoolKeyPoolIDKeyRequest(c.Server, keyPoolID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypoolKeyPoolIDKeyWithBody(ctx context.Context, keyPoolID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolKeyPoolIDKeyRequestWithBody(c.Server, keyPoolID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeypoolKeyPoolIDKey(ctx context.Context, keyPoolID string, body PostKeypoolKeyPoolIDKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeypoolKeyPoolIDKeyRequest(c.Server, keyPoolID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetKeypoolRequest generates requests for GetKeypool
func NewGetKeypoolRequest(server string, params *GetKeypoolParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostKeypoolRequest calls the generic PostKeypool builder with application/json body
func NewPostKeypoolRequest(server string, body PostKeypoolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKeypoolRequestWithBody(server, "application/json", bodyReader)
}

// NewPostKeypoolRequestWithBody generates requests for PostKeypool with any type of body
func NewPostKeypoolRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKeypoolKeyPoolIDKeyRequest generates requests for GetKeypoolKeyPoolIDKey
func NewGetKeypoolKeyPoolIDKeyRequest(server string, keyPoolID string, params *GetKeypoolKeyPoolIDKeyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyPoolID", runtime.ParamLocationPath, keyPoolID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool/%s/key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostKeypoolKeyPoolIDKeyRequest calls the generic PostKeypoolKeyPoolIDKey builder with application/json body
func NewPostKeypoolKeyPoolIDKeyRequest(server string, keyPoolID string, body PostKeypoolKeyPoolIDKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKeypoolKeyPoolIDKeyRequestWithBody(server, keyPoolID, "application/json", bodyReader)
}

// NewPostKeypoolKeyPoolIDKeyRequestWithBody generates requests for PostKeypoolKeyPoolIDKey with any type of body
func NewPostKeypoolKeyPoolIDKeyRequestWithBody(server string, keyPoolID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyPoolID", runtime.ParamLocationPath, keyPoolID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keypool/%s/key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetKeypoolWithResponse request
	GetKeypoolWithResponse(ctx context.Context, params *GetKeypoolParams, reqEditors ...RequestEditorFn) (*GetKeypoolResponse, error)

	// PostKeypoolWithBodyWithResponse request with any body
	PostKeypoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolResponse, error)

	PostKeypoolWithResponse(ctx context.Context, body PostKeypoolJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolResponse, error)

	// GetKeypoolKeyPoolIDKeyWithResponse request
	GetKeypoolKeyPoolIDKeyWithResponse(ctx context.Context, keyPoolID string, params *GetKeypoolKeyPoolIDKeyParams, reqEditors ...RequestEditorFn) (*GetKeypoolKeyPoolIDKeyResponse, error)

	// PostKeypoolKeyPoolIDKeyWithBodyWithResponse request with any body
	PostKeypoolKeyPoolIDKeyWithBodyWithResponse(ctx context.Context, keyPoolID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDKeyResponse, error)

	PostKeypoolKeyPoolIDKeyWithResponse(ctx context.Context, keyPoolID string, body PostKeypoolKeyPoolIDKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDKeyResponse, error)
}

type GetKeypoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.KeyPool
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetKeypoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeypoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKeypoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.KeyPool
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostKeypoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeypoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeypoolKeyPoolIDKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.Key
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r GetKeypoolKeyPoolIDKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeypoolKeyPoolIDKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKeypoolKeyPoolIDKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Key
	JSON400      *externalRef0.HTTP400BadRequest
	JSON401      *externalRef0.HTTP401Unauthorized
	JSON403      *externalRef0.HTTP403Forbidden
	JSON404      *externalRef0.HTTP404NotFound
	JSON429      *externalRef0.HTTP429TooManyRequests
	JSON500      *externalRef0.HTTP500InternalServerError
	JSON502      *externalRef0.HTTP502BadGateway
	JSON503      *externalRef0.HTTP503ServiceUnavailable
	JSON504      *externalRef0.HTTP504GatewayTimeout
}

// Status returns HTTPResponse.Status
func (r PostKeypoolKeyPoolIDKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeypoolKeyPoolIDKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetKeypoolWithResponse request returning *GetKeypoolResponse
func (c *ClientWithResponses) GetKeypoolWithResponse(ctx context.Context, params *GetKeypoolParams, reqEditors ...RequestEditorFn) (*GetKeypoolResponse, error) {
	rsp, err := c.GetKeypool(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeypoolResponse(rsp)
}

// PostKeypoolWithBodyWithResponse request with arbitrary body returning *PostKeypoolResponse
func (c *ClientWithResponses) PostKeypoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolResponse, error) {
	rsp, err := c.PostKeypoolWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolResponse(rsp)
}

func (c *ClientWithResponses) PostKeypoolWithResponse(ctx context.Context, body PostKeypoolJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolResponse, error) {
	rsp, err := c.PostKeypool(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolResponse(rsp)
}

// GetKeypoolKeyPoolIDKeyWithResponse request returning *GetKeypoolKeyPoolIDKeyResponse
func (c *ClientWithResponses) GetKeypoolKeyPoolIDKeyWithResponse(ctx context.Context, keyPoolID string, params *GetKeypoolKeyPoolIDKeyParams, reqEditors ...RequestEditorFn) (*GetKeypoolKeyPoolIDKeyResponse, error) {
	rsp, err := c.GetKeypoolKeyPoolIDKey(ctx, keyPoolID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeypoolKeyPoolIDKeyResponse(rsp)
}

// PostKeypoolKeyPoolIDKeyWithBodyWithResponse request with arbitrary body returning *PostKeypoolKeyPoolIDKeyResponse
func (c *ClientWithResponses) PostKeypoolKeyPoolIDKeyWithBodyWithResponse(ctx context.Context, keyPoolID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDKeyResponse, error) {
	rsp, err := c.PostKeypoolKeyPoolIDKeyWithBody(ctx, keyPoolID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolKeyPoolIDKeyResponse(rsp)
}

func (c *ClientWithResponses) PostKeypoolKeyPoolIDKeyWithResponse(ctx context.Context, keyPoolID string, body PostKeypoolKeyPoolIDKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeypoolKeyPoolIDKeyResponse, error) {
	rsp, err := c.PostKeypoolKeyPoolIDKey(ctx, keyPoolID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeypoolKeyPoolIDKeyResponse(rsp)
}

// ParseGetKeypoolResponse parses an HTTP response from a GetKeypoolWithResponse call
func ParseGetKeypoolResponse(rsp *http.Response) (*GetKeypoolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeypoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.KeyPool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostKeypoolResponse parses an HTTP response from a PostKeypoolWithResponse call
func ParsePostKeypoolResponse(rsp *http.Response) (*PostKeypoolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKeypoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.KeyPool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetKeypoolKeyPoolIDKeyResponse parses an HTTP response from a GetKeypoolKeyPoolIDKeyWithResponse call
func ParseGetKeypoolKeyPoolIDKeyResponse(rsp *http.Response) (*GetKeypoolKeyPoolIDKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeypoolKeyPoolIDKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.Key
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParsePostKeypoolKeyPoolIDKeyResponse parses an HTTP response from a PostKeypoolKeyPoolIDKeyWithResponse call
func ParsePostKeypoolKeyPoolIDKeyResponse(rsp *http.Response) (*PostKeypoolKeyPoolIDKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKeypoolKeyPoolIDKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Key
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.HTTP400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.HTTP401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.HTTP403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.HTTP404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.HTTP429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.HTTP500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest externalRef0.HTTP502BadGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.HTTP503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.HTTP504GatewayTimeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./openapi_spec_components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
