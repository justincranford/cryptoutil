// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1-0.20250618140738-aae687ce8fe9 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "cryptoutil/internal/openapi/model"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// PostElastickeyElasticKeyIDEncryptParams defines parameters for PostElastickeyElasticKeyIDEncrypt.
type PostElastickeyElasticKeyIDEncryptParams struct {
	Context *externalRef0.EncryptContext `form:"context,omitempty" json:"context,omitempty"`
}

// GetElastickeyElasticKeyIDMaterialkeysParams defines parameters for GetElastickeyElasticKeyIDMaterialkeys.
type GetElastickeyElasticKeyIDMaterialkeysParams struct {
	// MaterialKeyID Filter by the Material Key ID.
	MaterialKeyID *externalRef0.MaterialKeyQueryParamMaterialKeyIDS `form:"material_key_id,omitempty" json:"material_key_id,omitempty"`

	// MinGenerateDate Filter by the Material Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.MaterialKeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Material Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.MaterialKeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `material_key_id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.MaterialKeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.MaterialKeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.MaterialKeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostElastickeyElasticKeyIDSignParams defines parameters for PostElastickeyElasticKeyIDSign.
type PostElastickeyElasticKeyIDSignParams struct {
	Context *externalRef0.SignContext `form:"context,omitempty" json:"context,omitempty"`
}

// GetElastickeysParams defines parameters for GetElastickeys.
type GetElastickeysParams struct {
	// ElasticKeyID Filter by the Elastic Key ID (UUID).
	ElasticKeyID *externalRef0.ElasticKeyQueryParamElasticKeyIDS `form:"elastic_key_id,omitempty" json:"elastic_key_id,omitempty"`

	// Name Filter by the Elastic Key name.
	Name *externalRef0.ElasticKeyQueryParamNames `form:"name,omitempty" json:"name,omitempty"`

	// Provider Filter by Elastic Key provider.
	Provider *externalRef0.ElasticKeyQueryParamProviders `form:"provider,omitempty" json:"provider,omitempty"`

	// Algorithm Filter by Elastic Key algorithm.
	Algorithm *externalRef0.ElasticKeyQueryParamAlgorithms `form:"algorithm,omitempty" json:"algorithm,omitempty"`

	// VersioningAllowed Filter by whether versioning is allowed.
	VersioningAllowed *externalRef0.ElasticKeyQueryParamVersioningAllowed `form:"versioning_allowed,omitempty" json:"versioning_allowed,omitempty"`

	// ImportAllowed Filter by whether import is allowed.
	ImportAllowed *externalRef0.ElasticKeyQueryParamImportAllowed `form:"import_allowed,omitempty" json:"import_allowed,omitempty"`

	// ExportAllowed Filter by whether export is allowed.
	ExportAllowed *externalRef0.ElasticKeyQueryParamExportAllowed `form:"export_allowed,omitempty" json:"export_allowed,omitempty"`

	// Status Filter by the Elastic Key status.
	Status *externalRef0.ElasticKeyQueryParamStatuses `form:"status,omitempty" json:"status,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `name:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.ElasticKeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.ElasticKeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.ElasticKeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetMaterialkeysParams defines parameters for GetMaterialkeys.
type GetMaterialkeysParams struct {
	// ElasticKeyID Filter by the Elastic Key ID (uuid).
	ElasticKeyID *externalRef0.MaterialKeyQueryParamElasticKeyIDS `form:"elastic_key_id,omitempty" json:"elastic_key_id,omitempty"`

	// MaterialKeyID Filter by the Material Key ID.
	MaterialKeyID *externalRef0.MaterialKeyQueryParamMaterialKeyIDS `form:"material_key_id,omitempty" json:"material_key_id,omitempty"`

	// MinGenerateDate Filter by the Material Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.MaterialKeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Material Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.MaterialKeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `material_key_id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.MaterialKeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.MaterialKeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.MaterialKeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostElastickeyJSONRequestBody defines body for PostElastickey for application/json ContentType.
type PostElastickeyJSONRequestBody = externalRef0.ElasticKeyCreate

// PostElastickeyElasticKeyIDDecryptTextRequestBody defines body for PostElastickeyElasticKeyIDDecrypt for text/plain ContentType.
type PostElastickeyElasticKeyIDDecryptTextRequestBody = externalRef0.DecryptRequest

// PostElastickeyElasticKeyIDEncryptTextRequestBody defines body for PostElastickeyElasticKeyIDEncrypt for text/plain ContentType.
type PostElastickeyElasticKeyIDEncryptTextRequestBody = externalRef0.EncryptRequest

// PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody defines body for PostElastickeyElasticKeyIDMaterialkey for application/json ContentType.
type PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody = externalRef0.MaterialKeyGenerate

// PostElastickeyElasticKeyIDSignTextRequestBody defines body for PostElastickeyElasticKeyIDSign for text/plain ContentType.
type PostElastickeyElasticKeyIDSignTextRequestBody = externalRef0.SignRequest

// PostElastickeyElasticKeyIDVerifyTextRequestBody defines body for PostElastickeyElasticKeyIDVerify for text/plain ContentType.
type PostElastickeyElasticKeyIDVerifyTextRequestBody = externalRef0.VerifyRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new Elastic Key.
	// (POST /elastickey)
	PostElastickey(c *fiber.Ctx) error
	// Get an Elastic Key.
	// (GET /elastickey/{elasticKeyID})
	GetElastickeyElasticKeyID(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error
	// Decrypt JWE message using a specific Materia Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWE message kid header.
	// (POST /elastickey/{elasticKeyID}/decrypt)
	PostElastickeyElasticKeyIDDecrypt(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error
	// Encrypt clear text data using latest Material Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWE message kid header.
	// (POST /elastickey/{elasticKeyID}/encrypt)
	PostElastickeyElasticKeyIDEncrypt(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params PostElastickeyElasticKeyIDEncryptParams) error
	// Generate a new Material Key in an Elastic Key.
	// (POST /elastickey/{elasticKeyID}/materialkey)
	PostElastickeyElasticKeyIDMaterialkey(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error
	// Get Material Key in Elastic Key.
	// (GET /elastickey/{elasticKeyID}/materialkey/{material_key_id})
	GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, materialKeyID externalRef0.MaterialKeyID) error
	// Find Material Keys in Elastic Key. Supports optional filtering, sorting, and paging.
	// (GET /elastickey/{elasticKeyID}/materialkeys)
	GetElastickeyElasticKeyIDMaterialkeys(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params GetElastickeyElasticKeyIDMaterialkeysParams) error
	// Sign clear text using latest Material Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWS message kid header.
	// (POST /elastickey/{elasticKeyID}/sign)
	PostElastickeyElasticKeyIDSign(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params PostElastickeyElasticKeyIDSignParams) error
	// Verify JWS message using a specific Material Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWS message kid header.
	// (POST /elastickey/{elasticKeyID}/verify)
	PostElastickeyElasticKeyIDVerify(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error
	// Find Elastic Keys. Supports optional filtering, sorting, and paging.
	// (GET /elastickeys)
	GetElastickeys(c *fiber.Ctx, params GetElastickeysParams) error
	// Find Material Keys. Supports optional filtering, sorting, and paging.
	// (GET /materialkeys)
	GetMaterialkeys(c *fiber.Ctx, params GetMaterialkeysParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// PostElastickey operation middleware
func (siw *ServerInterfaceWrapper) PostElastickey(c *fiber.Ctx) error {

	return siw.Handler.PostElastickey(c)
}

// GetElastickeyElasticKeyID operation middleware
func (siw *ServerInterfaceWrapper) GetElastickeyElasticKeyID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	return siw.Handler.GetElastickeyElasticKeyID(c, elasticKeyID)
}

// PostElastickeyElasticKeyIDDecrypt operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDDecrypt(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDDecrypt(c, elasticKeyID)
}

// PostElastickeyElasticKeyIDEncrypt operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDEncrypt(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostElastickeyElasticKeyIDEncryptParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "context" -------------

	err = runtime.BindQueryParameter("form", true, false, "context", query, &params.Context)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter context: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDEncrypt(c, elasticKeyID, params)
}

// PostElastickeyElasticKeyIDMaterialkey operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDMaterialkey(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDMaterialkey(c, elasticKeyID)
}

// GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID operation middleware
func (siw *ServerInterfaceWrapper) GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	// ------------- Path parameter "material_key_id" -------------
	var materialKeyID externalRef0.MaterialKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "material_key_id", c.Params("material_key_id"), &materialKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter material_key_id: %w", err).Error())
	}

	return siw.Handler.GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(c, elasticKeyID, materialKeyID)
}

// GetElastickeyElasticKeyIDMaterialkeys operation middleware
func (siw *ServerInterfaceWrapper) GetElastickeyElasticKeyIDMaterialkeys(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetElastickeyElasticKeyIDMaterialkeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "material_key_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "material_key_id", query, &params.MaterialKeyID)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter material_key_id: %w", err).Error())
	}

	// ------------- Optional query parameter "min_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_generate_date", query, &params.MinGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter min_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "max_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_generate_date", query, &params.MaxGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter max_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetElastickeyElasticKeyIDMaterialkeys(c, elasticKeyID, params)
}

// PostElastickeyElasticKeyIDSign operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDSign(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostElastickeyElasticKeyIDSignParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "context" -------------

	err = runtime.BindQueryParameter("form", true, false, "context", query, &params.Context)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter context: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDSign(c, elasticKeyID, params)
}

// PostElastickeyElasticKeyIDVerify operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDVerify(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDVerify(c, elasticKeyID)
}

// GetElastickeys operation middleware
func (siw *ServerInterfaceWrapper) GetElastickeys(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetElastickeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "elastic_key_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "elastic_key_id", query, &params.ElasticKeyID)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elastic_key_id: %w", err).Error())
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", query, &params.Provider)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter provider: %w", err).Error())
	}

	// ------------- Optional query parameter "algorithm" -------------

	err = runtime.BindQueryParameter("form", true, false, "algorithm", query, &params.Algorithm)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter algorithm: %w", err).Error())
	}

	// ------------- Optional query parameter "versioning_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "versioning_allowed", query, &params.VersioningAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter versioning_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "import_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "import_allowed", query, &params.ImportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter import_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "export_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "export_allowed", query, &params.ExportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter export_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", query, &params.Status)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter status: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetElastickeys(c, params)
}

// GetMaterialkeys operation middleware
func (siw *ServerInterfaceWrapper) GetMaterialkeys(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMaterialkeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "elastic_key_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "elastic_key_id", query, &params.ElasticKeyID)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elastic_key_id: %w", err).Error())
	}

	// ------------- Optional query parameter "material_key_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "material_key_id", query, &params.MaterialKeyID)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter material_key_id: %w", err).Error())
	}

	// ------------- Optional query parameter "min_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_generate_date", query, &params.MinGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter min_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "max_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_generate_date", query, &params.MaxGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter max_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetMaterialkeys(c, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/elastickey", wrapper.PostElastickey)

	router.Get(options.BaseURL+"/elastickey/:elasticKeyID", wrapper.GetElastickeyElasticKeyID)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/decrypt", wrapper.PostElastickeyElasticKeyIDDecrypt)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/encrypt", wrapper.PostElastickeyElasticKeyIDEncrypt)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/materialkey", wrapper.PostElastickeyElasticKeyIDMaterialkey)

	router.Get(options.BaseURL+"/elastickey/:elasticKeyID/materialkey/:material_key_id", wrapper.GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID)

	router.Get(options.BaseURL+"/elastickey/:elasticKeyID/materialkeys", wrapper.GetElastickeyElasticKeyIDMaterialkeys)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/sign", wrapper.PostElastickeyElasticKeyIDSign)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/verify", wrapper.PostElastickeyElasticKeyIDVerify)

	router.Get(options.BaseURL+"/elastickeys", wrapper.GetElastickeys)

	router.Get(options.BaseURL+"/materialkeys", wrapper.GetMaterialkeys)

}

type PostElastickeyRequestObject struct {
	Body *PostElastickeyJSONRequestBody
}

type PostElastickeyResponseObject interface {
	VisitPostElastickeyResponse(ctx *fiber.Ctx) error
}

type PostElastickey200JSONResponse externalRef0.ElasticKey

func (response PostElastickey200JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostElastickey400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickey400JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickey401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickey401JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickey403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickey403JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickey404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickey404JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickey429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickey429JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickey500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickey500JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickey502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickey502JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickey503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickey503JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickey504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickey504JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
}

type GetElastickeyElasticKeyIDResponseObject interface {
	VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error
}

type GetElastickeyElasticKeyID200JSONResponse externalRef0.ElasticKey

func (response GetElastickeyElasticKeyID200JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetElastickeyElasticKeyID400JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetElastickeyElasticKeyID401JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetElastickeyElasticKeyID403JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetElastickeyElasticKeyID404JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetElastickeyElasticKeyID429JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetElastickeyElasticKeyID500JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetElastickeyElasticKeyID502JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetElastickeyElasticKeyID503JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetElastickeyElasticKeyID504JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecryptRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
	Body         *PostElastickeyElasticKeyIDDecryptTextRequestBody
}

type PostElastickeyElasticKeyIDDecryptResponseObject interface {
	VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDDecrypt200TextResponse externalRef0.DecryptResponse

func (response PostElastickeyElasticKeyIDDecrypt200TextResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostElastickeyElasticKeyIDDecrypt400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDDecrypt400JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDDecrypt401JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDDecrypt403JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDDecrypt404JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDDecrypt429JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDDecrypt500JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDDecrypt502JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDDecrypt503JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDDecrypt504JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncryptRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
	Params       PostElastickeyElasticKeyIDEncryptParams
	Body         *PostElastickeyElasticKeyIDEncryptTextRequestBody
}

type PostElastickeyElasticKeyIDEncryptResponseObject interface {
	VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDEncrypt200TextResponse externalRef0.EncryptResponse

func (response PostElastickeyElasticKeyIDEncrypt200TextResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostElastickeyElasticKeyIDEncrypt400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDEncrypt400JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDEncrypt401JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDEncrypt403JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDEncrypt404JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDEncrypt429JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDEncrypt500JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDEncrypt502JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDEncrypt503JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDEncrypt504JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkeyRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
	Body         *PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody
}

type PostElastickeyElasticKeyIDMaterialkeyResponseObject interface {
	VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDMaterialkey200JSONResponse externalRef0.MaterialKey

func (response PostElastickeyElasticKeyIDMaterialkey200JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDMaterialkey400JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDMaterialkey401JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDMaterialkey403JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDMaterialkey404JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDMaterialkey429JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDMaterialkey500JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDMaterialkey502JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDMaterialkey503JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDMaterialkey504JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDRequestObject struct {
	ElasticKeyID  externalRef0.ElasticKeyID  `json:"elasticKeyID"`
	MaterialKeyID externalRef0.MaterialKeyID `json:"material_key_id"`
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponseObject interface {
	VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID200JSONResponse externalRef0.MaterialKey

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID200JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID400JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID401JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID403JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID404JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID429JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID500JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID502JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID503JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID504JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeysRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
	Params       GetElastickeyElasticKeyIDMaterialkeysParams
}

type GetElastickeyElasticKeyIDMaterialkeysResponseObject interface {
	VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error
}

type GetElastickeyElasticKeyIDMaterialkeys200JSONResponse []externalRef0.MaterialKey

func (response GetElastickeyElasticKeyIDMaterialkeys200JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetElastickeyElasticKeyIDMaterialkeys400JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetElastickeyElasticKeyIDMaterialkeys401JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetElastickeyElasticKeyIDMaterialkeys403JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetElastickeyElasticKeyIDMaterialkeys404JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetElastickeyElasticKeyIDMaterialkeys429JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetElastickeyElasticKeyIDMaterialkeys500JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetElastickeyElasticKeyIDMaterialkeys502JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetElastickeyElasticKeyIDMaterialkeys503JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetElastickeyElasticKeyIDMaterialkeys504JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSignRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
	Params       PostElastickeyElasticKeyIDSignParams
	Body         *PostElastickeyElasticKeyIDSignTextRequestBody
}

type PostElastickeyElasticKeyIDSignResponseObject interface {
	VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDSign200TextResponse externalRef0.SignResponse

func (response PostElastickeyElasticKeyIDSign200TextResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostElastickeyElasticKeyIDSign400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDSign400JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDSign401JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDSign403JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDSign404JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDSign429JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDSign500JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDSign502JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDSign503JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDSign504JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerifyRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
	Body         *PostElastickeyElasticKeyIDVerifyTextRequestBody
}

type PostElastickeyElasticKeyIDVerifyResponseObject interface {
	VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDVerify204Response struct {
}

func (response PostElastickeyElasticKeyIDVerify204Response) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type PostElastickeyElasticKeyIDVerify400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDVerify400JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDVerify401JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDVerify403JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDVerify404JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDVerify429JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDVerify500JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDVerify502JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDVerify503JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDVerify504JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetElastickeysRequestObject struct {
	Params GetElastickeysParams
}

type GetElastickeysResponseObject interface {
	VisitGetElastickeysResponse(ctx *fiber.Ctx) error
}

type GetElastickeys200JSONResponse []externalRef0.ElasticKey

func (response GetElastickeys200JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetElastickeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetElastickeys400JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetElastickeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetElastickeys401JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetElastickeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetElastickeys403JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetElastickeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetElastickeys404JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetElastickeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetElastickeys429JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetElastickeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetElastickeys500JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetElastickeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetElastickeys502JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetElastickeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetElastickeys503JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetElastickeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetElastickeys504JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetMaterialkeysRequestObject struct {
	Params GetMaterialkeysParams
}

type GetMaterialkeysResponseObject interface {
	VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error
}

type GetMaterialkeys200JSONResponse []externalRef0.MaterialKey

func (response GetMaterialkeys200JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetMaterialkeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetMaterialkeys400JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetMaterialkeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetMaterialkeys401JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetMaterialkeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetMaterialkeys403JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetMaterialkeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetMaterialkeys404JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetMaterialkeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetMaterialkeys429JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetMaterialkeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetMaterialkeys500JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetMaterialkeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetMaterialkeys502JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetMaterialkeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetMaterialkeys503JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetMaterialkeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetMaterialkeys504JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a new Elastic Key.
	// (POST /elastickey)
	PostElastickey(ctx context.Context, request PostElastickeyRequestObject) (PostElastickeyResponseObject, error)
	// Get an Elastic Key.
	// (GET /elastickey/{elasticKeyID})
	GetElastickeyElasticKeyID(ctx context.Context, request GetElastickeyElasticKeyIDRequestObject) (GetElastickeyElasticKeyIDResponseObject, error)
	// Decrypt JWE message using a specific Materia Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWE message kid header.
	// (POST /elastickey/{elasticKeyID}/decrypt)
	PostElastickeyElasticKeyIDDecrypt(ctx context.Context, request PostElastickeyElasticKeyIDDecryptRequestObject) (PostElastickeyElasticKeyIDDecryptResponseObject, error)
	// Encrypt clear text data using latest Material Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWE message kid header.
	// (POST /elastickey/{elasticKeyID}/encrypt)
	PostElastickeyElasticKeyIDEncrypt(ctx context.Context, request PostElastickeyElasticKeyIDEncryptRequestObject) (PostElastickeyElasticKeyIDEncryptResponseObject, error)
	// Generate a new Material Key in an Elastic Key.
	// (POST /elastickey/{elasticKeyID}/materialkey)
	PostElastickeyElasticKeyIDMaterialkey(ctx context.Context, request PostElastickeyElasticKeyIDMaterialkeyRequestObject) (PostElastickeyElasticKeyIDMaterialkeyResponseObject, error)
	// Get Material Key in Elastic Key.
	// (GET /elastickey/{elasticKeyID}/materialkey/{material_key_id})
	GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(ctx context.Context, request GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDRequestObject) (GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponseObject, error)
	// Find Material Keys in Elastic Key. Supports optional filtering, sorting, and paging.
	// (GET /elastickey/{elasticKeyID}/materialkeys)
	GetElastickeyElasticKeyIDMaterialkeys(ctx context.Context, request GetElastickeyElasticKeyIDMaterialkeysRequestObject) (GetElastickeyElasticKeyIDMaterialkeysResponseObject, error)
	// Sign clear text using latest Material Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWS message kid header.
	// (POST /elastickey/{elasticKeyID}/sign)
	PostElastickeyElasticKeyIDSign(ctx context.Context, request PostElastickeyElasticKeyIDSignRequestObject) (PostElastickeyElasticKeyIDSignResponseObject, error)
	// Verify JWS message using a specific Material Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWS message kid header.
	// (POST /elastickey/{elasticKeyID}/verify)
	PostElastickeyElasticKeyIDVerify(ctx context.Context, request PostElastickeyElasticKeyIDVerifyRequestObject) (PostElastickeyElasticKeyIDVerifyResponseObject, error)
	// Find Elastic Keys. Supports optional filtering, sorting, and paging.
	// (GET /elastickeys)
	GetElastickeys(ctx context.Context, request GetElastickeysRequestObject) (GetElastickeysResponseObject, error)
	// Find Material Keys. Supports optional filtering, sorting, and paging.
	// (GET /materialkeys)
	GetMaterialkeys(ctx context.Context, request GetMaterialkeysRequestObject) (GetMaterialkeysResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostElastickey operation middleware
func (sh *strictHandler) PostElastickey(ctx *fiber.Ctx) error {
	var request PostElastickeyRequestObject

	var body PostElastickeyJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickey(ctx.UserContext(), request.(PostElastickeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyResponseObject); ok {
		if err := validResponse.VisitPostElastickeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetElastickeyElasticKeyID operation middleware
func (sh *strictHandler) GetElastickeyElasticKeyID(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error {
	var request GetElastickeyElasticKeyIDRequestObject

	request.ElasticKeyID = elasticKeyID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetElastickeyElasticKeyID(ctx.UserContext(), request.(GetElastickeyElasticKeyIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetElastickeyElasticKeyID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetElastickeyElasticKeyIDResponseObject); ok {
		if err := validResponse.VisitGetElastickeyElasticKeyIDResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDDecrypt operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDDecrypt(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error {
	var request PostElastickeyElasticKeyIDDecryptRequestObject

	request.ElasticKeyID = elasticKeyID

	data := ctx.Request().Body()
	body := PostElastickeyElasticKeyIDDecryptTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDDecrypt(ctx.UserContext(), request.(PostElastickeyElasticKeyIDDecryptRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDDecrypt")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDDecryptResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDDecryptResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDEncrypt operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDEncrypt(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params PostElastickeyElasticKeyIDEncryptParams) error {
	var request PostElastickeyElasticKeyIDEncryptRequestObject

	request.ElasticKeyID = elasticKeyID
	request.Params = params

	data := ctx.Request().Body()
	body := PostElastickeyElasticKeyIDEncryptTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDEncrypt(ctx.UserContext(), request.(PostElastickeyElasticKeyIDEncryptRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDEncrypt")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDEncryptResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDEncryptResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDMaterialkey operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDMaterialkey(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error {
	var request PostElastickeyElasticKeyIDMaterialkeyRequestObject

	request.ElasticKeyID = elasticKeyID

	var body PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDMaterialkey(ctx.UserContext(), request.(PostElastickeyElasticKeyIDMaterialkeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDMaterialkey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDMaterialkeyResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID operation middleware
func (sh *strictHandler) GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, materialKeyID externalRef0.MaterialKeyID) error {
	var request GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDRequestObject

	request.ElasticKeyID = elasticKeyID
	request.MaterialKeyID = materialKeyID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(ctx.UserContext(), request.(GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponseObject); ok {
		if err := validResponse.VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetElastickeyElasticKeyIDMaterialkeys operation middleware
func (sh *strictHandler) GetElastickeyElasticKeyIDMaterialkeys(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params GetElastickeyElasticKeyIDMaterialkeysParams) error {
	var request GetElastickeyElasticKeyIDMaterialkeysRequestObject

	request.ElasticKeyID = elasticKeyID
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetElastickeyElasticKeyIDMaterialkeys(ctx.UserContext(), request.(GetElastickeyElasticKeyIDMaterialkeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetElastickeyElasticKeyIDMaterialkeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetElastickeyElasticKeyIDMaterialkeysResponseObject); ok {
		if err := validResponse.VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDSign operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDSign(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params PostElastickeyElasticKeyIDSignParams) error {
	var request PostElastickeyElasticKeyIDSignRequestObject

	request.ElasticKeyID = elasticKeyID
	request.Params = params

	data := ctx.Request().Body()
	body := PostElastickeyElasticKeyIDSignTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDSign(ctx.UserContext(), request.(PostElastickeyElasticKeyIDSignRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDSign")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDSignResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDSignResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDVerify operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDVerify(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error {
	var request PostElastickeyElasticKeyIDVerifyRequestObject

	request.ElasticKeyID = elasticKeyID

	data := ctx.Request().Body()
	body := PostElastickeyElasticKeyIDVerifyTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDVerify(ctx.UserContext(), request.(PostElastickeyElasticKeyIDVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDVerifyResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDVerifyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetElastickeys operation middleware
func (sh *strictHandler) GetElastickeys(ctx *fiber.Ctx, params GetElastickeysParams) error {
	var request GetElastickeysRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetElastickeys(ctx.UserContext(), request.(GetElastickeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetElastickeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetElastickeysResponseObject); ok {
		if err := validResponse.VisitGetElastickeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMaterialkeys operation middleware
func (sh *strictHandler) GetMaterialkeys(ctx *fiber.Ctx, params GetMaterialkeysParams) error {
	var request GetMaterialkeysRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetMaterialkeys(ctx.UserContext(), request.(GetMaterialkeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMaterialkeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetMaterialkeysResponseObject); ok {
		if err := validResponse.VisitGetMaterialkeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./openapi_spec_components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
