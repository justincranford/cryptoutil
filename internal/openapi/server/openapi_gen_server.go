// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "cryptoutil/internal/openapi/model"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// GetKekpoolParams defines parameters for GetKekpool.
type GetKekpoolParams struct {
	Filter *externalRef0.QueryParamFilter `form:"filter,omitempty" json:"filter,omitempty"`
	Sort   *externalRef0.QueryParamSort   `form:"sort,omitempty" json:"sort,omitempty"`
	Page   *externalRef0.QueryParamPage   `form:"page,omitempty" json:"page,omitempty"`
}

// GetKekpoolKekPoolIDKekParams defines parameters for GetKekpoolKekPoolIDKek.
type GetKekpoolKekPoolIDKekParams struct {
	Filter *externalRef0.QueryParamFilter `form:"filter,omitempty" json:"filter,omitempty"`
	Sort   *externalRef0.QueryParamSort   `form:"sort,omitempty" json:"sort,omitempty"`
	Page   *externalRef0.QueryParamPage   `form:"page,omitempty" json:"page,omitempty"`
}

// PostKekpoolJSONRequestBody defines body for PostKekpool for application/json ContentType.
type PostKekpoolJSONRequestBody = externalRef0.KEKPoolCreate

// PostKekpoolKekPoolIDKekJSONRequestBody defines body for PostKekpoolKekPoolIDKek for application/json ContentType.
type PostKekpoolKekPoolIDKekJSONRequestBody = externalRef0.KEKGenerate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all KEK Pools. Supports optional filtering, sorting, and paging.
	// (GET /kekpool)
	GetKekpool(c *fiber.Ctx, params GetKekpoolParams) error
	// Create a new KEK Pool.
	// (POST /kekpool)
	PostKekpool(c *fiber.Ctx) error
	// List all KEKs in KEK Pool. Supports optional filtering, sorting, and paging.
	// (GET /kekpool/{kekPoolID}/kek)
	GetKekpoolKekPoolIDKek(c *fiber.Ctx, kekPoolID string, params GetKekpoolKekPoolIDKekParams) error
	// Generate a new KEK in a KEK Pool.
	// (POST /kekpool/{kekPoolID}/kek)
	PostKekpoolKekPoolIDKek(c *fiber.Ctx, kekPoolID string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetKekpool operation middleware
func (siw *ServerInterfaceWrapper) GetKekpool(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKekpoolParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", query, &params.Filter)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter filter: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	return siw.Handler.GetKekpool(c, params)
}

// PostKekpool operation middleware
func (siw *ServerInterfaceWrapper) PostKekpool(c *fiber.Ctx) error {

	return siw.Handler.PostKekpool(c)
}

// GetKekpoolKekPoolIDKek operation middleware
func (siw *ServerInterfaceWrapper) GetKekpoolKekPoolIDKek(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "kekPoolID" -------------
	var kekPoolID string

	err = runtime.BindStyledParameterWithOptions("simple", "kekPoolID", c.Params("kekPoolID"), &kekPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter kekPoolID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKekpoolKekPoolIDKekParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", query, &params.Filter)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter filter: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	return siw.Handler.GetKekpoolKekPoolIDKek(c, kekPoolID, params)
}

// PostKekpoolKekPoolIDKek operation middleware
func (siw *ServerInterfaceWrapper) PostKekpoolKekPoolIDKek(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "kekPoolID" -------------
	var kekPoolID string

	err = runtime.BindStyledParameterWithOptions("simple", "kekPoolID", c.Params("kekPoolID"), &kekPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter kekPoolID: %w", err).Error())
	}

	return siw.Handler.PostKekpoolKekPoolIDKek(c, kekPoolID)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/kekpool", wrapper.GetKekpool)

	router.Post(options.BaseURL+"/kekpool", wrapper.PostKekpool)

	router.Get(options.BaseURL+"/kekpool/:kekPoolID/kek", wrapper.GetKekpoolKekPoolIDKek)

	router.Post(options.BaseURL+"/kekpool/:kekPoolID/kek", wrapper.PostKekpoolKekPoolIDKek)

}

type GetKekpoolRequestObject struct {
	Params GetKekpoolParams
}

type GetKekpoolResponseObject interface {
	VisitGetKekpoolResponse(ctx *fiber.Ctx) error
}

type GetKekpool200JSONResponse []externalRef0.KEKPool

func (response GetKekpool200JSONResponse) VisitGetKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKekpool400JSONResponse struct{ ExternalRef0.HTTP400BadRequest }

func (response GetKekpool400JSONResponse) VisitGetKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKekpool401JSONResponse struct {
	ExternalRef0.HTTP401Unauthorized
}

func (response GetKekpool401JSONResponse) VisitGetKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKekpool403JSONResponse struct{ ExternalRef0.HTTP403Forbidden }

func (response GetKekpool403JSONResponse) VisitGetKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKekpool404JSONResponse struct{ ExternalRef0.HTTP404NotFound }

func (response GetKekpool404JSONResponse) VisitGetKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKekpool429JSONResponse struct {
	ExternalRef0.HTTP429TooManyRequests
}

func (response GetKekpool429JSONResponse) VisitGetKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKekpool500JSONResponse struct {
	ExternalRef0.HTTP500InternalServerError
}

func (response GetKekpool500JSONResponse) VisitGetKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKekpool502JSONResponse struct{ ExternalRef0.HTTP502BadGateway }

func (response GetKekpool502JSONResponse) VisitGetKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKekpool503JSONResponse struct {
	ExternalRef0.HTTP503ServiceUnavailable
}

func (response GetKekpool503JSONResponse) VisitGetKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKekpool504JSONResponse struct {
	ExternalRef0.HTTP504GatewayTimeout
}

func (response GetKekpool504JSONResponse) VisitGetKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKekpoolRequestObject struct {
	Body *PostKekpoolJSONRequestBody
}

type PostKekpoolResponseObject interface {
	VisitPostKekpoolResponse(ctx *fiber.Ctx) error
}

type PostKekpool200JSONResponse externalRef0.KEKPool

func (response PostKekpool200JSONResponse) VisitPostKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostKekpool400JSONResponse struct{ ExternalRef0.HTTP400BadRequest }

func (response PostKekpool400JSONResponse) VisitPostKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKekpool401JSONResponse struct {
	ExternalRef0.HTTP401Unauthorized
}

func (response PostKekpool401JSONResponse) VisitPostKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKekpool403JSONResponse struct{ ExternalRef0.HTTP403Forbidden }

func (response PostKekpool403JSONResponse) VisitPostKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKekpool404JSONResponse struct{ ExternalRef0.HTTP404NotFound }

func (response PostKekpool404JSONResponse) VisitPostKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKekpool429JSONResponse struct {
	ExternalRef0.HTTP429TooManyRequests
}

func (response PostKekpool429JSONResponse) VisitPostKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKekpool500JSONResponse struct {
	ExternalRef0.HTTP500InternalServerError
}

func (response PostKekpool500JSONResponse) VisitPostKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKekpool502JSONResponse struct{ ExternalRef0.HTTP502BadGateway }

func (response PostKekpool502JSONResponse) VisitPostKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKekpool503JSONResponse struct {
	ExternalRef0.HTTP503ServiceUnavailable
}

func (response PostKekpool503JSONResponse) VisitPostKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKekpool504JSONResponse struct {
	ExternalRef0.HTTP504GatewayTimeout
}

func (response PostKekpool504JSONResponse) VisitPostKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKekpoolKekPoolIDKekRequestObject struct {
	KekPoolID string `json:"kekPoolID"`
	Params    GetKekpoolKekPoolIDKekParams
}

type GetKekpoolKekPoolIDKekResponseObject interface {
	VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error
}

type GetKekpoolKekPoolIDKek200JSONResponse []externalRef0.KEK

func (response GetKekpoolKekPoolIDKek200JSONResponse) VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKekpoolKekPoolIDKek400JSONResponse struct{ ExternalRef0.HTTP400BadRequest }

func (response GetKekpoolKekPoolIDKek400JSONResponse) VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKekpoolKekPoolIDKek401JSONResponse struct {
	ExternalRef0.HTTP401Unauthorized
}

func (response GetKekpoolKekPoolIDKek401JSONResponse) VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKekpoolKekPoolIDKek403JSONResponse struct{ ExternalRef0.HTTP403Forbidden }

func (response GetKekpoolKekPoolIDKek403JSONResponse) VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKekpoolKekPoolIDKek404JSONResponse struct{ ExternalRef0.HTTP404NotFound }

func (response GetKekpoolKekPoolIDKek404JSONResponse) VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKekpoolKekPoolIDKek429JSONResponse struct {
	ExternalRef0.HTTP429TooManyRequests
}

func (response GetKekpoolKekPoolIDKek429JSONResponse) VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKekpoolKekPoolIDKek500JSONResponse struct {
	ExternalRef0.HTTP500InternalServerError
}

func (response GetKekpoolKekPoolIDKek500JSONResponse) VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKekpoolKekPoolIDKek502JSONResponse struct{ ExternalRef0.HTTP502BadGateway }

func (response GetKekpoolKekPoolIDKek502JSONResponse) VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKekpoolKekPoolIDKek503JSONResponse struct {
	ExternalRef0.HTTP503ServiceUnavailable
}

func (response GetKekpoolKekPoolIDKek503JSONResponse) VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKekpoolKekPoolIDKek504JSONResponse struct {
	ExternalRef0.HTTP504GatewayTimeout
}

func (response GetKekpoolKekPoolIDKek504JSONResponse) VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKekpoolKekPoolIDKekRequestObject struct {
	KekPoolID string `json:"kekPoolID"`
	Body      *PostKekpoolKekPoolIDKekJSONRequestBody
}

type PostKekpoolKekPoolIDKekResponseObject interface {
	VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error
}

type PostKekpoolKekPoolIDKek200JSONResponse externalRef0.KEK

func (response PostKekpoolKekPoolIDKek200JSONResponse) VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostKekpoolKekPoolIDKek400JSONResponse struct{ ExternalRef0.HTTP400BadRequest }

func (response PostKekpoolKekPoolIDKek400JSONResponse) VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKekpoolKekPoolIDKek401JSONResponse struct {
	ExternalRef0.HTTP401Unauthorized
}

func (response PostKekpoolKekPoolIDKek401JSONResponse) VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKekpoolKekPoolIDKek403JSONResponse struct{ ExternalRef0.HTTP403Forbidden }

func (response PostKekpoolKekPoolIDKek403JSONResponse) VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKekpoolKekPoolIDKek404JSONResponse struct{ ExternalRef0.HTTP404NotFound }

func (response PostKekpoolKekPoolIDKek404JSONResponse) VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKekpoolKekPoolIDKek429JSONResponse struct {
	ExternalRef0.HTTP429TooManyRequests
}

func (response PostKekpoolKekPoolIDKek429JSONResponse) VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKekpoolKekPoolIDKek500JSONResponse struct {
	ExternalRef0.HTTP500InternalServerError
}

func (response PostKekpoolKekPoolIDKek500JSONResponse) VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKekpoolKekPoolIDKek502JSONResponse struct{ ExternalRef0.HTTP502BadGateway }

func (response PostKekpoolKekPoolIDKek502JSONResponse) VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKekpoolKekPoolIDKek503JSONResponse struct {
	ExternalRef0.HTTP503ServiceUnavailable
}

func (response PostKekpoolKekPoolIDKek503JSONResponse) VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKekpoolKekPoolIDKek504JSONResponse struct {
	ExternalRef0.HTTP504GatewayTimeout
}

func (response PostKekpoolKekPoolIDKek504JSONResponse) VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all KEK Pools. Supports optional filtering, sorting, and paging.
	// (GET /kekpool)
	GetKekpool(ctx context.Context, request GetKekpoolRequestObject) (GetKekpoolResponseObject, error)
	// Create a new KEK Pool.
	// (POST /kekpool)
	PostKekpool(ctx context.Context, request PostKekpoolRequestObject) (PostKekpoolResponseObject, error)
	// List all KEKs in KEK Pool. Supports optional filtering, sorting, and paging.
	// (GET /kekpool/{kekPoolID}/kek)
	GetKekpoolKekPoolIDKek(ctx context.Context, request GetKekpoolKekPoolIDKekRequestObject) (GetKekpoolKekPoolIDKekResponseObject, error)
	// Generate a new KEK in a KEK Pool.
	// (POST /kekpool/{kekPoolID}/kek)
	PostKekpoolKekPoolIDKek(ctx context.Context, request PostKekpoolKekPoolIDKekRequestObject) (PostKekpoolKekPoolIDKekResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetKekpool operation middleware
func (sh *strictHandler) GetKekpool(ctx *fiber.Ctx, params GetKekpoolParams) error {
	var request GetKekpoolRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKekpool(ctx.UserContext(), request.(GetKekpoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKekpool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKekpoolResponseObject); ok {
		if err := validResponse.VisitGetKekpoolResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKekpool operation middleware
func (sh *strictHandler) PostKekpool(ctx *fiber.Ctx) error {
	var request PostKekpoolRequestObject

	var body PostKekpoolJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKekpool(ctx.UserContext(), request.(PostKekpoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKekpool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKekpoolResponseObject); ok {
		if err := validResponse.VisitPostKekpoolResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKekpoolKekPoolIDKek operation middleware
func (sh *strictHandler) GetKekpoolKekPoolIDKek(ctx *fiber.Ctx, kekPoolID string, params GetKekpoolKekPoolIDKekParams) error {
	var request GetKekpoolKekPoolIDKekRequestObject

	request.KekPoolID = kekPoolID
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKekpoolKekPoolIDKek(ctx.UserContext(), request.(GetKekpoolKekPoolIDKekRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKekpoolKekPoolIDKek")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKekpoolKekPoolIDKekResponseObject); ok {
		if err := validResponse.VisitGetKekpoolKekPoolIDKekResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKekpoolKekPoolIDKek operation middleware
func (sh *strictHandler) PostKekpoolKekPoolIDKek(ctx *fiber.Ctx, kekPoolID string) error {
	var request PostKekpoolKekPoolIDKekRequestObject

	request.KekPoolID = kekPoolID

	var body PostKekpoolKekPoolIDKekJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKekpoolKekPoolIDKek(ctx.UserContext(), request.(PostKekpoolKekPoolIDKekRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKekpoolKekPoolIDKek")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKekpoolKekPoolIDKekResponseObject); ok {
		if err := validResponse.VisitPostKekpoolKekPoolIDKekResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./openapi_spec_components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
