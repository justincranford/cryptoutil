// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1-0.20250618140738-aae687ce8fe9 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "cryptoutil/internal/openapi/model"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// PostElastickeyElasticKeyIDEncryptParams defines parameters for PostElastickeyElasticKeyIDEncrypt.
type PostElastickeyElasticKeyIDEncryptParams struct {
	Context *externalRef0.EncryptContext `form:"context,omitempty" json:"context,omitempty"`
}

// PostElastickeyElasticKeyIDGenerateParams defines parameters for PostElastickeyElasticKeyIDGenerate.
type PostElastickeyElasticKeyIDGenerateParams struct {
	Context *externalRef0.EncryptContext   `form:"context,omitempty" json:"context,omitempty"`
	Alg     externalRef0.GenerateAlgorithm `form:"alg" json:"alg"`
}

// GetElastickeyElasticKeyIDMaterialkeysParams defines parameters for GetElastickeyElasticKeyIDMaterialkeys.
type GetElastickeyElasticKeyIDMaterialkeysParams struct {
	// MaterialKeyID Filter by the Material Key ID.
	MaterialKeyID *externalRef0.MaterialKeyQueryParamMaterialKeyIDS `form:"material_key_id,omitempty" json:"material_key_id,omitempty"`

	// MinGenerateDate Filter by the Material Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.MaterialKeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Material Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.MaterialKeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `material_key_id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.MaterialKeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.MaterialKeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.MaterialKeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostElastickeyElasticKeyIDSignParams defines parameters for PostElastickeyElasticKeyIDSign.
type PostElastickeyElasticKeyIDSignParams struct {
	Context *externalRef0.SignContext `form:"context,omitempty" json:"context,omitempty"`
}

// GetElastickeysParams defines parameters for GetElastickeys.
type GetElastickeysParams struct {
	// ElasticKeyID Filter by the Elastic Key ID (UUID).
	ElasticKeyID *externalRef0.ElasticKeyQueryParamElasticKeyIDS `form:"elastic_key_id,omitempty" json:"elastic_key_id,omitempty"`

	// Name Filter by the Elastic Key name.
	Name *externalRef0.ElasticKeyQueryParamNames `form:"name,omitempty" json:"name,omitempty"`

	// Provider Filter by Elastic Key provider.
	Provider *externalRef0.ElasticKeyQueryParamProviders `form:"provider,omitempty" json:"provider,omitempty"`

	// Algorithm Filter by Elastic Key algorithm.
	Algorithm *externalRef0.ElasticKeyQueryParamAlgorithms `form:"algorithm,omitempty" json:"algorithm,omitempty"`

	// VersioningAllowed Filter by whether versioning is allowed.
	VersioningAllowed *externalRef0.ElasticKeyQueryParamVersioningAllowed `form:"versioning_allowed,omitempty" json:"versioning_allowed,omitempty"`

	// ImportAllowed Filter by whether import is allowed.
	ImportAllowed *externalRef0.ElasticKeyQueryParamImportAllowed `form:"import_allowed,omitempty" json:"import_allowed,omitempty"`

	// Status Filter by the Elastic Key status.
	Status *externalRef0.ElasticKeyQueryParamStatuses `form:"status,omitempty" json:"status,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `name:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.ElasticKeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.ElasticKeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.ElasticKeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetMaterialkeysParams defines parameters for GetMaterialkeys.
type GetMaterialkeysParams struct {
	// ElasticKeyID Filter by the Elastic Key ID (uuid).
	ElasticKeyID *externalRef0.MaterialKeyQueryParamElasticKeyIDS `form:"elastic_key_id,omitempty" json:"elastic_key_id,omitempty"`

	// MaterialKeyID Filter by the Material Key ID.
	MaterialKeyID *externalRef0.MaterialKeyQueryParamMaterialKeyIDS `form:"material_key_id,omitempty" json:"material_key_id,omitempty"`

	// MinGenerateDate Filter by the Material Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.MaterialKeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Material Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.MaterialKeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `material_key_id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.MaterialKeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.MaterialKeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.MaterialKeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostElastickeyJSONRequestBody defines body for PostElastickey for application/json ContentType.
type PostElastickeyJSONRequestBody = externalRef0.ElasticKeyCreate

// PostElastickeyElasticKeyIDDecryptTextRequestBody defines body for PostElastickeyElasticKeyIDDecrypt for text/plain ContentType.
type PostElastickeyElasticKeyIDDecryptTextRequestBody = externalRef0.DecryptRequest

// PostElastickeyElasticKeyIDEncryptTextRequestBody defines body for PostElastickeyElasticKeyIDEncrypt for text/plain ContentType.
type PostElastickeyElasticKeyIDEncryptTextRequestBody = externalRef0.EncryptRequest

// PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody defines body for PostElastickeyElasticKeyIDMaterialkey for application/json ContentType.
type PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody = externalRef0.MaterialKeyGenerate

// PostElastickeyElasticKeyIDSignTextRequestBody defines body for PostElastickeyElasticKeyIDSign for text/plain ContentType.
type PostElastickeyElasticKeyIDSignTextRequestBody = externalRef0.SignRequest

// PostElastickeyElasticKeyIDVerifyTextRequestBody defines body for PostElastickeyElasticKeyIDVerify for text/plain ContentType.
type PostElastickeyElasticKeyIDVerifyTextRequestBody = externalRef0.VerifyRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new Elastic Key.
	// (POST /elastickey)
	PostElastickey(c *fiber.Ctx) error
	// Get an Elastic Key.
	// (GET /elastickey/{elasticKeyID})
	GetElastickeyElasticKeyID(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error
	// Decrypt JWE message using a specific Materia Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWE message kid header.
	// (POST /elastickey/{elasticKeyID}/decrypt)
	PostElastickeyElasticKeyIDDecrypt(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error
	// Encrypt clear text data using latest Material Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWE message kid header.
	// (POST /elastickey/{elasticKeyID}/encrypt)
	PostElastickeyElasticKeyIDEncrypt(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params PostElastickeyElasticKeyIDEncryptParams) error
	// Generate a random Secret Key, Key Pair, or other algorithm. It will be in JWK format, returned in encrypted form as a JWE message.
	// (POST /elastickey/{elasticKeyID}/generate)
	PostElastickeyElasticKeyIDGenerate(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params PostElastickeyElasticKeyIDGenerateParams) error
	// Generate a new Material Key in an Elastic Key.
	// (POST /elastickey/{elasticKeyID}/materialkey)
	PostElastickeyElasticKeyIDMaterialkey(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error
	// Get Material Key in Elastic Key.
	// (GET /elastickey/{elasticKeyID}/materialkey/{materialKeyID})
	GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, materialKeyID externalRef0.MaterialKeyID) error
	// Find Material Keys in Elastic Key. Supports optional filtering, sorting, and paging.
	// (GET /elastickey/{elasticKeyID}/materialkeys)
	GetElastickeyElasticKeyIDMaterialkeys(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params GetElastickeyElasticKeyIDMaterialkeysParams) error
	// Sign clear text using latest Material Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWS message kid header.
	// (POST /elastickey/{elasticKeyID}/sign)
	PostElastickeyElasticKeyIDSign(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params PostElastickeyElasticKeyIDSignParams) error
	// Verify JWS message using a specific Material Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWS message kid header.
	// (POST /elastickey/{elasticKeyID}/verify)
	PostElastickeyElasticKeyIDVerify(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error
	// Find Elastic Keys. Supports optional filtering, sorting, and paging.
	// (GET /elastickeys)
	GetElastickeys(c *fiber.Ctx, params GetElastickeysParams) error
	// Find Material Keys. Supports optional filtering, sorting, and paging.
	// (GET /materialkeys)
	GetMaterialkeys(c *fiber.Ctx, params GetMaterialkeysParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// PostElastickey operation middleware
func (siw *ServerInterfaceWrapper) PostElastickey(c *fiber.Ctx) error {

	return siw.Handler.PostElastickey(c)
}

// GetElastickeyElasticKeyID operation middleware
func (siw *ServerInterfaceWrapper) GetElastickeyElasticKeyID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	return siw.Handler.GetElastickeyElasticKeyID(c, elasticKeyID)
}

// PostElastickeyElasticKeyIDDecrypt operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDDecrypt(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDDecrypt(c, elasticKeyID)
}

// PostElastickeyElasticKeyIDEncrypt operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDEncrypt(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostElastickeyElasticKeyIDEncryptParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "context" -------------

	err = runtime.BindQueryParameter("form", true, false, "context", query, &params.Context)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter context: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDEncrypt(c, elasticKeyID, params)
}

// PostElastickeyElasticKeyIDGenerate operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDGenerate(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostElastickeyElasticKeyIDGenerateParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "context" -------------

	err = runtime.BindQueryParameter("form", true, false, "context", query, &params.Context)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter context: %w", err).Error())
	}

	// ------------- Required query parameter "alg" -------------

	if paramValue := c.Query("alg"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument alg is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "alg", query, &params.Alg)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter alg: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDGenerate(c, elasticKeyID, params)
}

// PostElastickeyElasticKeyIDMaterialkey operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDMaterialkey(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDMaterialkey(c, elasticKeyID)
}

// GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID operation middleware
func (siw *ServerInterfaceWrapper) GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	// ------------- Path parameter "materialKeyID" -------------
	var materialKeyID externalRef0.MaterialKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "materialKeyID", c.Params("materialKeyID"), &materialKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter materialKeyID: %w", err).Error())
	}

	return siw.Handler.GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(c, elasticKeyID, materialKeyID)
}

// GetElastickeyElasticKeyIDMaterialkeys operation middleware
func (siw *ServerInterfaceWrapper) GetElastickeyElasticKeyIDMaterialkeys(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetElastickeyElasticKeyIDMaterialkeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "material_key_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "material_key_id", query, &params.MaterialKeyID)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter material_key_id: %w", err).Error())
	}

	// ------------- Optional query parameter "min_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_generate_date", query, &params.MinGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter min_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "max_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_generate_date", query, &params.MaxGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter max_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetElastickeyElasticKeyIDMaterialkeys(c, elasticKeyID, params)
}

// PostElastickeyElasticKeyIDSign operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDSign(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostElastickeyElasticKeyIDSignParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "context" -------------

	err = runtime.BindQueryParameter("form", true, false, "context", query, &params.Context)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter context: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDSign(c, elasticKeyID, params)
}

// PostElastickeyElasticKeyIDVerify operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDVerify(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDVerify(c, elasticKeyID)
}

// GetElastickeys operation middleware
func (siw *ServerInterfaceWrapper) GetElastickeys(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetElastickeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "elastic_key_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "elastic_key_id", query, &params.ElasticKeyID)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elastic_key_id: %w", err).Error())
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", query, &params.Provider)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter provider: %w", err).Error())
	}

	// ------------- Optional query parameter "algorithm" -------------

	err = runtime.BindQueryParameter("form", true, false, "algorithm", query, &params.Algorithm)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter algorithm: %w", err).Error())
	}

	// ------------- Optional query parameter "versioning_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "versioning_allowed", query, &params.VersioningAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter versioning_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "import_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "import_allowed", query, &params.ImportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter import_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", query, &params.Status)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter status: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetElastickeys(c, params)
}

// GetMaterialkeys operation middleware
func (siw *ServerInterfaceWrapper) GetMaterialkeys(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMaterialkeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "elastic_key_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "elastic_key_id", query, &params.ElasticKeyID)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elastic_key_id: %w", err).Error())
	}

	// ------------- Optional query parameter "material_key_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "material_key_id", query, &params.MaterialKeyID)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter material_key_id: %w", err).Error())
	}

	// ------------- Optional query parameter "min_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_generate_date", query, &params.MinGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter min_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "max_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_generate_date", query, &params.MaxGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter max_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetMaterialkeys(c, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/elastickey", wrapper.PostElastickey)

	router.Get(options.BaseURL+"/elastickey/:elasticKeyID", wrapper.GetElastickeyElasticKeyID)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/decrypt", wrapper.PostElastickeyElasticKeyIDDecrypt)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/encrypt", wrapper.PostElastickeyElasticKeyIDEncrypt)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/generate", wrapper.PostElastickeyElasticKeyIDGenerate)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/materialkey", wrapper.PostElastickeyElasticKeyIDMaterialkey)

	router.Get(options.BaseURL+"/elastickey/:elasticKeyID/materialkey/:materialKeyID", wrapper.GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID)

	router.Get(options.BaseURL+"/elastickey/:elasticKeyID/materialkeys", wrapper.GetElastickeyElasticKeyIDMaterialkeys)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/sign", wrapper.PostElastickeyElasticKeyIDSign)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/verify", wrapper.PostElastickeyElasticKeyIDVerify)

	router.Get(options.BaseURL+"/elastickeys", wrapper.GetElastickeys)

	router.Get(options.BaseURL+"/materialkeys", wrapper.GetMaterialkeys)

}

type PostElastickeyRequestObject struct {
	Body *PostElastickeyJSONRequestBody
}

type PostElastickeyResponseObject interface {
	VisitPostElastickeyResponse(ctx *fiber.Ctx) error
}

type PostElastickey200JSONResponse externalRef0.ElasticKey

func (response PostElastickey200JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostElastickey400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickey400JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickey401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickey401JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickey403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickey403JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickey404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickey404JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickey429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickey429JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickey500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickey500JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickey502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickey502JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickey503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickey503JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickey504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickey504JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
}

type GetElastickeyElasticKeyIDResponseObject interface {
	VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error
}

type GetElastickeyElasticKeyID200JSONResponse externalRef0.ElasticKey

func (response GetElastickeyElasticKeyID200JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetElastickeyElasticKeyID400JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetElastickeyElasticKeyID401JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetElastickeyElasticKeyID403JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetElastickeyElasticKeyID404JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetElastickeyElasticKeyID429JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetElastickeyElasticKeyID500JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetElastickeyElasticKeyID502JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetElastickeyElasticKeyID503JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetElastickeyElasticKeyID504JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecryptRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
	Body         *PostElastickeyElasticKeyIDDecryptTextRequestBody
}

type PostElastickeyElasticKeyIDDecryptResponseObject interface {
	VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDDecrypt200TextResponse externalRef0.DecryptResponse

func (response PostElastickeyElasticKeyIDDecrypt200TextResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostElastickeyElasticKeyIDDecrypt400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDDecrypt400JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDDecrypt401JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDDecrypt403JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDDecrypt404JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDDecrypt429JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDDecrypt500JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDDecrypt502JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDDecrypt503JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDDecrypt504JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncryptRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
	Params       PostElastickeyElasticKeyIDEncryptParams
	Body         *PostElastickeyElasticKeyIDEncryptTextRequestBody
}

type PostElastickeyElasticKeyIDEncryptResponseObject interface {
	VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDEncrypt200TextResponse externalRef0.EncryptResponse

func (response PostElastickeyElasticKeyIDEncrypt200TextResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostElastickeyElasticKeyIDEncrypt400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDEncrypt400JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDEncrypt401JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDEncrypt403JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDEncrypt404JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDEncrypt429JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDEncrypt500JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDEncrypt502JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDEncrypt503JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDEncrypt504JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDGenerateRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
	Params       PostElastickeyElasticKeyIDGenerateParams
}

type PostElastickeyElasticKeyIDGenerateResponseObject interface {
	VisitPostElastickeyElasticKeyIDGenerateResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDGenerate200TextResponse externalRef0.GenerateResponse

func (response PostElastickeyElasticKeyIDGenerate200TextResponse) VisitPostElastickeyElasticKeyIDGenerateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostElastickeyElasticKeyIDGenerate400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDGenerate400JSONResponse) VisitPostElastickeyElasticKeyIDGenerateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDGenerate401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDGenerate401JSONResponse) VisitPostElastickeyElasticKeyIDGenerateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDGenerate403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDGenerate403JSONResponse) VisitPostElastickeyElasticKeyIDGenerateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDGenerate404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDGenerate404JSONResponse) VisitPostElastickeyElasticKeyIDGenerateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDGenerate429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDGenerate429JSONResponse) VisitPostElastickeyElasticKeyIDGenerateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDGenerate500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDGenerate500JSONResponse) VisitPostElastickeyElasticKeyIDGenerateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDGenerate502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDGenerate502JSONResponse) VisitPostElastickeyElasticKeyIDGenerateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDGenerate503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDGenerate503JSONResponse) VisitPostElastickeyElasticKeyIDGenerateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDGenerate504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDGenerate504JSONResponse) VisitPostElastickeyElasticKeyIDGenerateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkeyRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
	Body         *PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody
}

type PostElastickeyElasticKeyIDMaterialkeyResponseObject interface {
	VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDMaterialkey200JSONResponse externalRef0.MaterialKey

func (response PostElastickeyElasticKeyIDMaterialkey200JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDMaterialkey400JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDMaterialkey401JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDMaterialkey403JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDMaterialkey404JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDMaterialkey429JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDMaterialkey500JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDMaterialkey502JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDMaterialkey503JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDMaterialkey504JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDRequestObject struct {
	ElasticKeyID  externalRef0.ElasticKeyID  `json:"elasticKeyID"`
	MaterialKeyID externalRef0.MaterialKeyID `json:"materialKeyID"`
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponseObject interface {
	VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID200JSONResponse externalRef0.MaterialKey

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID200JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID400JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID401JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID403JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID404JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID429JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID500JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID502JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID503JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID504JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeysRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
	Params       GetElastickeyElasticKeyIDMaterialkeysParams
}

type GetElastickeyElasticKeyIDMaterialkeysResponseObject interface {
	VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error
}

type GetElastickeyElasticKeyIDMaterialkeys200JSONResponse []externalRef0.MaterialKey

func (response GetElastickeyElasticKeyIDMaterialkeys200JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetElastickeyElasticKeyIDMaterialkeys400JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetElastickeyElasticKeyIDMaterialkeys401JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetElastickeyElasticKeyIDMaterialkeys403JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetElastickeyElasticKeyIDMaterialkeys404JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetElastickeyElasticKeyIDMaterialkeys429JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetElastickeyElasticKeyIDMaterialkeys500JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetElastickeyElasticKeyIDMaterialkeys502JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetElastickeyElasticKeyIDMaterialkeys503JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetElastickeyElasticKeyIDMaterialkeys504JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSignRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
	Params       PostElastickeyElasticKeyIDSignParams
	Body         *PostElastickeyElasticKeyIDSignTextRequestBody
}

type PostElastickeyElasticKeyIDSignResponseObject interface {
	VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDSign200TextResponse externalRef0.SignResponse

func (response PostElastickeyElasticKeyIDSign200TextResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostElastickeyElasticKeyIDSign400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDSign400JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDSign401JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDSign403JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDSign404JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDSign429JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDSign500JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDSign502JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDSign503JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDSign504JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerifyRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
	Body         *PostElastickeyElasticKeyIDVerifyTextRequestBody
}

type PostElastickeyElasticKeyIDVerifyResponseObject interface {
	VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDVerify204Response struct {
}

func (response PostElastickeyElasticKeyIDVerify204Response) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type PostElastickeyElasticKeyIDVerify400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDVerify400JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDVerify401JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDVerify403JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDVerify404JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDVerify429JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDVerify500JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDVerify502JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDVerify503JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDVerify504JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetElastickeysRequestObject struct {
	Params GetElastickeysParams
}

type GetElastickeysResponseObject interface {
	VisitGetElastickeysResponse(ctx *fiber.Ctx) error
}

type GetElastickeys200JSONResponse []externalRef0.ElasticKey

func (response GetElastickeys200JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetElastickeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetElastickeys400JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetElastickeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetElastickeys401JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetElastickeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetElastickeys403JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetElastickeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetElastickeys404JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetElastickeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetElastickeys429JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetElastickeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetElastickeys500JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetElastickeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetElastickeys502JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetElastickeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetElastickeys503JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetElastickeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetElastickeys504JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetMaterialkeysRequestObject struct {
	Params GetMaterialkeysParams
}

type GetMaterialkeysResponseObject interface {
	VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error
}

type GetMaterialkeys200JSONResponse []externalRef0.MaterialKey

func (response GetMaterialkeys200JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetMaterialkeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetMaterialkeys400JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetMaterialkeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetMaterialkeys401JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetMaterialkeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetMaterialkeys403JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetMaterialkeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetMaterialkeys404JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetMaterialkeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetMaterialkeys429JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetMaterialkeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetMaterialkeys500JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetMaterialkeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetMaterialkeys502JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetMaterialkeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetMaterialkeys503JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetMaterialkeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetMaterialkeys504JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a new Elastic Key.
	// (POST /elastickey)
	PostElastickey(ctx context.Context, request PostElastickeyRequestObject) (PostElastickeyResponseObject, error)
	// Get an Elastic Key.
	// (GET /elastickey/{elasticKeyID})
	GetElastickeyElasticKeyID(ctx context.Context, request GetElastickeyElasticKeyIDRequestObject) (GetElastickeyElasticKeyIDResponseObject, error)
	// Decrypt JWE message using a specific Materia Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWE message kid header.
	// (POST /elastickey/{elasticKeyID}/decrypt)
	PostElastickeyElasticKeyIDDecrypt(ctx context.Context, request PostElastickeyElasticKeyIDDecryptRequestObject) (PostElastickeyElasticKeyIDDecryptResponseObject, error)
	// Encrypt clear text data using latest Material Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWE message kid header.
	// (POST /elastickey/{elasticKeyID}/encrypt)
	PostElastickeyElasticKeyIDEncrypt(ctx context.Context, request PostElastickeyElasticKeyIDEncryptRequestObject) (PostElastickeyElasticKeyIDEncryptResponseObject, error)
	// Generate a random Secret Key, Key Pair, or other algorithm. It will be in JWK format, returned in encrypted form as a JWE message.
	// (POST /elastickey/{elasticKeyID}/generate)
	PostElastickeyElasticKeyIDGenerate(ctx context.Context, request PostElastickeyElasticKeyIDGenerateRequestObject) (PostElastickeyElasticKeyIDGenerateResponseObject, error)
	// Generate a new Material Key in an Elastic Key.
	// (POST /elastickey/{elasticKeyID}/materialkey)
	PostElastickeyElasticKeyIDMaterialkey(ctx context.Context, request PostElastickeyElasticKeyIDMaterialkeyRequestObject) (PostElastickeyElasticKeyIDMaterialkeyResponseObject, error)
	// Get Material Key in Elastic Key.
	// (GET /elastickey/{elasticKeyID}/materialkey/{materialKeyID})
	GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(ctx context.Context, request GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDRequestObject) (GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponseObject, error)
	// Find Material Keys in Elastic Key. Supports optional filtering, sorting, and paging.
	// (GET /elastickey/{elasticKeyID}/materialkeys)
	GetElastickeyElasticKeyIDMaterialkeys(ctx context.Context, request GetElastickeyElasticKeyIDMaterialkeysRequestObject) (GetElastickeyElasticKeyIDMaterialkeysResponseObject, error)
	// Sign clear text using latest Material Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWS message kid header.
	// (POST /elastickey/{elasticKeyID}/sign)
	PostElastickeyElasticKeyIDSign(ctx context.Context, request PostElastickeyElasticKeyIDSignRequestObject) (PostElastickeyElasticKeyIDSignResponseObject, error)
	// Verify JWS message using a specific Material Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWS message kid header.
	// (POST /elastickey/{elasticKeyID}/verify)
	PostElastickeyElasticKeyIDVerify(ctx context.Context, request PostElastickeyElasticKeyIDVerifyRequestObject) (PostElastickeyElasticKeyIDVerifyResponseObject, error)
	// Find Elastic Keys. Supports optional filtering, sorting, and paging.
	// (GET /elastickeys)
	GetElastickeys(ctx context.Context, request GetElastickeysRequestObject) (GetElastickeysResponseObject, error)
	// Find Material Keys. Supports optional filtering, sorting, and paging.
	// (GET /materialkeys)
	GetMaterialkeys(ctx context.Context, request GetMaterialkeysRequestObject) (GetMaterialkeysResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostElastickey operation middleware
func (sh *strictHandler) PostElastickey(ctx *fiber.Ctx) error {
	var request PostElastickeyRequestObject

	var body PostElastickeyJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickey(ctx.UserContext(), request.(PostElastickeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyResponseObject); ok {
		if err := validResponse.VisitPostElastickeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetElastickeyElasticKeyID operation middleware
func (sh *strictHandler) GetElastickeyElasticKeyID(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error {
	var request GetElastickeyElasticKeyIDRequestObject

	request.ElasticKeyID = elasticKeyID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetElastickeyElasticKeyID(ctx.UserContext(), request.(GetElastickeyElasticKeyIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetElastickeyElasticKeyID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetElastickeyElasticKeyIDResponseObject); ok {
		if err := validResponse.VisitGetElastickeyElasticKeyIDResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDDecrypt operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDDecrypt(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error {
	var request PostElastickeyElasticKeyIDDecryptRequestObject

	request.ElasticKeyID = elasticKeyID

	data := ctx.Request().Body()
	body := PostElastickeyElasticKeyIDDecryptTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDDecrypt(ctx.UserContext(), request.(PostElastickeyElasticKeyIDDecryptRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDDecrypt")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDDecryptResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDDecryptResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDEncrypt operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDEncrypt(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params PostElastickeyElasticKeyIDEncryptParams) error {
	var request PostElastickeyElasticKeyIDEncryptRequestObject

	request.ElasticKeyID = elasticKeyID
	request.Params = params

	data := ctx.Request().Body()
	body := PostElastickeyElasticKeyIDEncryptTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDEncrypt(ctx.UserContext(), request.(PostElastickeyElasticKeyIDEncryptRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDEncrypt")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDEncryptResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDEncryptResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDGenerate operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDGenerate(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params PostElastickeyElasticKeyIDGenerateParams) error {
	var request PostElastickeyElasticKeyIDGenerateRequestObject

	request.ElasticKeyID = elasticKeyID
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDGenerate(ctx.UserContext(), request.(PostElastickeyElasticKeyIDGenerateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDGenerate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDGenerateResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDGenerateResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDMaterialkey operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDMaterialkey(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error {
	var request PostElastickeyElasticKeyIDMaterialkeyRequestObject

	request.ElasticKeyID = elasticKeyID

	var body PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDMaterialkey(ctx.UserContext(), request.(PostElastickeyElasticKeyIDMaterialkeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDMaterialkey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDMaterialkeyResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID operation middleware
func (sh *strictHandler) GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, materialKeyID externalRef0.MaterialKeyID) error {
	var request GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDRequestObject

	request.ElasticKeyID = elasticKeyID
	request.MaterialKeyID = materialKeyID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(ctx.UserContext(), request.(GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponseObject); ok {
		if err := validResponse.VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetElastickeyElasticKeyIDMaterialkeys operation middleware
func (sh *strictHandler) GetElastickeyElasticKeyIDMaterialkeys(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params GetElastickeyElasticKeyIDMaterialkeysParams) error {
	var request GetElastickeyElasticKeyIDMaterialkeysRequestObject

	request.ElasticKeyID = elasticKeyID
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetElastickeyElasticKeyIDMaterialkeys(ctx.UserContext(), request.(GetElastickeyElasticKeyIDMaterialkeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetElastickeyElasticKeyIDMaterialkeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetElastickeyElasticKeyIDMaterialkeysResponseObject); ok {
		if err := validResponse.VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDSign operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDSign(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params PostElastickeyElasticKeyIDSignParams) error {
	var request PostElastickeyElasticKeyIDSignRequestObject

	request.ElasticKeyID = elasticKeyID
	request.Params = params

	data := ctx.Request().Body()
	body := PostElastickeyElasticKeyIDSignTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDSign(ctx.UserContext(), request.(PostElastickeyElasticKeyIDSignRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDSign")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDSignResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDSignResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDVerify operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDVerify(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error {
	var request PostElastickeyElasticKeyIDVerifyRequestObject

	request.ElasticKeyID = elasticKeyID

	data := ctx.Request().Body()
	body := PostElastickeyElasticKeyIDVerifyTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDVerify(ctx.UserContext(), request.(PostElastickeyElasticKeyIDVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDVerifyResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDVerifyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetElastickeys operation middleware
func (sh *strictHandler) GetElastickeys(ctx *fiber.Ctx, params GetElastickeysParams) error {
	var request GetElastickeysRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetElastickeys(ctx.UserContext(), request.(GetElastickeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetElastickeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetElastickeysResponseObject); ok {
		if err := validResponse.VisitGetElastickeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMaterialkeys operation middleware
func (sh *strictHandler) GetMaterialkeys(ctx *fiber.Ctx, params GetMaterialkeysParams) error {
	var request GetMaterialkeysRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetMaterialkeys(ctx.UserContext(), request.(GetMaterialkeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMaterialkeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetMaterialkeysResponseObject); ok {
		if err := validResponse.VisitGetMaterialkeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"va536D1+efy/AAAA//91nJJYCqsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./openapi_spec_components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
