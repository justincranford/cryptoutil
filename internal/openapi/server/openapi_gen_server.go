// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "cryptoutil/internal/openapi/model"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// Defines values for GetKeypoolParamsSort.
const (
	GetKeypoolParamsSortAlgorithm             GetKeypoolParamsSort = "algorithm"
	GetKeypoolParamsSortAlgorithmASC          GetKeypoolParamsSort = "algorithm:ASC"
	GetKeypoolParamsSortAlgorithmDESC         GetKeypoolParamsSort = "algorithm:DESC"
	GetKeypoolParamsSortExportAllowed         GetKeypoolParamsSort = "export_allowed"
	GetKeypoolParamsSortExportAllowedASC      GetKeypoolParamsSort = "export_allowed:ASC"
	GetKeypoolParamsSortExportAllowedDESC     GetKeypoolParamsSort = "export_allowed:DESC"
	GetKeypoolParamsSortId                    GetKeypoolParamsSort = "id"
	GetKeypoolParamsSortIdASC                 GetKeypoolParamsSort = "id:ASC"
	GetKeypoolParamsSortIdDESC                GetKeypoolParamsSort = "id:DESC"
	GetKeypoolParamsSortImportAllowed         GetKeypoolParamsSort = "import_allowed"
	GetKeypoolParamsSortImportAllowedASC      GetKeypoolParamsSort = "import_allowed:ASC"
	GetKeypoolParamsSortImportAllowedDESC     GetKeypoolParamsSort = "import_allowed:DESC"
	GetKeypoolParamsSortName                  GetKeypoolParamsSort = "name"
	GetKeypoolParamsSortNameASC               GetKeypoolParamsSort = "name:ASC"
	GetKeypoolParamsSortNameDESC              GetKeypoolParamsSort = "name:DESC"
	GetKeypoolParamsSortProvider              GetKeypoolParamsSort = "provider"
	GetKeypoolParamsSortProviderASC           GetKeypoolParamsSort = "provider:ASC"
	GetKeypoolParamsSortProviderDESC          GetKeypoolParamsSort = "provider:DESC"
	GetKeypoolParamsSortStatus                GetKeypoolParamsSort = "status"
	GetKeypoolParamsSortStatusASC             GetKeypoolParamsSort = "status:ASC"
	GetKeypoolParamsSortStatusDESC            GetKeypoolParamsSort = "status:DESC"
	GetKeypoolParamsSortVersioningAllowed     GetKeypoolParamsSort = "versioning_allowed"
	GetKeypoolParamsSortVersioningAllowedASC  GetKeypoolParamsSort = "versioning_allowed:ASC"
	GetKeypoolParamsSortVersioningAllowedDESC GetKeypoolParamsSort = "versioning_allowed:DESC"
)

// Defines values for GetKeypoolKeyPoolIDKeyParamsSort.
const (
	GetKeypoolKeyPoolIDKeyParamsSortGenerateDate     GetKeypoolKeyPoolIDKeyParamsSort = "generate_date"
	GetKeypoolKeyPoolIDKeyParamsSortGenerateDateASC  GetKeypoolKeyPoolIDKeyParamsSort = "generate_date:ASC"
	GetKeypoolKeyPoolIDKeyParamsSortGenerateDateDESC GetKeypoolKeyPoolIDKeyParamsSort = "generate_date:DESC"
	GetKeypoolKeyPoolIDKeyParamsSortId               GetKeypoolKeyPoolIDKeyParamsSort = "id"
	GetKeypoolKeyPoolIDKeyParamsSortIdASC            GetKeypoolKeyPoolIDKeyParamsSort = "id:ASC"
	GetKeypoolKeyPoolIDKeyParamsSortIdDESC           GetKeypoolKeyPoolIDKeyParamsSort = "id:DESC"
	GetKeypoolKeyPoolIDKeyParamsSortPool             GetKeypoolKeyPoolIDKeyParamsSort = "pool"
	GetKeypoolKeyPoolIDKeyParamsSortPoolASC          GetKeypoolKeyPoolIDKeyParamsSort = "pool:ASC"
	GetKeypoolKeyPoolIDKeyParamsSortPoolDESC         GetKeypoolKeyPoolIDKeyParamsSort = "pool:DESC"
)

// GetKeypoolParams defines parameters for GetKeypool.
type GetKeypoolParams struct {
	// Id Filter by the Key Pool ID (UUID).
	Id *externalRef0.KeyPoolFilterId `form:"id,omitempty" json:"id,omitempty"`

	// Name Filter by the Key Pool name.
	Name *externalRef0.KeyPoolFilterName `form:"name,omitempty" json:"name,omitempty"`

	// Provider Filter by Key Pool provider.
	Provider *externalRef0.KeyPoolFilterProvider `form:"provider,omitempty" json:"provider,omitempty"`

	// Algorithm Filter by cryptographic algorithm.
	Algorithm *externalRef0.KeyPoolFilterAlgorithm `form:"algorithm,omitempty" json:"algorithm,omitempty"`

	// VersioningAllowed Filter by whether versioning is allowed.
	VersioningAllowed *externalRef0.KeyPoolFilterIsVersioningAllowed `form:"versioning_allowed,omitempty" json:"versioning_allowed,omitempty"`

	// ImportAllowed Filter by whether import is allowed.
	ImportAllowed *externalRef0.KeyPoolFilterIsImportAllowed `form:"import_allowed,omitempty" json:"import_allowed,omitempty"`

	// ExportAllowed Filter by whether export is allowed.
	ExportAllowed *externalRef0.KeyPoolFilterIsExportAllowed `form:"export_allowed,omitempty" json:"export_allowed,omitempty"`

	// Status Filter by the Key Pool status.
	Status *externalRef0.KeyPoolFilterStatus `form:"status,omitempty" json:"status,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `name:asc`). Repeat parameter for multiple sort fields.
	Sort *GetKeypoolParamsSort                 `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyPoolFilterPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyPoolFilterPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetKeypoolParamsSort defines parameters for GetKeypool.
type GetKeypoolParamsSort string

// GetKeypoolKeyPoolIDKeyParams defines parameters for GetKeypoolKeyPoolIDKey.
type GetKeypoolKeyPoolIDKeyParams struct {
	// Pool Filter by the Key Pool ID (uuid).
	Pool *externalRef0.KeyFilterKeyPoolId `form:"pool,omitempty" json:"pool,omitempty"`

	// Id Filter by the Key ID.
	Id *externalRef0.KeyFilterId `form:"id,omitempty" json:"id,omitempty"`

	// MinGenerateDate Filter by the Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.KeyFilterMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.KeyFilterMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `id:asc`). Repeat parameter for multiple sort fields.
	Sort *GetKeypoolKeyPoolIDKeyParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyFilterPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyFilterPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetKeypoolKeyPoolIDKeyParamsSort defines parameters for GetKeypoolKeyPoolIDKey.
type GetKeypoolKeyPoolIDKeyParamsSort string

// PostKeypoolJSONRequestBody defines body for PostKeypool for application/json ContentType.
type PostKeypoolJSONRequestBody = externalRef0.KeyPoolCreate

// PostKeypoolKeyPoolIDKeyJSONRequestBody defines body for PostKeypoolKeyPoolIDKey for application/json ContentType.
type PostKeypoolKeyPoolIDKeyJSONRequestBody = externalRef0.KeyGenerate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all Key Pools. Supports optional filtering, sorting, and paging.
	// (GET /keypool)
	GetKeypool(c *fiber.Ctx, params GetKeypoolParams) error
	// Create a new Key Pool.
	// (POST /keypool)
	PostKeypool(c *fiber.Ctx) error
	// List all Keys in Key Pool. Supports optional filtering, sorting, and paging.
	// (GET /keypool/{keyPoolID}/key)
	GetKeypoolKeyPoolIDKey(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params GetKeypoolKeyPoolIDKeyParams) error
	// Generate a new Key in a Key Pool.
	// (POST /keypool/{keyPoolID}/key)
	PostKeypoolKeyPoolIDKey(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetKeypool operation middleware
func (siw *ServerInterfaceWrapper) GetKeypool(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeypoolParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", query, &params.Id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", query, &params.Provider)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter provider: %w", err).Error())
	}

	// ------------- Optional query parameter "algorithm" -------------

	err = runtime.BindQueryParameter("form", true, false, "algorithm", query, &params.Algorithm)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter algorithm: %w", err).Error())
	}

	// ------------- Optional query parameter "versioning_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "versioning_allowed", query, &params.VersioningAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter versioning_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "import_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "import_allowed", query, &params.ImportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter import_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "export_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "export_allowed", query, &params.ExportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter export_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", query, &params.Status)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter status: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetKeypool(c, params)
}

// PostKeypool operation middleware
func (siw *ServerInterfaceWrapper) PostKeypool(c *fiber.Ctx) error {

	return siw.Handler.PostKeypool(c)
}

// GetKeypoolKeyPoolIDKey operation middleware
func (siw *ServerInterfaceWrapper) GetKeypoolKeyPoolIDKey(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeypoolKeyPoolIDKeyParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, false, "pool", query, &params.Pool)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter pool: %w", err).Error())
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", query, &params.Id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Optional query parameter "min_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_generate_date", query, &params.MinGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter min_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "max_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_generate_date", query, &params.MaxGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter max_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetKeypoolKeyPoolIDKey(c, keyPoolID, params)
}

// PostKeypoolKeyPoolIDKey operation middleware
func (siw *ServerInterfaceWrapper) PostKeypoolKeyPoolIDKey(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	return siw.Handler.PostKeypoolKeyPoolIDKey(c, keyPoolID)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/keypool", wrapper.GetKeypool)

	router.Post(options.BaseURL+"/keypool", wrapper.PostKeypool)

	router.Get(options.BaseURL+"/keypool/:keyPoolID/key", wrapper.GetKeypoolKeyPoolIDKey)

	router.Post(options.BaseURL+"/keypool/:keyPoolID/key", wrapper.PostKeypoolKeyPoolIDKey)

}

type GetKeypoolRequestObject struct {
	Params GetKeypoolParams
}

type GetKeypoolResponseObject interface {
	VisitGetKeypoolResponse(ctx *fiber.Ctx) error
}

type GetKeypool200JSONResponse []externalRef0.KeyPool

func (response GetKeypool200JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypool400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypool400JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypool401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypool401JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypool403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypool403JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypool404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypool404JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypool429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypool429JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypool500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypool500JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypool502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypool502JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypool503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypool503JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypool504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypool504JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolRequestObject struct {
	Body *PostKeypoolJSONRequestBody
}

type PostKeypoolResponseObject interface {
	VisitPostKeypoolResponse(ctx *fiber.Ctx) error
}

type PostKeypool200JSONResponse externalRef0.KeyPool

func (response PostKeypool200JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostKeypool400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypool400JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypool401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypool401JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypool403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypool403JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypool404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypool404JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypool429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypool429JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypool500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypool500JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypool502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypool502JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypool503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypool503JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypool504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypool504JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Params    GetKeypoolKeyPoolIDKeyParams
}

type GetKeypoolKeyPoolIDKeyResponseObject interface {
	VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error
}

type GetKeypoolKeyPoolIDKey200JSONResponse []externalRef0.Key

func (response GetKeypoolKeyPoolIDKey200JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypoolKeyPoolIDKey400JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypoolKeyPoolIDKey401JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypoolKeyPoolIDKey403JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypoolKeyPoolIDKey404JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypoolKeyPoolIDKey429JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypoolKeyPoolIDKey500JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypoolKeyPoolIDKey502JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypoolKeyPoolIDKey503JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypoolKeyPoolIDKey504JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKeyRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Body      *PostKeypoolKeyPoolIDKeyJSONRequestBody
}

type PostKeypoolKeyPoolIDKeyResponseObject interface {
	VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error
}

type PostKeypoolKeyPoolIDKey200JSONResponse externalRef0.Key

func (response PostKeypoolKeyPoolIDKey200JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypoolKeyPoolIDKey400JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypoolKeyPoolIDKey401JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypoolKeyPoolIDKey403JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypoolKeyPoolIDKey404JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypoolKeyPoolIDKey429JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypoolKeyPoolIDKey500JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypoolKeyPoolIDKey502JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypoolKeyPoolIDKey503JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypoolKeyPoolIDKey504JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all Key Pools. Supports optional filtering, sorting, and paging.
	// (GET /keypool)
	GetKeypool(ctx context.Context, request GetKeypoolRequestObject) (GetKeypoolResponseObject, error)
	// Create a new Key Pool.
	// (POST /keypool)
	PostKeypool(ctx context.Context, request PostKeypoolRequestObject) (PostKeypoolResponseObject, error)
	// List all Keys in Key Pool. Supports optional filtering, sorting, and paging.
	// (GET /keypool/{keyPoolID}/key)
	GetKeypoolKeyPoolIDKey(ctx context.Context, request GetKeypoolKeyPoolIDKeyRequestObject) (GetKeypoolKeyPoolIDKeyResponseObject, error)
	// Generate a new Key in a Key Pool.
	// (POST /keypool/{keyPoolID}/key)
	PostKeypoolKeyPoolIDKey(ctx context.Context, request PostKeypoolKeyPoolIDKeyRequestObject) (PostKeypoolKeyPoolIDKeyResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetKeypool operation middleware
func (sh *strictHandler) GetKeypool(ctx *fiber.Ctx, params GetKeypoolParams) error {
	var request GetKeypoolRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypool(ctx.UserContext(), request.(GetKeypoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolResponseObject); ok {
		if err := validResponse.VisitGetKeypoolResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypool operation middleware
func (sh *strictHandler) PostKeypool(ctx *fiber.Ctx) error {
	var request PostKeypoolRequestObject

	var body PostKeypoolJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypool(ctx.UserContext(), request.(PostKeypoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolResponseObject); ok {
		if err := validResponse.VisitPostKeypoolResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeypoolKeyPoolIDKey operation middleware
func (sh *strictHandler) GetKeypoolKeyPoolIDKey(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params GetKeypoolKeyPoolIDKeyParams) error {
	var request GetKeypoolKeyPoolIDKeyRequestObject

	request.KeyPoolID = keyPoolID
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypoolKeyPoolIDKey(ctx.UserContext(), request.(GetKeypoolKeyPoolIDKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypoolKeyPoolIDKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolKeyPoolIDKeyResponseObject); ok {
		if err := validResponse.VisitGetKeypoolKeyPoolIDKeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypoolKeyPoolIDKey operation middleware
func (sh *strictHandler) PostKeypoolKeyPoolIDKey(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error {
	var request PostKeypoolKeyPoolIDKeyRequestObject

	request.KeyPoolID = keyPoolID

	var body PostKeypoolKeyPoolIDKeyJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypoolKeyPoolIDKey(ctx.UserContext(), request.(PostKeypoolKeyPoolIDKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypoolKeyPoolIDKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolKeyPoolIDKeyResponseObject); ok {
		if err := validResponse.VisitPostKeypoolKeyPoolIDKeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"cy7V6K331jvFy/vlfwMAAP//LLB19sFMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./openapi_spec_components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
