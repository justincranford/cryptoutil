// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "cryptoutil/internal/openapi/model"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// GetKeypoolKeyPoolIDKeysParams defines parameters for GetKeypoolKeyPoolIDKeys.
type GetKeypoolKeyPoolIDKeysParams struct {
	// Id Filter by the Key ID.
	Id *externalRef0.KeyQueryParamIds `form:"id,omitempty" json:"id,omitempty"`

	// MinGenerateDate Filter by the Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.KeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.KeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetKeypoolsParams defines parameters for GetKeypools.
type GetKeypoolsParams struct {
	// Id Filter by the Key Pool ID (UUID).
	Id *externalRef0.KeyPoolQueryParamIds `form:"id,omitempty" json:"id,omitempty"`

	// Name Filter by the Key Pool name.
	Name *externalRef0.KeyPoolQueryParamNames `form:"name,omitempty" json:"name,omitempty"`

	// Provider Filter by Key Pool provider.
	Provider *externalRef0.KeyPoolQueryParamProviders `form:"provider,omitempty" json:"provider,omitempty"`

	// Algorithm Filter by cryptographic algorithm.
	Algorithm *externalRef0.KeyPoolQueryParamAlgorithms `form:"algorithm,omitempty" json:"algorithm,omitempty"`

	// VersioningAllowed Filter by whether versioning is allowed.
	VersioningAllowed *externalRef0.KeyPoolQueryParamVersioningAllowed `form:"versioning_allowed,omitempty" json:"versioning_allowed,omitempty"`

	// ImportAllowed Filter by whether import is allowed.
	ImportAllowed *externalRef0.KeyPoolQueryParamImportAllowed `form:"import_allowed,omitempty" json:"import_allowed,omitempty"`

	// ExportAllowed Filter by whether export is allowed.
	ExportAllowed *externalRef0.KeyPoolQueryParamExportAllowed `form:"export_allowed,omitempty" json:"export_allowed,omitempty"`

	// Status Filter by the Key Pool status.
	Status *externalRef0.KeyPoolQueryParamStatuses `form:"status,omitempty" json:"status,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `name:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyPoolQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyPoolQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyPoolQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetKeysParams defines parameters for GetKeys.
type GetKeysParams struct {
	// Pool Filter by the Key Pool ID (uuid).
	Pool *externalRef0.KeyQueryParamKeyPoolIds `form:"pool,omitempty" json:"pool,omitempty"`

	// Id Filter by the Key ID.
	Id *externalRef0.KeyQueryParamIds `form:"id,omitempty" json:"id,omitempty"`

	// MinGenerateDate Filter by the Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.KeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.KeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostKeypoolJSONRequestBody defines body for PostKeypool for application/json ContentType.
type PostKeypoolJSONRequestBody = externalRef0.KeyPoolCreate

// PostKeypoolKeyPoolIDKeyJSONRequestBody defines body for PostKeypoolKeyPoolIDKey for application/json ContentType.
type PostKeypoolKeyPoolIDKeyJSONRequestBody = externalRef0.KeyGenerate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new Key Pool.
	// (POST /keypool)
	PostKeypool(c *fiber.Ctx) error
	// Get a Key Pool.
	// (GET /keypool/{keyPoolID})
	GetKeypoolKeyPoolID(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error
	// Generate a new Key in a Key Pool.
	// (POST /keypool/{keyPoolID}/key)
	PostKeypoolKeyPoolIDKey(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error
	// Get Key in Key Pool.
	// (GET /keypool/{keyPoolID}/key/{keyID})
	GetKeypoolKeyPoolIDKeyKeyID(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, keyID externalRef0.KeyId) error
	// Find Keys in Key Pool. Supports optional filtering, sorting, and paging.
	// (GET /keypool/{keyPoolID}/keys)
	GetKeypoolKeyPoolIDKeys(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params GetKeypoolKeyPoolIDKeysParams) error
	// Find Key Pools. Supports optional filtering, sorting, and paging.
	// (GET /keypools)
	GetKeypools(c *fiber.Ctx, params GetKeypoolsParams) error
	// Find Keys. Supports optional filtering, sorting, and paging.
	// (GET /keys)
	GetKeys(c *fiber.Ctx, params GetKeysParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// PostKeypool operation middleware
func (siw *ServerInterfaceWrapper) PostKeypool(c *fiber.Ctx) error {

	return siw.Handler.PostKeypool(c)
}

// GetKeypoolKeyPoolID operation middleware
func (siw *ServerInterfaceWrapper) GetKeypoolKeyPoolID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	return siw.Handler.GetKeypoolKeyPoolID(c, keyPoolID)
}

// PostKeypoolKeyPoolIDKey operation middleware
func (siw *ServerInterfaceWrapper) PostKeypoolKeyPoolIDKey(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	return siw.Handler.PostKeypoolKeyPoolIDKey(c, keyPoolID)
}

// GetKeypoolKeyPoolIDKeyKeyID operation middleware
func (siw *ServerInterfaceWrapper) GetKeypoolKeyPoolIDKeyKeyID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	// ------------- Path parameter "keyID" -------------
	var keyID externalRef0.KeyId

	err = runtime.BindStyledParameterWithOptions("simple", "keyID", c.Params("keyID"), &keyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyID: %w", err).Error())
	}

	return siw.Handler.GetKeypoolKeyPoolIDKeyKeyID(c, keyPoolID, keyID)
}

// GetKeypoolKeyPoolIDKeys operation middleware
func (siw *ServerInterfaceWrapper) GetKeypoolKeyPoolIDKeys(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeypoolKeyPoolIDKeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", query, &params.Id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Optional query parameter "min_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_generate_date", query, &params.MinGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter min_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "max_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_generate_date", query, &params.MaxGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter max_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetKeypoolKeyPoolIDKeys(c, keyPoolID, params)
}

// GetKeypools operation middleware
func (siw *ServerInterfaceWrapper) GetKeypools(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeypoolsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", query, &params.Id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", query, &params.Provider)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter provider: %w", err).Error())
	}

	// ------------- Optional query parameter "algorithm" -------------

	err = runtime.BindQueryParameter("form", true, false, "algorithm", query, &params.Algorithm)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter algorithm: %w", err).Error())
	}

	// ------------- Optional query parameter "versioning_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "versioning_allowed", query, &params.VersioningAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter versioning_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "import_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "import_allowed", query, &params.ImportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter import_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "export_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "export_allowed", query, &params.ExportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter export_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", query, &params.Status)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter status: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetKeypools(c, params)
}

// GetKeys operation middleware
func (siw *ServerInterfaceWrapper) GetKeys(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, false, "pool", query, &params.Pool)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter pool: %w", err).Error())
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", query, &params.Id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Optional query parameter "min_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_generate_date", query, &params.MinGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter min_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "max_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_generate_date", query, &params.MaxGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter max_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetKeys(c, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/keypool", wrapper.PostKeypool)

	router.Get(options.BaseURL+"/keypool/:keyPoolID", wrapper.GetKeypoolKeyPoolID)

	router.Post(options.BaseURL+"/keypool/:keyPoolID/key", wrapper.PostKeypoolKeyPoolIDKey)

	router.Get(options.BaseURL+"/keypool/:keyPoolID/key/:keyID", wrapper.GetKeypoolKeyPoolIDKeyKeyID)

	router.Get(options.BaseURL+"/keypool/:keyPoolID/keys", wrapper.GetKeypoolKeyPoolIDKeys)

	router.Get(options.BaseURL+"/keypools", wrapper.GetKeypools)

	router.Get(options.BaseURL+"/keys", wrapper.GetKeys)

}

type PostKeypoolRequestObject struct {
	Body *PostKeypoolJSONRequestBody
}

type PostKeypoolResponseObject interface {
	VisitPostKeypoolResponse(ctx *fiber.Ctx) error
}

type PostKeypool200JSONResponse externalRef0.KeyPool

func (response PostKeypool200JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostKeypool400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypool400JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypool401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypool401JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypool403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypool403JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypool404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypool404JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypool429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypool429JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypool500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypool500JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypool502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypool502JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypool503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypool503JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypool504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypool504JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
}

type GetKeypoolKeyPoolIDResponseObject interface {
	VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error
}

type GetKeypoolKeyPoolID200JSONResponse externalRef0.KeyPool

func (response GetKeypoolKeyPoolID200JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypoolKeyPoolID400JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypoolKeyPoolID401JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypoolKeyPoolID403JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypoolKeyPoolID404JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypoolKeyPoolID429JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypoolKeyPoolID500JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypoolKeyPoolID502JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypoolKeyPoolID503JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypoolKeyPoolID504JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKeyRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Body      *PostKeypoolKeyPoolIDKeyJSONRequestBody
}

type PostKeypoolKeyPoolIDKeyResponseObject interface {
	VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error
}

type PostKeypoolKeyPoolIDKey200JSONResponse externalRef0.Key

func (response PostKeypoolKeyPoolIDKey200JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypoolKeyPoolIDKey400JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypoolKeyPoolIDKey401JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypoolKeyPoolIDKey403JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypoolKeyPoolIDKey404JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypoolKeyPoolIDKey429JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypoolKeyPoolIDKey500JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypoolKeyPoolIDKey502JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypoolKeyPoolIDKey503JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypoolKeyPoolIDKey504JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyIDRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	KeyID     externalRef0.KeyId     `json:"keyID"`
}

type GetKeypoolKeyPoolIDKeyKeyIDResponseObject interface {
	VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error
}

type GetKeypoolKeyPoolIDKeyKeyID200JSONResponse externalRef0.Key

func (response GetKeypoolKeyPoolIDKeyKeyID200JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypoolKeyPoolIDKeyKeyID400JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypoolKeyPoolIDKeyKeyID401JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypoolKeyPoolIDKeyKeyID403JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypoolKeyPoolIDKeyKeyID404JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypoolKeyPoolIDKeyKeyID429JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypoolKeyPoolIDKeyKeyID500JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypoolKeyPoolIDKeyKeyID502JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypoolKeyPoolIDKeyKeyID503JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypoolKeyPoolIDKeyKeyID504JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeysRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Params    GetKeypoolKeyPoolIDKeysParams
}

type GetKeypoolKeyPoolIDKeysResponseObject interface {
	VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error
}

type GetKeypoolKeyPoolIDKeys200JSONResponse []externalRef0.Key

func (response GetKeypoolKeyPoolIDKeys200JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypoolKeyPoolIDKeys400JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypoolKeyPoolIDKeys401JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypoolKeyPoolIDKeys403JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypoolKeyPoolIDKeys404JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypoolKeyPoolIDKeys429JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypoolKeyPoolIDKeys500JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypoolKeyPoolIDKeys502JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypoolKeyPoolIDKeys503JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypoolKeyPoolIDKeys504JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeypoolsRequestObject struct {
	Params GetKeypoolsParams
}

type GetKeypoolsResponseObject interface {
	VisitGetKeypoolsResponse(ctx *fiber.Ctx) error
}

type GetKeypools200JSONResponse []externalRef0.KeyPool

func (response GetKeypools200JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypools400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypools400JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypools401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypools401JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypools403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypools403JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypools404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypools404JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypools429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypools429JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypools500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypools500JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypools502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypools502JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypools503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypools503JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypools504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypools504JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeysRequestObject struct {
	Params GetKeysParams
}

type GetKeysResponseObject interface {
	VisitGetKeysResponse(ctx *fiber.Ctx) error
}

type GetKeys200JSONResponse []externalRef0.Key

func (response GetKeys200JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeys400JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeys401JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeys403JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeys404JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeys429JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeys500JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeys502JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeys503JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeys504JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a new Key Pool.
	// (POST /keypool)
	PostKeypool(ctx context.Context, request PostKeypoolRequestObject) (PostKeypoolResponseObject, error)
	// Get a Key Pool.
	// (GET /keypool/{keyPoolID})
	GetKeypoolKeyPoolID(ctx context.Context, request GetKeypoolKeyPoolIDRequestObject) (GetKeypoolKeyPoolIDResponseObject, error)
	// Generate a new Key in a Key Pool.
	// (POST /keypool/{keyPoolID}/key)
	PostKeypoolKeyPoolIDKey(ctx context.Context, request PostKeypoolKeyPoolIDKeyRequestObject) (PostKeypoolKeyPoolIDKeyResponseObject, error)
	// Get Key in Key Pool.
	// (GET /keypool/{keyPoolID}/key/{keyID})
	GetKeypoolKeyPoolIDKeyKeyID(ctx context.Context, request GetKeypoolKeyPoolIDKeyKeyIDRequestObject) (GetKeypoolKeyPoolIDKeyKeyIDResponseObject, error)
	// Find Keys in Key Pool. Supports optional filtering, sorting, and paging.
	// (GET /keypool/{keyPoolID}/keys)
	GetKeypoolKeyPoolIDKeys(ctx context.Context, request GetKeypoolKeyPoolIDKeysRequestObject) (GetKeypoolKeyPoolIDKeysResponseObject, error)
	// Find Key Pools. Supports optional filtering, sorting, and paging.
	// (GET /keypools)
	GetKeypools(ctx context.Context, request GetKeypoolsRequestObject) (GetKeypoolsResponseObject, error)
	// Find Keys. Supports optional filtering, sorting, and paging.
	// (GET /keys)
	GetKeys(ctx context.Context, request GetKeysRequestObject) (GetKeysResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostKeypool operation middleware
func (sh *strictHandler) PostKeypool(ctx *fiber.Ctx) error {
	var request PostKeypoolRequestObject

	var body PostKeypoolJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypool(ctx.UserContext(), request.(PostKeypoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolResponseObject); ok {
		if err := validResponse.VisitPostKeypoolResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeypoolKeyPoolID operation middleware
func (sh *strictHandler) GetKeypoolKeyPoolID(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error {
	var request GetKeypoolKeyPoolIDRequestObject

	request.KeyPoolID = keyPoolID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypoolKeyPoolID(ctx.UserContext(), request.(GetKeypoolKeyPoolIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypoolKeyPoolID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolKeyPoolIDResponseObject); ok {
		if err := validResponse.VisitGetKeypoolKeyPoolIDResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypoolKeyPoolIDKey operation middleware
func (sh *strictHandler) PostKeypoolKeyPoolIDKey(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error {
	var request PostKeypoolKeyPoolIDKeyRequestObject

	request.KeyPoolID = keyPoolID

	var body PostKeypoolKeyPoolIDKeyJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypoolKeyPoolIDKey(ctx.UserContext(), request.(PostKeypoolKeyPoolIDKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypoolKeyPoolIDKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolKeyPoolIDKeyResponseObject); ok {
		if err := validResponse.VisitPostKeypoolKeyPoolIDKeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeypoolKeyPoolIDKeyKeyID operation middleware
func (sh *strictHandler) GetKeypoolKeyPoolIDKeyKeyID(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, keyID externalRef0.KeyId) error {
	var request GetKeypoolKeyPoolIDKeyKeyIDRequestObject

	request.KeyPoolID = keyPoolID
	request.KeyID = keyID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypoolKeyPoolIDKeyKeyID(ctx.UserContext(), request.(GetKeypoolKeyPoolIDKeyKeyIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypoolKeyPoolIDKeyKeyID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolKeyPoolIDKeyKeyIDResponseObject); ok {
		if err := validResponse.VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeypoolKeyPoolIDKeys operation middleware
func (sh *strictHandler) GetKeypoolKeyPoolIDKeys(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params GetKeypoolKeyPoolIDKeysParams) error {
	var request GetKeypoolKeyPoolIDKeysRequestObject

	request.KeyPoolID = keyPoolID
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypoolKeyPoolIDKeys(ctx.UserContext(), request.(GetKeypoolKeyPoolIDKeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypoolKeyPoolIDKeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolKeyPoolIDKeysResponseObject); ok {
		if err := validResponse.VisitGetKeypoolKeyPoolIDKeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeypools operation middleware
func (sh *strictHandler) GetKeypools(ctx *fiber.Ctx, params GetKeypoolsParams) error {
	var request GetKeypoolsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypools(ctx.UserContext(), request.(GetKeypoolsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypools")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolsResponseObject); ok {
		if err := validResponse.VisitGetKeypoolsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeys operation middleware
func (sh *strictHandler) GetKeys(ctx *fiber.Ctx, params GetKeysParams) error {
	var request GetKeysRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeys(ctx.UserContext(), request.(GetKeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeysResponseObject); ok {
		if err := validResponse.VisitGetKeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"QZupYAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./openapi_spec_components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
