// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "cryptoutil/internal/openapi/model"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// PostKeypoolKeyPoolIDEncryptParams defines parameters for PostKeypoolKeyPoolIDEncrypt.
type PostKeypoolKeyPoolIDEncryptParams struct {
	Iv  *externalRef0.SymmetricCipherInitializationVector        `form:"iv,omitempty" json:"iv,omitempty"`
	Aad *externalRef0.SymmetricCipherAdditionalAuthenticatedData `form:"aad,omitempty" json:"aad,omitempty"`
}

// GetKeypoolKeyPoolIDKeysParams defines parameters for GetKeypoolKeyPoolIDKeys.
type GetKeypoolKeyPoolIDKeysParams struct {
	// Id Filter by the Key ID.
	Id *externalRef0.KeyQueryParamIds `form:"id,omitempty" json:"id,omitempty"`

	// MinGenerateDate Filter by the Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.KeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.KeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetKeypoolsParams defines parameters for GetKeypools.
type GetKeypoolsParams struct {
	// Id Filter by the Key Pool ID (UUID).
	Id *externalRef0.KeyPoolQueryParamIds `form:"id,omitempty" json:"id,omitempty"`

	// Name Filter by the Key Pool name.
	Name *externalRef0.KeyPoolQueryParamNames `form:"name,omitempty" json:"name,omitempty"`

	// Provider Filter by Key Pool provider.
	Provider *externalRef0.KeyPoolQueryParamProviders `form:"provider,omitempty" json:"provider,omitempty"`

	// Algorithm Filter by cryptographic algorithm.
	Algorithm *externalRef0.KeyPoolQueryParamAlgorithms `form:"algorithm,omitempty" json:"algorithm,omitempty"`

	// VersioningAllowed Filter by whether versioning is allowed.
	VersioningAllowed *externalRef0.KeyPoolQueryParamVersioningAllowed `form:"versioning_allowed,omitempty" json:"versioning_allowed,omitempty"`

	// ImportAllowed Filter by whether import is allowed.
	ImportAllowed *externalRef0.KeyPoolQueryParamImportAllowed `form:"import_allowed,omitempty" json:"import_allowed,omitempty"`

	// ExportAllowed Filter by whether export is allowed.
	ExportAllowed *externalRef0.KeyPoolQueryParamExportAllowed `form:"export_allowed,omitempty" json:"export_allowed,omitempty"`

	// Status Filter by the Key Pool status.
	Status *externalRef0.KeyPoolQueryParamStatuses `form:"status,omitempty" json:"status,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `name:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyPoolQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyPoolQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyPoolQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetKeysParams defines parameters for GetKeys.
type GetKeysParams struct {
	// Pool Filter by the Key Pool ID (uuid).
	Pool *externalRef0.KeyQueryParamKeyPoolIds `form:"pool,omitempty" json:"pool,omitempty"`

	// Id Filter by the Key ID.
	Id *externalRef0.KeyQueryParamIds `form:"id,omitempty" json:"id,omitempty"`

	// MinGenerateDate Filter by the Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.KeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.KeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostKeypoolJSONRequestBody defines body for PostKeypool for application/json ContentType.
type PostKeypoolJSONRequestBody = externalRef0.KeyPoolCreate

// PostKeypoolKeyPoolIDDecryptTextRequestBody defines body for PostKeypoolKeyPoolIDDecrypt for text/plain ContentType.
type PostKeypoolKeyPoolIDDecryptTextRequestBody = externalRef0.DecryptRequest

// PostKeypoolKeyPoolIDEncryptTextRequestBody defines body for PostKeypoolKeyPoolIDEncrypt for text/plain ContentType.
type PostKeypoolKeyPoolIDEncryptTextRequestBody = externalRef0.EncryptRequest

// PostKeypoolKeyPoolIDKeyJSONRequestBody defines body for PostKeypoolKeyPoolIDKey for application/json ContentType.
type PostKeypoolKeyPoolIDKeyJSONRequestBody = externalRef0.KeyGenerate

// PostKeypoolKeyPoolIDSignTextRequestBody defines body for PostKeypoolKeyPoolIDSign for text/plain ContentType.
type PostKeypoolKeyPoolIDSignTextRequestBody = externalRef0.SignRequest

// PostKeypoolKeyPoolIDVerifyTextRequestBody defines body for PostKeypoolKeyPoolIDVerify for text/plain ContentType.
type PostKeypoolKeyPoolIDVerifyTextRequestBody = externalRef0.VerifyRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new Key Pool.
	// (POST /keypool)
	PostKeypool(c *fiber.Ctx) error
	// Get a Key Pool.
	// (GET /keypool/{keyPoolID})
	GetKeypoolKeyPoolID(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error
	// Decrypt ciphertext using a specific key cryptoutilPool. The key material in the key pool is identified by the JWE message kid header.
	// (POST /keypool/{keyPoolID}/decrypt)
	PostKeypoolKeyPoolIDDecrypt(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error
	// Encrypt clear text data using a specific key cryptoutilPool. The key material in the key pool is identified by the JWE message kid header.
	// (POST /keypool/{keyPoolID}/encrypt)
	PostKeypoolKeyPoolIDEncrypt(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params PostKeypoolKeyPoolIDEncryptParams) error
	// Generate a new Key in a Key Pool.
	// (POST /keypool/{keyPoolID}/key)
	PostKeypoolKeyPoolIDKey(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error
	// Get Key in Key Pool.
	// (GET /keypool/{keyPoolID}/key/{keyID})
	GetKeypoolKeyPoolIDKeyKeyID(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, keyID externalRef0.KeyId) error
	// Find Keys in Key Pool. Supports optional filtering, sorting, and paging.
	// (GET /keypool/{keyPoolID}/keys)
	GetKeypoolKeyPoolIDKeys(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params GetKeypoolKeyPoolIDKeysParams) error
	// Sign clear text using a specific key. The key material in the key pool is identified by the JWS message kid header.
	// (POST /keypool/{keyPoolID}/sign)
	PostKeypoolKeyPoolIDSign(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error
	// Verify JWS message using a specific key cryptoutilPool. The key material in the key pool is identified by the JWS message kid header.
	// (POST /keypool/{keyPoolID}/verify)
	PostKeypoolKeyPoolIDVerify(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error
	// Find Key Pools. Supports optional filtering, sorting, and paging.
	// (GET /keypools)
	GetKeypools(c *fiber.Ctx, params GetKeypoolsParams) error
	// Find Keys. Supports optional filtering, sorting, and paging.
	// (GET /keys)
	GetKeys(c *fiber.Ctx, params GetKeysParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// PostKeypool operation middleware
func (siw *ServerInterfaceWrapper) PostKeypool(c *fiber.Ctx) error {

	return siw.Handler.PostKeypool(c)
}

// GetKeypoolKeyPoolID operation middleware
func (siw *ServerInterfaceWrapper) GetKeypoolKeyPoolID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	return siw.Handler.GetKeypoolKeyPoolID(c, keyPoolID)
}

// PostKeypoolKeyPoolIDDecrypt operation middleware
func (siw *ServerInterfaceWrapper) PostKeypoolKeyPoolIDDecrypt(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	return siw.Handler.PostKeypoolKeyPoolIDDecrypt(c, keyPoolID)
}

// PostKeypoolKeyPoolIDEncrypt operation middleware
func (siw *ServerInterfaceWrapper) PostKeypoolKeyPoolIDEncrypt(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostKeypoolKeyPoolIDEncryptParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "iv" -------------

	err = runtime.BindQueryParameter("form", true, false, "iv", query, &params.Iv)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter iv: %w", err).Error())
	}

	// ------------- Optional query parameter "aad" -------------

	err = runtime.BindQueryParameter("form", true, false, "aad", query, &params.Aad)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter aad: %w", err).Error())
	}

	return siw.Handler.PostKeypoolKeyPoolIDEncrypt(c, keyPoolID, params)
}

// PostKeypoolKeyPoolIDKey operation middleware
func (siw *ServerInterfaceWrapper) PostKeypoolKeyPoolIDKey(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	return siw.Handler.PostKeypoolKeyPoolIDKey(c, keyPoolID)
}

// GetKeypoolKeyPoolIDKeyKeyID operation middleware
func (siw *ServerInterfaceWrapper) GetKeypoolKeyPoolIDKeyKeyID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	// ------------- Path parameter "keyID" -------------
	var keyID externalRef0.KeyId

	err = runtime.BindStyledParameterWithOptions("simple", "keyID", c.Params("keyID"), &keyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyID: %w", err).Error())
	}

	return siw.Handler.GetKeypoolKeyPoolIDKeyKeyID(c, keyPoolID, keyID)
}

// GetKeypoolKeyPoolIDKeys operation middleware
func (siw *ServerInterfaceWrapper) GetKeypoolKeyPoolIDKeys(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeypoolKeyPoolIDKeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", query, &params.Id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Optional query parameter "min_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_generate_date", query, &params.MinGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter min_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "max_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_generate_date", query, &params.MaxGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter max_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetKeypoolKeyPoolIDKeys(c, keyPoolID, params)
}

// PostKeypoolKeyPoolIDSign operation middleware
func (siw *ServerInterfaceWrapper) PostKeypoolKeyPoolIDSign(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	return siw.Handler.PostKeypoolKeyPoolIDSign(c, keyPoolID)
}

// PostKeypoolKeyPoolIDVerify operation middleware
func (siw *ServerInterfaceWrapper) PostKeypoolKeyPoolIDVerify(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	return siw.Handler.PostKeypoolKeyPoolIDVerify(c, keyPoolID)
}

// GetKeypools operation middleware
func (siw *ServerInterfaceWrapper) GetKeypools(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeypoolsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", query, &params.Id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", query, &params.Provider)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter provider: %w", err).Error())
	}

	// ------------- Optional query parameter "algorithm" -------------

	err = runtime.BindQueryParameter("form", true, false, "algorithm", query, &params.Algorithm)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter algorithm: %w", err).Error())
	}

	// ------------- Optional query parameter "versioning_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "versioning_allowed", query, &params.VersioningAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter versioning_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "import_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "import_allowed", query, &params.ImportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter import_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "export_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "export_allowed", query, &params.ExportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter export_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", query, &params.Status)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter status: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetKeypools(c, params)
}

// GetKeys operation middleware
func (siw *ServerInterfaceWrapper) GetKeys(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, false, "pool", query, &params.Pool)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter pool: %w", err).Error())
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", query, &params.Id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Optional query parameter "min_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_generate_date", query, &params.MinGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter min_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "max_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_generate_date", query, &params.MaxGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter max_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetKeys(c, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/keypool", wrapper.PostKeypool)

	router.Get(options.BaseURL+"/keypool/:keyPoolID", wrapper.GetKeypoolKeyPoolID)

	router.Post(options.BaseURL+"/keypool/:keyPoolID/decrypt", wrapper.PostKeypoolKeyPoolIDDecrypt)

	router.Post(options.BaseURL+"/keypool/:keyPoolID/encrypt", wrapper.PostKeypoolKeyPoolIDEncrypt)

	router.Post(options.BaseURL+"/keypool/:keyPoolID/key", wrapper.PostKeypoolKeyPoolIDKey)

	router.Get(options.BaseURL+"/keypool/:keyPoolID/key/:keyID", wrapper.GetKeypoolKeyPoolIDKeyKeyID)

	router.Get(options.BaseURL+"/keypool/:keyPoolID/keys", wrapper.GetKeypoolKeyPoolIDKeys)

	router.Post(options.BaseURL+"/keypool/:keyPoolID/sign", wrapper.PostKeypoolKeyPoolIDSign)

	router.Post(options.BaseURL+"/keypool/:keyPoolID/verify", wrapper.PostKeypoolKeyPoolIDVerify)

	router.Get(options.BaseURL+"/keypools", wrapper.GetKeypools)

	router.Get(options.BaseURL+"/keys", wrapper.GetKeys)

}

type PostKeypoolRequestObject struct {
	Body *PostKeypoolJSONRequestBody
}

type PostKeypoolResponseObject interface {
	VisitPostKeypoolResponse(ctx *fiber.Ctx) error
}

type PostKeypool200JSONResponse externalRef0.KeyPool

func (response PostKeypool200JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostKeypool400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypool400JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypool401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypool401JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypool403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypool403JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypool404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypool404JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypool429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypool429JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypool500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypool500JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypool502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypool502JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypool503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypool503JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypool504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypool504JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
}

type GetKeypoolKeyPoolIDResponseObject interface {
	VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error
}

type GetKeypoolKeyPoolID200JSONResponse externalRef0.KeyPool

func (response GetKeypoolKeyPoolID200JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypoolKeyPoolID400JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypoolKeyPoolID401JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypoolKeyPoolID403JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypoolKeyPoolID404JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypoolKeyPoolID429JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypoolKeyPoolID500JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypoolKeyPoolID502JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypoolKeyPoolID503JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypoolKeyPoolID504JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecryptRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Body      *PostKeypoolKeyPoolIDDecryptTextRequestBody
}

type PostKeypoolKeyPoolIDDecryptResponseObject interface {
	VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error
}

type PostKeypoolKeyPoolIDDecrypt200TextResponse externalRef0.DecryptResponse

func (response PostKeypoolKeyPoolIDDecrypt200TextResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostKeypoolKeyPoolIDDecrypt400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypoolKeyPoolIDDecrypt400JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypoolKeyPoolIDDecrypt401JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypoolKeyPoolIDDecrypt403JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypoolKeyPoolIDDecrypt404JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypoolKeyPoolIDDecrypt429JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypoolKeyPoolIDDecrypt500JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypoolKeyPoolIDDecrypt502JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypoolKeyPoolIDDecrypt503JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypoolKeyPoolIDDecrypt504JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncryptRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Params    PostKeypoolKeyPoolIDEncryptParams
	Body      *PostKeypoolKeyPoolIDEncryptTextRequestBody
}

type PostKeypoolKeyPoolIDEncryptResponseObject interface {
	VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error
}

type PostKeypoolKeyPoolIDEncrypt200TextResponse externalRef0.EncryptResponse

func (response PostKeypoolKeyPoolIDEncrypt200TextResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostKeypoolKeyPoolIDEncrypt400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypoolKeyPoolIDEncrypt400JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypoolKeyPoolIDEncrypt401JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypoolKeyPoolIDEncrypt403JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypoolKeyPoolIDEncrypt404JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypoolKeyPoolIDEncrypt429JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypoolKeyPoolIDEncrypt500JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypoolKeyPoolIDEncrypt502JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypoolKeyPoolIDEncrypt503JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypoolKeyPoolIDEncrypt504JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKeyRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Body      *PostKeypoolKeyPoolIDKeyJSONRequestBody
}

type PostKeypoolKeyPoolIDKeyResponseObject interface {
	VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error
}

type PostKeypoolKeyPoolIDKey200JSONResponse externalRef0.Key

func (response PostKeypoolKeyPoolIDKey200JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypoolKeyPoolIDKey400JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypoolKeyPoolIDKey401JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypoolKeyPoolIDKey403JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypoolKeyPoolIDKey404JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypoolKeyPoolIDKey429JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypoolKeyPoolIDKey500JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypoolKeyPoolIDKey502JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypoolKeyPoolIDKey503JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypoolKeyPoolIDKey504JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyIDRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	KeyID     externalRef0.KeyId     `json:"keyID"`
}

type GetKeypoolKeyPoolIDKeyKeyIDResponseObject interface {
	VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error
}

type GetKeypoolKeyPoolIDKeyKeyID200JSONResponse externalRef0.Key

func (response GetKeypoolKeyPoolIDKeyKeyID200JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypoolKeyPoolIDKeyKeyID400JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypoolKeyPoolIDKeyKeyID401JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypoolKeyPoolIDKeyKeyID403JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypoolKeyPoolIDKeyKeyID404JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypoolKeyPoolIDKeyKeyID429JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypoolKeyPoolIDKeyKeyID500JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypoolKeyPoolIDKeyKeyID502JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypoolKeyPoolIDKeyKeyID503JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypoolKeyPoolIDKeyKeyID504JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeysRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Params    GetKeypoolKeyPoolIDKeysParams
}

type GetKeypoolKeyPoolIDKeysResponseObject interface {
	VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error
}

type GetKeypoolKeyPoolIDKeys200JSONResponse []externalRef0.Key

func (response GetKeypoolKeyPoolIDKeys200JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypoolKeyPoolIDKeys400JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypoolKeyPoolIDKeys401JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypoolKeyPoolIDKeys403JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypoolKeyPoolIDKeys404JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypoolKeyPoolIDKeys429JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypoolKeyPoolIDKeys500JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypoolKeyPoolIDKeys502JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypoolKeyPoolIDKeys503JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypoolKeyPoolIDKeys504JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDSignRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Body      *PostKeypoolKeyPoolIDSignTextRequestBody
}

type PostKeypoolKeyPoolIDSignResponseObject interface {
	VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error
}

type PostKeypoolKeyPoolIDSign200TextResponse externalRef0.SignResponse

func (response PostKeypoolKeyPoolIDSign200TextResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostKeypoolKeyPoolIDSign400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypoolKeyPoolIDSign400JSONResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDSign401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypoolKeyPoolIDSign401JSONResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDSign403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypoolKeyPoolIDSign403JSONResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDSign404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypoolKeyPoolIDSign404JSONResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDSign429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypoolKeyPoolIDSign429JSONResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDSign500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypoolKeyPoolIDSign500JSONResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDSign502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypoolKeyPoolIDSign502JSONResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDSign503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypoolKeyPoolIDSign503JSONResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDSign504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypoolKeyPoolIDSign504JSONResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDVerifyRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Body      *PostKeypoolKeyPoolIDVerifyTextRequestBody
}

type PostKeypoolKeyPoolIDVerifyResponseObject interface {
	VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error
}

type PostKeypoolKeyPoolIDVerify204Response struct {
}

func (response PostKeypoolKeyPoolIDVerify204Response) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type PostKeypoolKeyPoolIDVerify400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypoolKeyPoolIDVerify400JSONResponse) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDVerify401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypoolKeyPoolIDVerify401JSONResponse) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDVerify403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypoolKeyPoolIDVerify403JSONResponse) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDVerify404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypoolKeyPoolIDVerify404JSONResponse) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDVerify429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypoolKeyPoolIDVerify429JSONResponse) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDVerify500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypoolKeyPoolIDVerify500JSONResponse) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDVerify502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypoolKeyPoolIDVerify502JSONResponse) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDVerify503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypoolKeyPoolIDVerify503JSONResponse) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDVerify504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypoolKeyPoolIDVerify504JSONResponse) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeypoolsRequestObject struct {
	Params GetKeypoolsParams
}

type GetKeypoolsResponseObject interface {
	VisitGetKeypoolsResponse(ctx *fiber.Ctx) error
}

type GetKeypools200JSONResponse []externalRef0.KeyPool

func (response GetKeypools200JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypools400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypools400JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypools401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypools401JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypools403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypools403JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypools404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypools404JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypools429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypools429JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypools500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypools500JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypools502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypools502JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypools503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypools503JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypools504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypools504JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeysRequestObject struct {
	Params GetKeysParams
}

type GetKeysResponseObject interface {
	VisitGetKeysResponse(ctx *fiber.Ctx) error
}

type GetKeys200JSONResponse []externalRef0.Key

func (response GetKeys200JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeys400JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeys401JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeys403JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeys404JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeys429JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeys500JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeys502JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeys503JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeys504JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a new Key Pool.
	// (POST /keypool)
	PostKeypool(ctx context.Context, request PostKeypoolRequestObject) (PostKeypoolResponseObject, error)
	// Get a Key Pool.
	// (GET /keypool/{keyPoolID})
	GetKeypoolKeyPoolID(ctx context.Context, request GetKeypoolKeyPoolIDRequestObject) (GetKeypoolKeyPoolIDResponseObject, error)
	// Decrypt ciphertext using a specific key cryptoutilPool. The key material in the key pool is identified by the JWE message kid header.
	// (POST /keypool/{keyPoolID}/decrypt)
	PostKeypoolKeyPoolIDDecrypt(ctx context.Context, request PostKeypoolKeyPoolIDDecryptRequestObject) (PostKeypoolKeyPoolIDDecryptResponseObject, error)
	// Encrypt clear text data using a specific key cryptoutilPool. The key material in the key pool is identified by the JWE message kid header.
	// (POST /keypool/{keyPoolID}/encrypt)
	PostKeypoolKeyPoolIDEncrypt(ctx context.Context, request PostKeypoolKeyPoolIDEncryptRequestObject) (PostKeypoolKeyPoolIDEncryptResponseObject, error)
	// Generate a new Key in a Key Pool.
	// (POST /keypool/{keyPoolID}/key)
	PostKeypoolKeyPoolIDKey(ctx context.Context, request PostKeypoolKeyPoolIDKeyRequestObject) (PostKeypoolKeyPoolIDKeyResponseObject, error)
	// Get Key in Key Pool.
	// (GET /keypool/{keyPoolID}/key/{keyID})
	GetKeypoolKeyPoolIDKeyKeyID(ctx context.Context, request GetKeypoolKeyPoolIDKeyKeyIDRequestObject) (GetKeypoolKeyPoolIDKeyKeyIDResponseObject, error)
	// Find Keys in Key Pool. Supports optional filtering, sorting, and paging.
	// (GET /keypool/{keyPoolID}/keys)
	GetKeypoolKeyPoolIDKeys(ctx context.Context, request GetKeypoolKeyPoolIDKeysRequestObject) (GetKeypoolKeyPoolIDKeysResponseObject, error)
	// Sign clear text using a specific key. The key material in the key pool is identified by the JWS message kid header.
	// (POST /keypool/{keyPoolID}/sign)
	PostKeypoolKeyPoolIDSign(ctx context.Context, request PostKeypoolKeyPoolIDSignRequestObject) (PostKeypoolKeyPoolIDSignResponseObject, error)
	// Verify JWS message using a specific key cryptoutilPool. The key material in the key pool is identified by the JWS message kid header.
	// (POST /keypool/{keyPoolID}/verify)
	PostKeypoolKeyPoolIDVerify(ctx context.Context, request PostKeypoolKeyPoolIDVerifyRequestObject) (PostKeypoolKeyPoolIDVerifyResponseObject, error)
	// Find Key Pools. Supports optional filtering, sorting, and paging.
	// (GET /keypools)
	GetKeypools(ctx context.Context, request GetKeypoolsRequestObject) (GetKeypoolsResponseObject, error)
	// Find Keys. Supports optional filtering, sorting, and paging.
	// (GET /keys)
	GetKeys(ctx context.Context, request GetKeysRequestObject) (GetKeysResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostKeypool operation middleware
func (sh *strictHandler) PostKeypool(ctx *fiber.Ctx) error {
	var request PostKeypoolRequestObject

	var body PostKeypoolJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypool(ctx.UserContext(), request.(PostKeypoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolResponseObject); ok {
		if err := validResponse.VisitPostKeypoolResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeypoolKeyPoolID operation middleware
func (sh *strictHandler) GetKeypoolKeyPoolID(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error {
	var request GetKeypoolKeyPoolIDRequestObject

	request.KeyPoolID = keyPoolID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypoolKeyPoolID(ctx.UserContext(), request.(GetKeypoolKeyPoolIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypoolKeyPoolID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolKeyPoolIDResponseObject); ok {
		if err := validResponse.VisitGetKeypoolKeyPoolIDResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypoolKeyPoolIDDecrypt operation middleware
func (sh *strictHandler) PostKeypoolKeyPoolIDDecrypt(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error {
	var request PostKeypoolKeyPoolIDDecryptRequestObject

	request.KeyPoolID = keyPoolID

	data := ctx.Request().Body()
	body := PostKeypoolKeyPoolIDDecryptTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypoolKeyPoolIDDecrypt(ctx.UserContext(), request.(PostKeypoolKeyPoolIDDecryptRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypoolKeyPoolIDDecrypt")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolKeyPoolIDDecryptResponseObject); ok {
		if err := validResponse.VisitPostKeypoolKeyPoolIDDecryptResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypoolKeyPoolIDEncrypt operation middleware
func (sh *strictHandler) PostKeypoolKeyPoolIDEncrypt(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params PostKeypoolKeyPoolIDEncryptParams) error {
	var request PostKeypoolKeyPoolIDEncryptRequestObject

	request.KeyPoolID = keyPoolID
	request.Params = params

	data := ctx.Request().Body()
	body := PostKeypoolKeyPoolIDEncryptTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypoolKeyPoolIDEncrypt(ctx.UserContext(), request.(PostKeypoolKeyPoolIDEncryptRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypoolKeyPoolIDEncrypt")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolKeyPoolIDEncryptResponseObject); ok {
		if err := validResponse.VisitPostKeypoolKeyPoolIDEncryptResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypoolKeyPoolIDKey operation middleware
func (sh *strictHandler) PostKeypoolKeyPoolIDKey(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error {
	var request PostKeypoolKeyPoolIDKeyRequestObject

	request.KeyPoolID = keyPoolID

	var body PostKeypoolKeyPoolIDKeyJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypoolKeyPoolIDKey(ctx.UserContext(), request.(PostKeypoolKeyPoolIDKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypoolKeyPoolIDKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolKeyPoolIDKeyResponseObject); ok {
		if err := validResponse.VisitPostKeypoolKeyPoolIDKeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeypoolKeyPoolIDKeyKeyID operation middleware
func (sh *strictHandler) GetKeypoolKeyPoolIDKeyKeyID(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, keyID externalRef0.KeyId) error {
	var request GetKeypoolKeyPoolIDKeyKeyIDRequestObject

	request.KeyPoolID = keyPoolID
	request.KeyID = keyID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypoolKeyPoolIDKeyKeyID(ctx.UserContext(), request.(GetKeypoolKeyPoolIDKeyKeyIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypoolKeyPoolIDKeyKeyID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolKeyPoolIDKeyKeyIDResponseObject); ok {
		if err := validResponse.VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeypoolKeyPoolIDKeys operation middleware
func (sh *strictHandler) GetKeypoolKeyPoolIDKeys(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params GetKeypoolKeyPoolIDKeysParams) error {
	var request GetKeypoolKeyPoolIDKeysRequestObject

	request.KeyPoolID = keyPoolID
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypoolKeyPoolIDKeys(ctx.UserContext(), request.(GetKeypoolKeyPoolIDKeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypoolKeyPoolIDKeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolKeyPoolIDKeysResponseObject); ok {
		if err := validResponse.VisitGetKeypoolKeyPoolIDKeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypoolKeyPoolIDSign operation middleware
func (sh *strictHandler) PostKeypoolKeyPoolIDSign(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error {
	var request PostKeypoolKeyPoolIDSignRequestObject

	request.KeyPoolID = keyPoolID

	data := ctx.Request().Body()
	body := PostKeypoolKeyPoolIDSignTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypoolKeyPoolIDSign(ctx.UserContext(), request.(PostKeypoolKeyPoolIDSignRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypoolKeyPoolIDSign")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolKeyPoolIDSignResponseObject); ok {
		if err := validResponse.VisitPostKeypoolKeyPoolIDSignResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypoolKeyPoolIDVerify operation middleware
func (sh *strictHandler) PostKeypoolKeyPoolIDVerify(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error {
	var request PostKeypoolKeyPoolIDVerifyRequestObject

	request.KeyPoolID = keyPoolID

	data := ctx.Request().Body()
	body := PostKeypoolKeyPoolIDVerifyTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypoolKeyPoolIDVerify(ctx.UserContext(), request.(PostKeypoolKeyPoolIDVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypoolKeyPoolIDVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolKeyPoolIDVerifyResponseObject); ok {
		if err := validResponse.VisitPostKeypoolKeyPoolIDVerifyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeypools operation middleware
func (sh *strictHandler) GetKeypools(ctx *fiber.Ctx, params GetKeypoolsParams) error {
	var request GetKeypoolsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypools(ctx.UserContext(), request.(GetKeypoolsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypools")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolsResponseObject); ok {
		if err := validResponse.VisitGetKeypoolsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeys operation middleware
func (sh *strictHandler) GetKeys(ctx *fiber.Ctx, params GetKeysParams) error {
	var request GetKeysRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeys(ctx.UserContext(), request.(GetKeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeysResponseObject); ok {
		if err := validResponse.VisitGetKeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4ZCTAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./openapi_spec_components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
