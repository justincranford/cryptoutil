// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "cryptoutil/internal/openapi/model"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// PostKeypoolKeyPoolIDEncryptParams defines parameters for PostKeypoolKeyPoolIDEncrypt.
type PostKeypoolKeyPoolIDEncryptParams struct {
	Iv  *externalRef0.SymmetricCipherInitializationVector        `form:"iv,omitempty" json:"iv,omitempty"`
	Aad *externalRef0.SymmetricCipherAdditionalAuthenticatedData `form:"aad,omitempty" json:"aad,omitempty"`
}

// GetKeypoolKeyPoolIDKeysParams defines parameters for GetKeypoolKeyPoolIDKeys.
type GetKeypoolKeyPoolIDKeysParams struct {
	// Id Filter by the Key ID.
	Id *externalRef0.KeyQueryParamIds `form:"id,omitempty" json:"id,omitempty"`

	// MinGenerateDate Filter by the Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.KeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.KeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetKeypoolsParams defines parameters for GetKeypools.
type GetKeypoolsParams struct {
	// Id Filter by the Key Pool ID (UUID).
	Id *externalRef0.KeyPoolQueryParamIds `form:"id,omitempty" json:"id,omitempty"`

	// Name Filter by the Key Pool name.
	Name *externalRef0.KeyPoolQueryParamNames `form:"name,omitempty" json:"name,omitempty"`

	// Provider Filter by Key Pool provider.
	Provider *externalRef0.KeyPoolQueryParamProviders `form:"provider,omitempty" json:"provider,omitempty"`

	// Algorithm Filter by cryptographic algorithm.
	Algorithm *externalRef0.KeyPoolQueryParamAlgorithms `form:"algorithm,omitempty" json:"algorithm,omitempty"`

	// VersioningAllowed Filter by whether versioning is allowed.
	VersioningAllowed *externalRef0.KeyPoolQueryParamVersioningAllowed `form:"versioning_allowed,omitempty" json:"versioning_allowed,omitempty"`

	// ImportAllowed Filter by whether import is allowed.
	ImportAllowed *externalRef0.KeyPoolQueryParamImportAllowed `form:"import_allowed,omitempty" json:"import_allowed,omitempty"`

	// ExportAllowed Filter by whether export is allowed.
	ExportAllowed *externalRef0.KeyPoolQueryParamExportAllowed `form:"export_allowed,omitempty" json:"export_allowed,omitempty"`

	// Status Filter by the Key Pool status.
	Status *externalRef0.KeyPoolQueryParamStatuses `form:"status,omitempty" json:"status,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `name:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyPoolQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyPoolQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyPoolQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetKeysParams defines parameters for GetKeys.
type GetKeysParams struct {
	// Pool Filter by the Key Pool ID (uuid).
	Pool *externalRef0.KeyQueryParamKeyPoolIds `form:"pool,omitempty" json:"pool,omitempty"`

	// Id Filter by the Key ID.
	Id *externalRef0.KeyQueryParamIds `form:"id,omitempty" json:"id,omitempty"`

	// MinGenerateDate Filter by the Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.KeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.KeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostKeypoolJSONRequestBody defines body for PostKeypool for application/json ContentType.
type PostKeypoolJSONRequestBody = externalRef0.KeyPoolCreate

// PostKeypoolKeyPoolIDDecryptTextRequestBody defines body for PostKeypoolKeyPoolIDDecrypt for text/plain ContentType.
type PostKeypoolKeyPoolIDDecryptTextRequestBody = externalRef0.SymmetricDecryptRequest

// PostKeypoolKeyPoolIDEncryptTextRequestBody defines body for PostKeypoolKeyPoolIDEncrypt for text/plain ContentType.
type PostKeypoolKeyPoolIDEncryptTextRequestBody = externalRef0.SymmetricEncryptRequest

// PostKeypoolKeyPoolIDKeyJSONRequestBody defines body for PostKeypoolKeyPoolIDKey for application/json ContentType.
type PostKeypoolKeyPoolIDKeyJSONRequestBody = externalRef0.KeyGenerate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new Key Pool.
	// (POST /keypool)
	PostKeypool(c *fiber.Ctx) error
	// Get a Key Pool.
	// (GET /keypool/{keyPoolID})
	GetKeypoolKeyPoolID(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error
	// Decrypt raw JWE ciphertext using a specific key.
	// (POST /keypool/{keyPoolID}/decrypt)
	PostKeypoolKeyPoolIDDecrypt(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error
	// Encrypt binary data using a specific key.
	// (POST /keypool/{keyPoolID}/encrypt)
	PostKeypoolKeyPoolIDEncrypt(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params PostKeypoolKeyPoolIDEncryptParams) error
	// Generate a new Key in a Key Pool.
	// (POST /keypool/{keyPoolID}/key)
	PostKeypoolKeyPoolIDKey(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error
	// Get Key in Key Pool.
	// (GET /keypool/{keyPoolID}/key/{keyID})
	GetKeypoolKeyPoolIDKeyKeyID(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, keyID externalRef0.KeyId) error
	// Find Keys in Key Pool. Supports optional filtering, sorting, and paging.
	// (GET /keypool/{keyPoolID}/keys)
	GetKeypoolKeyPoolIDKeys(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params GetKeypoolKeyPoolIDKeysParams) error
	// Find Key Pools. Supports optional filtering, sorting, and paging.
	// (GET /keypools)
	GetKeypools(c *fiber.Ctx, params GetKeypoolsParams) error
	// Find Keys. Supports optional filtering, sorting, and paging.
	// (GET /keys)
	GetKeys(c *fiber.Ctx, params GetKeysParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// PostKeypool operation middleware
func (siw *ServerInterfaceWrapper) PostKeypool(c *fiber.Ctx) error {

	return siw.Handler.PostKeypool(c)
}

// GetKeypoolKeyPoolID operation middleware
func (siw *ServerInterfaceWrapper) GetKeypoolKeyPoolID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	return siw.Handler.GetKeypoolKeyPoolID(c, keyPoolID)
}

// PostKeypoolKeyPoolIDDecrypt operation middleware
func (siw *ServerInterfaceWrapper) PostKeypoolKeyPoolIDDecrypt(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	return siw.Handler.PostKeypoolKeyPoolIDDecrypt(c, keyPoolID)
}

// PostKeypoolKeyPoolIDEncrypt operation middleware
func (siw *ServerInterfaceWrapper) PostKeypoolKeyPoolIDEncrypt(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostKeypoolKeyPoolIDEncryptParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "iv" -------------

	err = runtime.BindQueryParameter("form", true, false, "iv", query, &params.Iv)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter iv: %w", err).Error())
	}

	// ------------- Optional query parameter "aad" -------------

	err = runtime.BindQueryParameter("form", true, false, "aad", query, &params.Aad)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter aad: %w", err).Error())
	}

	return siw.Handler.PostKeypoolKeyPoolIDEncrypt(c, keyPoolID, params)
}

// PostKeypoolKeyPoolIDKey operation middleware
func (siw *ServerInterfaceWrapper) PostKeypoolKeyPoolIDKey(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	return siw.Handler.PostKeypoolKeyPoolIDKey(c, keyPoolID)
}

// GetKeypoolKeyPoolIDKeyKeyID operation middleware
func (siw *ServerInterfaceWrapper) GetKeypoolKeyPoolIDKeyKeyID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	// ------------- Path parameter "keyID" -------------
	var keyID externalRef0.KeyId

	err = runtime.BindStyledParameterWithOptions("simple", "keyID", c.Params("keyID"), &keyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyID: %w", err).Error())
	}

	return siw.Handler.GetKeypoolKeyPoolIDKeyKeyID(c, keyPoolID, keyID)
}

// GetKeypoolKeyPoolIDKeys operation middleware
func (siw *ServerInterfaceWrapper) GetKeypoolKeyPoolIDKeys(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeypoolKeyPoolIDKeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", query, &params.Id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Optional query parameter "min_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_generate_date", query, &params.MinGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter min_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "max_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_generate_date", query, &params.MaxGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter max_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetKeypoolKeyPoolIDKeys(c, keyPoolID, params)
}

// GetKeypools operation middleware
func (siw *ServerInterfaceWrapper) GetKeypools(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeypoolsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", query, &params.Id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", query, &params.Provider)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter provider: %w", err).Error())
	}

	// ------------- Optional query parameter "algorithm" -------------

	err = runtime.BindQueryParameter("form", true, false, "algorithm", query, &params.Algorithm)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter algorithm: %w", err).Error())
	}

	// ------------- Optional query parameter "versioning_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "versioning_allowed", query, &params.VersioningAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter versioning_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "import_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "import_allowed", query, &params.ImportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter import_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "export_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "export_allowed", query, &params.ExportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter export_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", query, &params.Status)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter status: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetKeypools(c, params)
}

// GetKeys operation middleware
func (siw *ServerInterfaceWrapper) GetKeys(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, false, "pool", query, &params.Pool)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter pool: %w", err).Error())
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", query, &params.Id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Optional query parameter "min_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_generate_date", query, &params.MinGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter min_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "max_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_generate_date", query, &params.MaxGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter max_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetKeys(c, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/keypool", wrapper.PostKeypool)

	router.Get(options.BaseURL+"/keypool/:keyPoolID", wrapper.GetKeypoolKeyPoolID)

	router.Post(options.BaseURL+"/keypool/:keyPoolID/decrypt", wrapper.PostKeypoolKeyPoolIDDecrypt)

	router.Post(options.BaseURL+"/keypool/:keyPoolID/encrypt", wrapper.PostKeypoolKeyPoolIDEncrypt)

	router.Post(options.BaseURL+"/keypool/:keyPoolID/key", wrapper.PostKeypoolKeyPoolIDKey)

	router.Get(options.BaseURL+"/keypool/:keyPoolID/key/:keyID", wrapper.GetKeypoolKeyPoolIDKeyKeyID)

	router.Get(options.BaseURL+"/keypool/:keyPoolID/keys", wrapper.GetKeypoolKeyPoolIDKeys)

	router.Get(options.BaseURL+"/keypools", wrapper.GetKeypools)

	router.Get(options.BaseURL+"/keys", wrapper.GetKeys)

}

type PostKeypoolRequestObject struct {
	Body *PostKeypoolJSONRequestBody
}

type PostKeypoolResponseObject interface {
	VisitPostKeypoolResponse(ctx *fiber.Ctx) error
}

type PostKeypool200JSONResponse externalRef0.KeyPool

func (response PostKeypool200JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostKeypool400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypool400JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypool401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypool401JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypool403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypool403JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypool404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypool404JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypool429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypool429JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypool500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypool500JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypool502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypool502JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypool503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypool503JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypool504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypool504JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
}

type GetKeypoolKeyPoolIDResponseObject interface {
	VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error
}

type GetKeypoolKeyPoolID200JSONResponse externalRef0.KeyPool

func (response GetKeypoolKeyPoolID200JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypoolKeyPoolID400JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypoolKeyPoolID401JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypoolKeyPoolID403JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypoolKeyPoolID404JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypoolKeyPoolID429JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypoolKeyPoolID500JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypoolKeyPoolID502JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypoolKeyPoolID503JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypoolKeyPoolID504JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecryptRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Body      *PostKeypoolKeyPoolIDDecryptTextRequestBody
}

type PostKeypoolKeyPoolIDDecryptResponseObject interface {
	VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error
}

type PostKeypoolKeyPoolIDDecrypt200TextResponse externalRef0.SymmetricDecryptResponse

func (response PostKeypoolKeyPoolIDDecrypt200TextResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostKeypoolKeyPoolIDDecrypt400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypoolKeyPoolIDDecrypt400JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypoolKeyPoolIDDecrypt401JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypoolKeyPoolIDDecrypt403JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypoolKeyPoolIDDecrypt404JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypoolKeyPoolIDDecrypt429JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypoolKeyPoolIDDecrypt500JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypoolKeyPoolIDDecrypt502JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypoolKeyPoolIDDecrypt503JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypoolKeyPoolIDDecrypt504JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncryptRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Params    PostKeypoolKeyPoolIDEncryptParams
	Body      *PostKeypoolKeyPoolIDEncryptTextRequestBody
}

type PostKeypoolKeyPoolIDEncryptResponseObject interface {
	VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error
}

type PostKeypoolKeyPoolIDEncrypt200TextResponse externalRef0.SymmetricEncryptResponse

func (response PostKeypoolKeyPoolIDEncrypt200TextResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostKeypoolKeyPoolIDEncrypt400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypoolKeyPoolIDEncrypt400JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypoolKeyPoolIDEncrypt401JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypoolKeyPoolIDEncrypt403JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypoolKeyPoolIDEncrypt404JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypoolKeyPoolIDEncrypt429JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypoolKeyPoolIDEncrypt500JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypoolKeyPoolIDEncrypt502JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypoolKeyPoolIDEncrypt503JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypoolKeyPoolIDEncrypt504JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKeyRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Body      *PostKeypoolKeyPoolIDKeyJSONRequestBody
}

type PostKeypoolKeyPoolIDKeyResponseObject interface {
	VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error
}

type PostKeypoolKeyPoolIDKey200JSONResponse externalRef0.Key

func (response PostKeypoolKeyPoolIDKey200JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypoolKeyPoolIDKey400JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypoolKeyPoolIDKey401JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypoolKeyPoolIDKey403JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypoolKeyPoolIDKey404JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypoolKeyPoolIDKey429JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypoolKeyPoolIDKey500JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypoolKeyPoolIDKey502JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypoolKeyPoolIDKey503JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypoolKeyPoolIDKey504JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyIDRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	KeyID     externalRef0.KeyId     `json:"keyID"`
}

type GetKeypoolKeyPoolIDKeyKeyIDResponseObject interface {
	VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error
}

type GetKeypoolKeyPoolIDKeyKeyID200JSONResponse externalRef0.Key

func (response GetKeypoolKeyPoolIDKeyKeyID200JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypoolKeyPoolIDKeyKeyID400JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypoolKeyPoolIDKeyKeyID401JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypoolKeyPoolIDKeyKeyID403JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypoolKeyPoolIDKeyKeyID404JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypoolKeyPoolIDKeyKeyID429JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypoolKeyPoolIDKeyKeyID500JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypoolKeyPoolIDKeyKeyID502JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypoolKeyPoolIDKeyKeyID503JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypoolKeyPoolIDKeyKeyID504JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeysRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Params    GetKeypoolKeyPoolIDKeysParams
}

type GetKeypoolKeyPoolIDKeysResponseObject interface {
	VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error
}

type GetKeypoolKeyPoolIDKeys200JSONResponse []externalRef0.Key

func (response GetKeypoolKeyPoolIDKeys200JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypoolKeyPoolIDKeys400JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypoolKeyPoolIDKeys401JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypoolKeyPoolIDKeys403JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypoolKeyPoolIDKeys404JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypoolKeyPoolIDKeys429JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypoolKeyPoolIDKeys500JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypoolKeyPoolIDKeys502JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypoolKeyPoolIDKeys503JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypoolKeyPoolIDKeys504JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeypoolsRequestObject struct {
	Params GetKeypoolsParams
}

type GetKeypoolsResponseObject interface {
	VisitGetKeypoolsResponse(ctx *fiber.Ctx) error
}

type GetKeypools200JSONResponse []externalRef0.KeyPool

func (response GetKeypools200JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypools400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypools400JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypools401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypools401JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypools403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypools403JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypools404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypools404JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypools429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypools429JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypools500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypools500JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypools502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypools502JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypools503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypools503JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypools504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypools504JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeysRequestObject struct {
	Params GetKeysParams
}

type GetKeysResponseObject interface {
	VisitGetKeysResponse(ctx *fiber.Ctx) error
}

type GetKeys200JSONResponse []externalRef0.Key

func (response GetKeys200JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeys400JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeys401JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeys403JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeys404JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeys429JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeys500JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeys502JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeys503JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeys504JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a new Key Pool.
	// (POST /keypool)
	PostKeypool(ctx context.Context, request PostKeypoolRequestObject) (PostKeypoolResponseObject, error)
	// Get a Key Pool.
	// (GET /keypool/{keyPoolID})
	GetKeypoolKeyPoolID(ctx context.Context, request GetKeypoolKeyPoolIDRequestObject) (GetKeypoolKeyPoolIDResponseObject, error)
	// Decrypt raw JWE ciphertext using a specific key.
	// (POST /keypool/{keyPoolID}/decrypt)
	PostKeypoolKeyPoolIDDecrypt(ctx context.Context, request PostKeypoolKeyPoolIDDecryptRequestObject) (PostKeypoolKeyPoolIDDecryptResponseObject, error)
	// Encrypt binary data using a specific key.
	// (POST /keypool/{keyPoolID}/encrypt)
	PostKeypoolKeyPoolIDEncrypt(ctx context.Context, request PostKeypoolKeyPoolIDEncryptRequestObject) (PostKeypoolKeyPoolIDEncryptResponseObject, error)
	// Generate a new Key in a Key Pool.
	// (POST /keypool/{keyPoolID}/key)
	PostKeypoolKeyPoolIDKey(ctx context.Context, request PostKeypoolKeyPoolIDKeyRequestObject) (PostKeypoolKeyPoolIDKeyResponseObject, error)
	// Get Key in Key Pool.
	// (GET /keypool/{keyPoolID}/key/{keyID})
	GetKeypoolKeyPoolIDKeyKeyID(ctx context.Context, request GetKeypoolKeyPoolIDKeyKeyIDRequestObject) (GetKeypoolKeyPoolIDKeyKeyIDResponseObject, error)
	// Find Keys in Key Pool. Supports optional filtering, sorting, and paging.
	// (GET /keypool/{keyPoolID}/keys)
	GetKeypoolKeyPoolIDKeys(ctx context.Context, request GetKeypoolKeyPoolIDKeysRequestObject) (GetKeypoolKeyPoolIDKeysResponseObject, error)
	// Find Key Pools. Supports optional filtering, sorting, and paging.
	// (GET /keypools)
	GetKeypools(ctx context.Context, request GetKeypoolsRequestObject) (GetKeypoolsResponseObject, error)
	// Find Keys. Supports optional filtering, sorting, and paging.
	// (GET /keys)
	GetKeys(ctx context.Context, request GetKeysRequestObject) (GetKeysResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostKeypool operation middleware
func (sh *strictHandler) PostKeypool(ctx *fiber.Ctx) error {
	var request PostKeypoolRequestObject

	var body PostKeypoolJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypool(ctx.UserContext(), request.(PostKeypoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolResponseObject); ok {
		if err := validResponse.VisitPostKeypoolResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeypoolKeyPoolID operation middleware
func (sh *strictHandler) GetKeypoolKeyPoolID(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error {
	var request GetKeypoolKeyPoolIDRequestObject

	request.KeyPoolID = keyPoolID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypoolKeyPoolID(ctx.UserContext(), request.(GetKeypoolKeyPoolIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypoolKeyPoolID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolKeyPoolIDResponseObject); ok {
		if err := validResponse.VisitGetKeypoolKeyPoolIDResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypoolKeyPoolIDDecrypt operation middleware
func (sh *strictHandler) PostKeypoolKeyPoolIDDecrypt(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error {
	var request PostKeypoolKeyPoolIDDecryptRequestObject

	request.KeyPoolID = keyPoolID

	data := ctx.Request().Body()
	body := PostKeypoolKeyPoolIDDecryptTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypoolKeyPoolIDDecrypt(ctx.UserContext(), request.(PostKeypoolKeyPoolIDDecryptRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypoolKeyPoolIDDecrypt")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolKeyPoolIDDecryptResponseObject); ok {
		if err := validResponse.VisitPostKeypoolKeyPoolIDDecryptResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypoolKeyPoolIDEncrypt operation middleware
func (sh *strictHandler) PostKeypoolKeyPoolIDEncrypt(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params PostKeypoolKeyPoolIDEncryptParams) error {
	var request PostKeypoolKeyPoolIDEncryptRequestObject

	request.KeyPoolID = keyPoolID
	request.Params = params

	data := ctx.Request().Body()
	body := PostKeypoolKeyPoolIDEncryptTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypoolKeyPoolIDEncrypt(ctx.UserContext(), request.(PostKeypoolKeyPoolIDEncryptRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypoolKeyPoolIDEncrypt")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolKeyPoolIDEncryptResponseObject); ok {
		if err := validResponse.VisitPostKeypoolKeyPoolIDEncryptResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypoolKeyPoolIDKey operation middleware
func (sh *strictHandler) PostKeypoolKeyPoolIDKey(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error {
	var request PostKeypoolKeyPoolIDKeyRequestObject

	request.KeyPoolID = keyPoolID

	var body PostKeypoolKeyPoolIDKeyJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypoolKeyPoolIDKey(ctx.UserContext(), request.(PostKeypoolKeyPoolIDKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypoolKeyPoolIDKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolKeyPoolIDKeyResponseObject); ok {
		if err := validResponse.VisitPostKeypoolKeyPoolIDKeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeypoolKeyPoolIDKeyKeyID operation middleware
func (sh *strictHandler) GetKeypoolKeyPoolIDKeyKeyID(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, keyID externalRef0.KeyId) error {
	var request GetKeypoolKeyPoolIDKeyKeyIDRequestObject

	request.KeyPoolID = keyPoolID
	request.KeyID = keyID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypoolKeyPoolIDKeyKeyID(ctx.UserContext(), request.(GetKeypoolKeyPoolIDKeyKeyIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypoolKeyPoolIDKeyKeyID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolKeyPoolIDKeyKeyIDResponseObject); ok {
		if err := validResponse.VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeypoolKeyPoolIDKeys operation middleware
func (sh *strictHandler) GetKeypoolKeyPoolIDKeys(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params GetKeypoolKeyPoolIDKeysParams) error {
	var request GetKeypoolKeyPoolIDKeysRequestObject

	request.KeyPoolID = keyPoolID
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypoolKeyPoolIDKeys(ctx.UserContext(), request.(GetKeypoolKeyPoolIDKeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypoolKeyPoolIDKeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolKeyPoolIDKeysResponseObject); ok {
		if err := validResponse.VisitGetKeypoolKeyPoolIDKeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeypools operation middleware
func (sh *strictHandler) GetKeypools(ctx *fiber.Ctx, params GetKeypoolsParams) error {
	var request GetKeypoolsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypools(ctx.UserContext(), request.(GetKeypoolsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypools")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolsResponseObject); ok {
		if err := validResponse.VisitGetKeypoolsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeys operation middleware
func (sh *strictHandler) GetKeys(ctx *fiber.Ctx, params GetKeysParams) error {
	var request GetKeysRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeys(ctx.UserContext(), request.(GetKeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeysResponseObject); ok {
		if err := validResponse.VisitGetKeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./openapi_spec_components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
