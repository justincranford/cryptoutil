// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "cryptoutil/internal/openapi/model"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// Defines values for GetKeypoolParamsSort.
const (
	GetKeypoolParamsSortAlgorithm             GetKeypoolParamsSort = "algorithm"
	GetKeypoolParamsSortAlgorithmASC          GetKeypoolParamsSort = "algorithm:ASC"
	GetKeypoolParamsSortAlgorithmDESC         GetKeypoolParamsSort = "algorithm:DESC"
	GetKeypoolParamsSortExportAllowed         GetKeypoolParamsSort = "export_allowed"
	GetKeypoolParamsSortExportAllowedASC      GetKeypoolParamsSort = "export_allowed:ASC"
	GetKeypoolParamsSortExportAllowedDESC     GetKeypoolParamsSort = "export_allowed:DESC"
	GetKeypoolParamsSortId                    GetKeypoolParamsSort = "id"
	GetKeypoolParamsSortIdASC                 GetKeypoolParamsSort = "id:ASC"
	GetKeypoolParamsSortIdDESC                GetKeypoolParamsSort = "id:DESC"
	GetKeypoolParamsSortImportAllowed         GetKeypoolParamsSort = "import_allowed"
	GetKeypoolParamsSortImportAllowedASC      GetKeypoolParamsSort = "import_allowed:ASC"
	GetKeypoolParamsSortImportAllowedDESC     GetKeypoolParamsSort = "import_allowed:DESC"
	GetKeypoolParamsSortName                  GetKeypoolParamsSort = "name"
	GetKeypoolParamsSortNameASC               GetKeypoolParamsSort = "name:ASC"
	GetKeypoolParamsSortNameDESC              GetKeypoolParamsSort = "name:DESC"
	GetKeypoolParamsSortProvider              GetKeypoolParamsSort = "provider"
	GetKeypoolParamsSortProviderASC           GetKeypoolParamsSort = "provider:ASC"
	GetKeypoolParamsSortProviderDESC          GetKeypoolParamsSort = "provider:DESC"
	GetKeypoolParamsSortStatus                GetKeypoolParamsSort = "status"
	GetKeypoolParamsSortStatusASC             GetKeypoolParamsSort = "status:ASC"
	GetKeypoolParamsSortStatusDESC            GetKeypoolParamsSort = "status:DESC"
	GetKeypoolParamsSortVersioningAllowed     GetKeypoolParamsSort = "versioning_allowed"
	GetKeypoolParamsSortVersioningAllowedASC  GetKeypoolParamsSort = "versioning_allowed:ASC"
	GetKeypoolParamsSortVersioningAllowedDESC GetKeypoolParamsSort = "versioning_allowed:DESC"
)

// Defines values for GetKeypoolKeyPoolIDKeyParamsSort.
const (
	GetKeypoolKeyPoolIDKeyParamsSortGenerateDate     GetKeypoolKeyPoolIDKeyParamsSort = "generate_date"
	GetKeypoolKeyPoolIDKeyParamsSortGenerateDateASC  GetKeypoolKeyPoolIDKeyParamsSort = "generate_date:ASC"
	GetKeypoolKeyPoolIDKeyParamsSortGenerateDateDESC GetKeypoolKeyPoolIDKeyParamsSort = "generate_date:DESC"
	GetKeypoolKeyPoolIDKeyParamsSortId               GetKeypoolKeyPoolIDKeyParamsSort = "id"
	GetKeypoolKeyPoolIDKeyParamsSortIdASC            GetKeypoolKeyPoolIDKeyParamsSort = "id:ASC"
	GetKeypoolKeyPoolIDKeyParamsSortIdDESC           GetKeypoolKeyPoolIDKeyParamsSort = "id:DESC"
	GetKeypoolKeyPoolIDKeyParamsSortPool             GetKeypoolKeyPoolIDKeyParamsSort = "pool"
	GetKeypoolKeyPoolIDKeyParamsSortPoolASC          GetKeypoolKeyPoolIDKeyParamsSort = "pool:ASC"
	GetKeypoolKeyPoolIDKeyParamsSortPoolDESC         GetKeypoolKeyPoolIDKeyParamsSort = "pool:DESC"
)

// GetKeypoolParams defines parameters for GetKeypool.
type GetKeypoolParams struct {
	Page *externalRef0.PageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.PageSize   `form:"size,omitempty" json:"size,omitempty"`

	// Id Filter by the Key Pool ID (UUID).
	Id *externalRef0.KeyPoolFilterId `form:"id,omitempty" json:"id,omitempty"`

	// Name Filter by the Key Pool name.
	Name *externalRef0.KeyPoolFilterName `form:"name,omitempty" json:"name,omitempty"`

	// Provider Filter by Key Pool provider.
	Provider *externalRef0.KeyPoolFilterProvider `form:"provider,omitempty" json:"provider,omitempty"`

	// Algorithm Filter by cryptographic algorithm.
	Algorithm *externalRef0.KeyPoolFilterAlgorithm `form:"algorithm,omitempty" json:"algorithm,omitempty"`

	// VersioningAllowed Filter by whether versioning is allowed.
	VersioningAllowed *externalRef0.KeyPoolFilterIsVersioningAllowed `form:"versioning_allowed,omitempty" json:"versioning_allowed,omitempty"`

	// ImportAllowed Filter by whether import is allowed.
	ImportAllowed *externalRef0.KeyPoolFilterIsImportAllowed `form:"import_allowed,omitempty" json:"import_allowed,omitempty"`

	// ExportAllowed Filter by whether export is allowed.
	ExportAllowed *externalRef0.KeyPoolFilterIsExportAllowed `form:"export_allowed,omitempty" json:"export_allowed,omitempty"`

	// Status Filter by the Key Pool status.
	Status *externalRef0.KeyPoolFilterStatus `form:"status,omitempty" json:"status,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `name:asc`). Repeat parameter for multiple sort fields.
	Sort *GetKeypoolParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetKeypoolParamsSort defines parameters for GetKeypool.
type GetKeypoolParamsSort string

// GetKeypoolKeyPoolIDKeyParams defines parameters for GetKeypoolKeyPoolIDKey.
type GetKeypoolKeyPoolIDKeyParams struct {
	Page *externalRef0.PageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.PageSize   `form:"size,omitempty" json:"size,omitempty"`

	// Pool Filter by the Key Pool ID (uuid).
	Pool *externalRef0.KeyFilterKeyPoolId `form:"pool,omitempty" json:"pool,omitempty"`

	// Id Filter by the Key ID.
	Id *externalRef0.KeyFilterId `form:"id,omitempty" json:"id,omitempty"`

	// MinGenerateDate Filter by the Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.KeyFilterMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.KeyFilterMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `id:asc`). Repeat parameter for multiple sort fields.
	Sort *GetKeypoolKeyPoolIDKeyParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetKeypoolKeyPoolIDKeyParamsSort defines parameters for GetKeypoolKeyPoolIDKey.
type GetKeypoolKeyPoolIDKeyParamsSort string

// PostKeypoolJSONRequestBody defines body for PostKeypool for application/json ContentType.
type PostKeypoolJSONRequestBody = externalRef0.KeyPoolCreate

// PostKeypoolKeyPoolIDKeyJSONRequestBody defines body for PostKeypoolKeyPoolIDKey for application/json ContentType.
type PostKeypoolKeyPoolIDKeyJSONRequestBody = externalRef0.KeyGenerate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all Key Pools. Supports optional filtering, sorting, and paging.
	// (GET /keypool)
	GetKeypool(c *fiber.Ctx, params GetKeypoolParams) error
	// Create a new Key Pool.
	// (POST /keypool)
	PostKeypool(c *fiber.Ctx) error
	// List all Keys in Key Pool. Supports optional filtering, sorting, and paging.
	// (GET /keypool/{keyPoolID}/key)
	GetKeypoolKeyPoolIDKey(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params GetKeypoolKeyPoolIDKeyParams) error
	// Generate a new Key in a Key Pool.
	// (POST /keypool/{keyPoolID}/key)
	PostKeypoolKeyPoolIDKey(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetKeypool operation middleware
func (siw *ServerInterfaceWrapper) GetKeypool(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeypoolParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", query, &params.Id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", query, &params.Provider)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter provider: %w", err).Error())
	}

	// ------------- Optional query parameter "algorithm" -------------

	err = runtime.BindQueryParameter("form", true, false, "algorithm", query, &params.Algorithm)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter algorithm: %w", err).Error())
	}

	// ------------- Optional query parameter "versioning_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "versioning_allowed", query, &params.VersioningAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter versioning_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "import_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "import_allowed", query, &params.ImportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter import_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "export_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "export_allowed", query, &params.ExportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter export_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", query, &params.Status)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter status: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	return siw.Handler.GetKeypool(c, params)
}

// PostKeypool operation middleware
func (siw *ServerInterfaceWrapper) PostKeypool(c *fiber.Ctx) error {

	return siw.Handler.PostKeypool(c)
}

// GetKeypoolKeyPoolIDKey operation middleware
func (siw *ServerInterfaceWrapper) GetKeypoolKeyPoolIDKey(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeypoolKeyPoolIDKeyParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	// ------------- Optional query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, false, "pool", query, &params.Pool)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter pool: %w", err).Error())
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", query, &params.Id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Optional query parameter "min_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_generate_date", query, &params.MinGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter min_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "max_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_generate_date", query, &params.MaxGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter max_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	return siw.Handler.GetKeypoolKeyPoolIDKey(c, keyPoolID, params)
}

// PostKeypoolKeyPoolIDKey operation middleware
func (siw *ServerInterfaceWrapper) PostKeypoolKeyPoolIDKey(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	return siw.Handler.PostKeypoolKeyPoolIDKey(c, keyPoolID)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/keypool", wrapper.GetKeypool)

	router.Post(options.BaseURL+"/keypool", wrapper.PostKeypool)

	router.Get(options.BaseURL+"/keypool/:keyPoolID/key", wrapper.GetKeypoolKeyPoolIDKey)

	router.Post(options.BaseURL+"/keypool/:keyPoolID/key", wrapper.PostKeypoolKeyPoolIDKey)

}

type GetKeypoolRequestObject struct {
	Params GetKeypoolParams
}

type GetKeypoolResponseObject interface {
	VisitGetKeypoolResponse(ctx *fiber.Ctx) error
}

type GetKeypool200JSONResponse []externalRef0.KeyPool

func (response GetKeypool200JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypool400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypool400JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypool401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypool401JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypool403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypool403JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypool404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypool404JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypool429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypool429JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypool500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypool500JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypool502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypool502JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypool503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypool503JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypool504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypool504JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolRequestObject struct {
	Body *PostKeypoolJSONRequestBody
}

type PostKeypoolResponseObject interface {
	VisitPostKeypoolResponse(ctx *fiber.Ctx) error
}

type PostKeypool200JSONResponse externalRef0.KeyPool

func (response PostKeypool200JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostKeypool400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypool400JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypool401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypool401JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypool403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypool403JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypool404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypool404JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypool429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypool429JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypool500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypool500JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypool502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypool502JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypool503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypool503JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypool504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypool504JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Params    GetKeypoolKeyPoolIDKeyParams
}

type GetKeypoolKeyPoolIDKeyResponseObject interface {
	VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error
}

type GetKeypoolKeyPoolIDKey200JSONResponse []externalRef0.Key

func (response GetKeypoolKeyPoolIDKey200JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypoolKeyPoolIDKey400JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypoolKeyPoolIDKey401JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypoolKeyPoolIDKey403JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypoolKeyPoolIDKey404JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypoolKeyPoolIDKey429JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypoolKeyPoolIDKey500JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypoolKeyPoolIDKey502JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypoolKeyPoolIDKey503JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypoolKeyPoolIDKey504JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKeyRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Body      *PostKeypoolKeyPoolIDKeyJSONRequestBody
}

type PostKeypoolKeyPoolIDKeyResponseObject interface {
	VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error
}

type PostKeypoolKeyPoolIDKey200JSONResponse externalRef0.Key

func (response PostKeypoolKeyPoolIDKey200JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypoolKeyPoolIDKey400JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypoolKeyPoolIDKey401JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypoolKeyPoolIDKey403JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypoolKeyPoolIDKey404JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypoolKeyPoolIDKey429JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypoolKeyPoolIDKey500JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypoolKeyPoolIDKey502JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypoolKeyPoolIDKey503JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypoolKeyPoolIDKey504JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all Key Pools. Supports optional filtering, sorting, and paging.
	// (GET /keypool)
	GetKeypool(ctx context.Context, request GetKeypoolRequestObject) (GetKeypoolResponseObject, error)
	// Create a new Key Pool.
	// (POST /keypool)
	PostKeypool(ctx context.Context, request PostKeypoolRequestObject) (PostKeypoolResponseObject, error)
	// List all Keys in Key Pool. Supports optional filtering, sorting, and paging.
	// (GET /keypool/{keyPoolID}/key)
	GetKeypoolKeyPoolIDKey(ctx context.Context, request GetKeypoolKeyPoolIDKeyRequestObject) (GetKeypoolKeyPoolIDKeyResponseObject, error)
	// Generate a new Key in a Key Pool.
	// (POST /keypool/{keyPoolID}/key)
	PostKeypoolKeyPoolIDKey(ctx context.Context, request PostKeypoolKeyPoolIDKeyRequestObject) (PostKeypoolKeyPoolIDKeyResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetKeypool operation middleware
func (sh *strictHandler) GetKeypool(ctx *fiber.Ctx, params GetKeypoolParams) error {
	var request GetKeypoolRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypool(ctx.UserContext(), request.(GetKeypoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolResponseObject); ok {
		if err := validResponse.VisitGetKeypoolResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypool operation middleware
func (sh *strictHandler) PostKeypool(ctx *fiber.Ctx) error {
	var request PostKeypoolRequestObject

	var body PostKeypoolJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypool(ctx.UserContext(), request.(PostKeypoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolResponseObject); ok {
		if err := validResponse.VisitPostKeypoolResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeypoolKeyPoolIDKey operation middleware
func (sh *strictHandler) GetKeypoolKeyPoolIDKey(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params GetKeypoolKeyPoolIDKeyParams) error {
	var request GetKeypoolKeyPoolIDKeyRequestObject

	request.KeyPoolID = keyPoolID
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypoolKeyPoolIDKey(ctx.UserContext(), request.(GetKeypoolKeyPoolIDKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypoolKeyPoolIDKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolKeyPoolIDKeyResponseObject); ok {
		if err := validResponse.VisitGetKeypoolKeyPoolIDKeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypoolKeyPoolIDKey operation middleware
func (sh *strictHandler) PostKeypoolKeyPoolIDKey(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error {
	var request PostKeypoolKeyPoolIDKeyRequestObject

	request.KeyPoolID = keyPoolID

	var body PostKeypoolKeyPoolIDKeyJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypoolKeyPoolIDKey(ctx.UserContext(), request.(PostKeypoolKeyPoolIDKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypoolKeyPoolIDKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolKeyPoolIDKeyResponseObject); ok {
		if err := validResponse.VisitPostKeypoolKeyPoolIDKeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xb3W/jNhL/VwjePewC3kT+KjZ+y67Tni9tNmiSA3q9IMtIY5utRKoklay68P9+IEV9",
	"0JZs2dYWwV1eEokihzP8cT7IGX/FPo9izoApiSdfcUwEiUCBMG88BkZi+iBj8B/Kjg+XkH5PQwViFuhu",
	"AUhf0FhRzvAEZ1/QY4rUEtAlpGg2PcE9TPXHPxIQKe5hRiLAE0wD3MPSX0JENKG/C5jjCf7baTnXafZV",
	"nm7hZRbg1aq3m9tLSK85D9sxrXui2RS9SRIavG0SIOY87EIEy1crMX4iX2iURD8AA0EUTImCNgJF2TC0",
	"sONQoP+8ocwPE0mfoFHGiHx5yAc96EFdCOxw305syg4SOxt2gNiUvQSxb7hQ17lWbgp8E4NP5ymSXCjK",
	"FohI9HlOIQyuSASTgArwdc/P6A2cLE566DMNJkT6n9+eoJ8hBqJQofJozgWKklDROARDEBlKsmmFdBdn",
	"UYAlEZ78mmuF/jc5v/mYP04vzLNRehrYLzTI29cX23m3vd02M/C+h1UaG36UoGyxa1m1qmVLex4uuKBq",
	"GW3bR75IY8UXgsRL6iOSD2lak6JDV1ahZLK1XHsauLu72fTtt7XQ7cxbRQJ58SXmQp2HIX+GreI8L0Et",
	"QSAwAxCViGSDmiTKOj7YXp1Jt8bxHqLOoj1FpVFLUbOO3YvqcryHqP8CISlnlC32EPepGNRC5LJz92Jv",
	"ct9a9CvDXUul1KI0yWf+dSSRYaq1CNeCP9GgzgeVYhQixLZzY9yUE+tIlIK51uJ07Ve1YN/eszb5Trst",
	"DBPnRUv+tbLa+WPul/NX27Pqvopn27d8t51rdW2z0Q6v+ZAHBOtmym3IhXUb7dgNa+422LFrjXasVEQl",
	"sniwfe3LkbHFTUa7rcpnkzZuh4LRLnTFsrZNlGuygKskesw0o1aByeJ4O1SZZhc3N/RPaOJF6m9d8GIm",
	"WWlWBMiYMwlbj8H/uL29HnneBxL8DH8kIJXu7HOmgJlHEsch9YlG/vQ3qeH/WmGShOGnOZ78ehi7eu4L",
	"IbjAq95XrcYxCEUzfsG064cvJIpDvUQfSIByJjf2dA9HIKUG1BlzuwQksjHI50kYIMYVegSUsACEVJwH",
	"iAv0TCSKqJTaSuruVEBQmj6zpzfmk4V2FNONPK+H7Rk1f8uObvbNEqFMwcJuGNvEH38DX+HVvYHO1beq",
	"4Fu2WAZl/46RRC25oH9mocnLBNPhsi2a54laAlNWBDQnNASDXyJBoICDNPAuyROgGIRBlDNpXJc2VQFI",
	"gywxfq89qn0H1b6Dav9QVJ0V2Anr8HsuHmkQAHu5mJYsHgioTHwfIIAAPSbKIEbKDhDUwUx8H6REipvu",
	"AiRPhA/toR060A4daIeHQlsuxE5cR1dcfc8T9oJV9YorlLF4gNWFoADFNcBzTbE9TiMHp5GD0+hQnErJ",
	"duE0OLvl/CfCUmuH5cuF65ZzpDlFBattYfuFJ5lSSWAKKc5RpOlYJCWiDBG0oE/AEIl4whTic6Ro1F7d",
	"BmdVGM1bAaN+OwzGTYl3wDn2vBlTIBgJb0A8gbjIl/FlQpozizJuUTa0tZFlKGHwJQZfa6Mhj7jvJ0K7",
	"Qs6M4ZSGcFscx06cM3binPHhcU69mDuxHHwgwQ9EwTNJX3bwmjO5jxnNgEECfKBPOnRhiLInElJjV018",
	"j+aCRwbFJJZKAIn2hnPgwDlw4BwcE7bmIu8Ecagxpz7cMfJEaEgeQ3i5YFpeUZXZA0ClEhktZCpMUcI0",
	"GR3ILAkL9FPl6BIk5ouCKOaCiBTxJxAhJyb4jYgGhhHWPu4ZO3HP2Il7xofHPXXrshP5kd0jtzQCnrzg",
	"86flE+WMHoB4QLP4x6ozIsZ9hmmXujxykB05yB4cKa3LrnvY5d11u1D41oYFdifSI+xNEspX04jwI7CF",
	"WuJJf/uyu9SmoLIzYub1WhOUDTdfVe58HhhKxVqfnbU47ue3C3jya3klBtaf5/zdb2Cy9cZuc3HdNGRX",
	"qV6T9jyuxCHLonaThdtniXJBjNEIAqrxJOF1ZdHmJJRwGNH6NP7s5hN6/53XR3e3H42aS0WiWIfMl5Dm",
	"qXx7DVEai4E3GL/zhu/6o9v+YOJ5E8/7N+7hORcRUXiCNaDvNLU6e7B98Tc4vGP0jwTy3JQJ5u19ron0",
	"84tdh8Gqp6i5+th5s7y5V0k1g91NknnNeh1FdlqhtNq4q+844XqkhuXKsZGO6DhZmt9ad5C5qyR2usqe",
	"Vc13BymG2hzRt0nD7mN83C2/odsf60s+iqtQR7ltYu784ubdYPwd7pmn/tkgfxq81y6pcqIsOu5jgvR0",
	"HwVYY/lqBLYYgf9r7f3L1K0ai9nkc3XL3O+vkFN3x60Ho8WbUcMGD4tvl1SWWVUqUSIh0Mc/YKaQy+jv",
	"NUkFD0M0JYo8Emkj0TymHYzHO2Pc3X6kKWC4u5tNayQoYpQkocEBtmFnwdSMBSYRIBGdr6Wek1iPlLaC",
	"yllPN7B75DwEwlqxs6OoqQU7tsrpzYdfPl2+7YirFvVHLTgrlcxhS4nkEK4aSoMEBRaEqSkG2rrlt+/m",
	"74bHbubmup/8SzX6NSsVEUYWEAFT5gROs8uV3FXmV5WuXyxa9+ewqdYia1/nrsqKr12qnqTwG1leFPdw",
	"DCzQZjRrrzTk58NqNWoxiviKPhljSCV5dCkFEIKCh2ciH5omq3RpnL/Sp5it5tt2BjY5l4oIBYHtpE0S",
	"ZVQuyxYHrcrCtUbLLSpZ20pkAYiZj8hwYmquFPKcvV69K/f2OUBVK0gaJ3amGoydq6DKxHV3ujruYHPe",
	"FEqiny9ubtH59ew/Jr1LVRYJXs/Ksig8wd6Jd9KvSIEneHjinQw1gkQtzQY//R3S/BZgAWpzwh+pVIiE",
	"YbHd5Qm6yQ0Xj7OzO5qbKiTKFr28wK2HCAtQTBbWqukA0xyxtS/DP4C6tBP3nN+INNwell1a1f70jqKS",
	"Ve0cTmO9drorUjbM64ZYJcjrhmA12u9o6epCxc5orwfiXdFdP0B0Q7c4AHdEzilWXd2vFagNPG+vq3+q",
	"IDr2iI/LMzcRgqS45ub7HP3z5tMVMt+1G/Z6qN/L0i4srVgoTWuUyVDHUSHraftKPEOxfyzF/nqh0cgb",
	"Hktz6FS4jLzRsQTLMhhNb3B2JL3Nco1VD4+PRaehbMCQHhxLuprFNhSHx1KsS6kayqNjKa+n7Ew2KIki",
	"ItLO3LdJFUhVF44AUYAIYvBcBsRoCjZEzEsa8puJXuXUgSKSokdA2soQyrJjNWdZYF3RabkZPlxzWYkf",
	"bGL2Aw/2qzk4wljZq7OVe3OhD2yrI03pURZ002IWi20CbAiysj4p50kYpq928tVOvtpJYyfrDZnplB+R",
	"Tr/+bq99pivd1urIZAr1SsPY5ckpv4SaXkL6v3mKWv+VfRfUOiJT9+PxTujW/Ba/C7ovLODvJNiX66nx",
	"V2/26s1evVnXHmi14VvMb+ZiopblT+YK14jXA+Iuf+1/33QOye1lxYFvlM00HiHWHOlffJwoqqFezmGi",
	"6SCRX/K/niJe7e6r3a2xu7vNkNGsrIo4s6WJCPEEL5WKJ6enIfdJuORSTd57771TvLpf/TcAAP//3ojQ",
	"eVFLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./openapi_spec_components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
