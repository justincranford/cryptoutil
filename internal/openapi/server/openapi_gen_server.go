// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "cryptoutil/internal/openapi/model"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// Defines values for GetKeypoolParamsSort.
const (
	Algorithm             GetKeypoolParamsSort = "algorithm"
	AlgorithmASC          GetKeypoolParamsSort = "algorithm:ASC"
	AlgorithmDESC         GetKeypoolParamsSort = "algorithm:DESC"
	ExportAllowed         GetKeypoolParamsSort = "export_allowed"
	ExportAllowedASC      GetKeypoolParamsSort = "export_allowed:ASC"
	ExportAllowedDESC     GetKeypoolParamsSort = "export_allowed:DESC"
	Id                    GetKeypoolParamsSort = "id"
	IdASC                 GetKeypoolParamsSort = "id:ASC"
	IdDESC                GetKeypoolParamsSort = "id:DESC"
	ImportAllowed         GetKeypoolParamsSort = "import_allowed"
	ImportAllowedASC      GetKeypoolParamsSort = "import_allowed:ASC"
	ImportAllowedDESC     GetKeypoolParamsSort = "import_allowed:DESC"
	Name                  GetKeypoolParamsSort = "name"
	NameASC               GetKeypoolParamsSort = "name:ASC"
	NameDESC              GetKeypoolParamsSort = "name:DESC"
	Provider              GetKeypoolParamsSort = "provider"
	ProviderASC           GetKeypoolParamsSort = "provider:ASC"
	ProviderDESC          GetKeypoolParamsSort = "provider:DESC"
	Status                GetKeypoolParamsSort = "status"
	StatusASC             GetKeypoolParamsSort = "status:ASC"
	StatusDESC            GetKeypoolParamsSort = "status:DESC"
	VersioningAllowed     GetKeypoolParamsSort = "versioning_allowed"
	VersioningAllowedASC  GetKeypoolParamsSort = "versioning_allowed:ASC"
	VersioningAllowedDESC GetKeypoolParamsSort = "versioning_allowed:DESC"
)

// GetKeypoolParams defines parameters for GetKeypool.
type GetKeypoolParams struct {
	// Id Filter by the Key Pool ID (UUID).
	Id *externalRef0.KeyPoolFilterIds `form:"id,omitempty" json:"id,omitempty"`

	// Name Filter by the Key Pool name.
	Name *externalRef0.KeyPoolFilterNames `form:"name,omitempty" json:"name,omitempty"`

	// Provider Filter by Key Pool provider.
	Provider *externalRef0.KeyPoolFilterProviders `form:"provider,omitempty" json:"provider,omitempty"`

	// Algorithm Filter by cryptographic algorithm.
	Algorithm *externalRef0.KeyPoolFilterAlgorithms `form:"algorithm,omitempty" json:"algorithm,omitempty"`

	// VersioningAllowed Filter by whether versioning is allowed.
	VersioningAllowed *externalRef0.KeyPoolFilterIsVersioningAllowed `form:"versioning_allowed,omitempty" json:"versioning_allowed,omitempty"`

	// ImportAllowed Filter by whether import is allowed.
	ImportAllowed *externalRef0.KeyPoolFilterIsImportAllowed `form:"import_allowed,omitempty" json:"import_allowed,omitempty"`

	// ExportAllowed Filter by whether export is allowed.
	ExportAllowed *externalRef0.KeyPoolFilterIsExportAllowed `form:"export_allowed,omitempty" json:"export_allowed,omitempty"`

	// Status Filter by the Key Pool status.
	Status *externalRef0.KeyPoolFilterStatuses `form:"status,omitempty" json:"status,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `name:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyPoolFilterSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyPoolFilterPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyPoolFilterPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetKeypoolParamsSort defines parameters for GetKeypool.
type GetKeypoolParamsSort string

// GetKeypoolKeyPoolIDKeyParams defines parameters for GetKeypoolKeyPoolIDKey.
type GetKeypoolKeyPoolIDKeyParams struct {
	// Pool Filter by the Key Pool ID (uuid).
	Pool *externalRef0.KeyFilterKeyPoolId `form:"pool,omitempty" json:"pool,omitempty"`

	// Id Filter by the Key ID.
	Id *externalRef0.KeyFilterId `form:"id,omitempty" json:"id,omitempty"`

	// MinGenerateDate Filter by the Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.KeyFilterMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.KeyFilterMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyFilterSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyFilterPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyFilterPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostKeypoolJSONRequestBody defines body for PostKeypool for application/json ContentType.
type PostKeypoolJSONRequestBody = externalRef0.KeyPoolCreate

// PostKeypoolKeyPoolIDKeyJSONRequestBody defines body for PostKeypoolKeyPoolIDKey for application/json ContentType.
type PostKeypoolKeyPoolIDKeyJSONRequestBody = externalRef0.KeyGenerate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all Key Pools. Supports optional filtering, sorting, and paging.
	// (GET /keypool)
	GetKeypool(c *fiber.Ctx, params GetKeypoolParams) error
	// Create a new Key Pool.
	// (POST /keypool)
	PostKeypool(c *fiber.Ctx) error
	// List all Keys in Key Pool. Supports optional filtering, sorting, and paging.
	// (GET /keypool/{keyPoolID}/key)
	GetKeypoolKeyPoolIDKey(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params GetKeypoolKeyPoolIDKeyParams) error
	// Generate a new Key in a Key Pool.
	// (POST /keypool/{keyPoolID}/key)
	PostKeypoolKeyPoolIDKey(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetKeypool operation middleware
func (siw *ServerInterfaceWrapper) GetKeypool(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeypoolParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", query, &params.Id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", query, &params.Provider)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter provider: %w", err).Error())
	}

	// ------------- Optional query parameter "algorithm" -------------

	err = runtime.BindQueryParameter("form", true, false, "algorithm", query, &params.Algorithm)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter algorithm: %w", err).Error())
	}

	// ------------- Optional query parameter "versioning_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "versioning_allowed", query, &params.VersioningAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter versioning_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "import_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "import_allowed", query, &params.ImportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter import_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "export_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "export_allowed", query, &params.ExportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter export_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", query, &params.Status)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter status: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetKeypool(c, params)
}

// PostKeypool operation middleware
func (siw *ServerInterfaceWrapper) PostKeypool(c *fiber.Ctx) error {

	return siw.Handler.PostKeypool(c)
}

// GetKeypoolKeyPoolIDKey operation middleware
func (siw *ServerInterfaceWrapper) GetKeypoolKeyPoolIDKey(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeypoolKeyPoolIDKeyParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, false, "pool", query, &params.Pool)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter pool: %w", err).Error())
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", query, &params.Id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Optional query parameter "min_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_generate_date", query, &params.MinGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter min_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "max_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_generate_date", query, &params.MaxGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter max_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetKeypoolKeyPoolIDKey(c, keyPoolID, params)
}

// PostKeypoolKeyPoolIDKey operation middleware
func (siw *ServerInterfaceWrapper) PostKeypoolKeyPoolIDKey(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	return siw.Handler.PostKeypoolKeyPoolIDKey(c, keyPoolID)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/keypool", wrapper.GetKeypool)

	router.Post(options.BaseURL+"/keypool", wrapper.PostKeypool)

	router.Get(options.BaseURL+"/keypool/:keyPoolID/key", wrapper.GetKeypoolKeyPoolIDKey)

	router.Post(options.BaseURL+"/keypool/:keyPoolID/key", wrapper.PostKeypoolKeyPoolIDKey)

}

type GetKeypoolRequestObject struct {
	Params GetKeypoolParams
}

type GetKeypoolResponseObject interface {
	VisitGetKeypoolResponse(ctx *fiber.Ctx) error
}

type GetKeypool200JSONResponse []externalRef0.KeyPool

func (response GetKeypool200JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypool400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypool400JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypool401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypool401JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypool403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypool403JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypool404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypool404JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypool429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypool429JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypool500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypool500JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypool502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypool502JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypool503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypool503JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypool504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypool504JSONResponse) VisitGetKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolRequestObject struct {
	Body *PostKeypoolJSONRequestBody
}

type PostKeypoolResponseObject interface {
	VisitPostKeypoolResponse(ctx *fiber.Ctx) error
}

type PostKeypool200JSONResponse externalRef0.KeyPool

func (response PostKeypool200JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostKeypool400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypool400JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypool401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypool401JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypool403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypool403JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypool404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypool404JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypool429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypool429JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypool500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypool500JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypool502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypool502JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypool503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypool503JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypool504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypool504JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Params    GetKeypoolKeyPoolIDKeyParams
}

type GetKeypoolKeyPoolIDKeyResponseObject interface {
	VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error
}

type GetKeypoolKeyPoolIDKey200JSONResponse []externalRef0.Key

func (response GetKeypoolKeyPoolIDKey200JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypoolKeyPoolIDKey400JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypoolKeyPoolIDKey401JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypoolKeyPoolIDKey403JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypoolKeyPoolIDKey404JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypoolKeyPoolIDKey429JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypoolKeyPoolIDKey500JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypoolKeyPoolIDKey502JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypoolKeyPoolIDKey503JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKey504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypoolKeyPoolIDKey504JSONResponse) VisitGetKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKeyRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Body      *PostKeypoolKeyPoolIDKeyJSONRequestBody
}

type PostKeypoolKeyPoolIDKeyResponseObject interface {
	VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error
}

type PostKeypoolKeyPoolIDKey200JSONResponse externalRef0.Key

func (response PostKeypoolKeyPoolIDKey200JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypoolKeyPoolIDKey400JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypoolKeyPoolIDKey401JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypoolKeyPoolIDKey403JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypoolKeyPoolIDKey404JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypoolKeyPoolIDKey429JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypoolKeyPoolIDKey500JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypoolKeyPoolIDKey502JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypoolKeyPoolIDKey503JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypoolKeyPoolIDKey504JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all Key Pools. Supports optional filtering, sorting, and paging.
	// (GET /keypool)
	GetKeypool(ctx context.Context, request GetKeypoolRequestObject) (GetKeypoolResponseObject, error)
	// Create a new Key Pool.
	// (POST /keypool)
	PostKeypool(ctx context.Context, request PostKeypoolRequestObject) (PostKeypoolResponseObject, error)
	// List all Keys in Key Pool. Supports optional filtering, sorting, and paging.
	// (GET /keypool/{keyPoolID}/key)
	GetKeypoolKeyPoolIDKey(ctx context.Context, request GetKeypoolKeyPoolIDKeyRequestObject) (GetKeypoolKeyPoolIDKeyResponseObject, error)
	// Generate a new Key in a Key Pool.
	// (POST /keypool/{keyPoolID}/key)
	PostKeypoolKeyPoolIDKey(ctx context.Context, request PostKeypoolKeyPoolIDKeyRequestObject) (PostKeypoolKeyPoolIDKeyResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetKeypool operation middleware
func (sh *strictHandler) GetKeypool(ctx *fiber.Ctx, params GetKeypoolParams) error {
	var request GetKeypoolRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypool(ctx.UserContext(), request.(GetKeypoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolResponseObject); ok {
		if err := validResponse.VisitGetKeypoolResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypool operation middleware
func (sh *strictHandler) PostKeypool(ctx *fiber.Ctx) error {
	var request PostKeypoolRequestObject

	var body PostKeypoolJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypool(ctx.UserContext(), request.(PostKeypoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolResponseObject); ok {
		if err := validResponse.VisitPostKeypoolResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeypoolKeyPoolIDKey operation middleware
func (sh *strictHandler) GetKeypoolKeyPoolIDKey(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params GetKeypoolKeyPoolIDKeyParams) error {
	var request GetKeypoolKeyPoolIDKeyRequestObject

	request.KeyPoolID = keyPoolID
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypoolKeyPoolIDKey(ctx.UserContext(), request.(GetKeypoolKeyPoolIDKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypoolKeyPoolIDKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolKeyPoolIDKeyResponseObject); ok {
		if err := validResponse.VisitGetKeypoolKeyPoolIDKeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypoolKeyPoolIDKey operation middleware
func (sh *strictHandler) PostKeypoolKeyPoolIDKey(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error {
	var request PostKeypoolKeyPoolIDKeyRequestObject

	request.KeyPoolID = keyPoolID

	var body PostKeypoolKeyPoolIDKeyJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypoolKeyPoolIDKey(ctx.UserContext(), request.(PostKeypoolKeyPoolIDKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypoolKeyPoolIDKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolKeyPoolIDKeyResponseObject); ok {
		if err := validResponse.VisitPostKeypoolKeyPoolIDKeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"d/47/9hb3C7+GwAA//+YtMRip04AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./openapi_spec_components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
