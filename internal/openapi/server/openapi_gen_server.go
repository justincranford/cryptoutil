// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "cryptoutil/internal/openapi/model"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// PostElastickeyElasticKeyIDEncryptParams defines parameters for PostElastickeyElasticKeyIDEncrypt.
type PostElastickeyElasticKeyIDEncryptParams struct {
	Context *externalRef0.EncryptContext `form:"context,omitempty" json:"context,omitempty"`
}

// GetElastickeyElasticKeyIDMaterialkeysParams defines parameters for GetElastickeyElasticKeyIDMaterialkeys.
type GetElastickeyElasticKeyIDMaterialkeysParams struct {
	// MaterialKeyId Filter by the Material Key ID.
	MaterialKeyId *externalRef0.MaterialKeyQueryParamMaterialKeyIds `form:"material_key_id,omitempty" json:"material_key_id,omitempty"`

	// MinGenerateDate Filter by the Material Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.MaterialKeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Material Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.MaterialKeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `material_key_id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.MaterialKeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.MaterialKeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.MaterialKeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostElastickeyElasticKeyIDSignParams defines parameters for PostElastickeyElasticKeyIDSign.
type PostElastickeyElasticKeyIDSignParams struct {
	Context *externalRef0.SignContext `form:"context,omitempty" json:"context,omitempty"`
}

// GetElastickeysParams defines parameters for GetElastickeys.
type GetElastickeysParams struct {
	// ElasticKeyId Filter by the Elastic Key ID (UUID).
	ElasticKeyId *externalRef0.ElasticKeyQueryParamElasticKeyIds `form:"elastic_key_id,omitempty" json:"elastic_key_id,omitempty"`

	// Name Filter by the Elastic Key name.
	Name *externalRef0.ElasticKeyQueryParamNames `form:"name,omitempty" json:"name,omitempty"`

	// Provider Filter by Elastic Key provider.
	Provider *externalRef0.ElasticKeyQueryParamProviders `form:"provider,omitempty" json:"provider,omitempty"`

	// Algorithm Filter by cryptographic algorithm.
	Algorithm *externalRef0.ElasticKeyQueryParamAlgorithms `form:"algorithm,omitempty" json:"algorithm,omitempty"`

	// VersioningAllowed Filter by whether versioning is allowed.
	VersioningAllowed *externalRef0.ElasticKeyQueryParamVersioningAllowed `form:"versioning_allowed,omitempty" json:"versioning_allowed,omitempty"`

	// ImportAllowed Filter by whether import is allowed.
	ImportAllowed *externalRef0.ElasticKeyQueryParamImportAllowed `form:"import_allowed,omitempty" json:"import_allowed,omitempty"`

	// ExportAllowed Filter by whether export is allowed.
	ExportAllowed *externalRef0.ElasticKeyQueryParamExportAllowed `form:"export_allowed,omitempty" json:"export_allowed,omitempty"`

	// Status Filter by the Elastic Key status.
	Status *externalRef0.ElasticKeyQueryParamStatuses `form:"status,omitempty" json:"status,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `name:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.ElasticKeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.ElasticKeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.ElasticKeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetMaterialkeysParams defines parameters for GetMaterialkeys.
type GetMaterialkeysParams struct {
	// ElasticKeyId Filter by the Elastic Key ID (uuid).
	ElasticKeyId *externalRef0.MaterialKeyQueryParamElasticKeyIds `form:"elastic_key_id,omitempty" json:"elastic_key_id,omitempty"`

	// MaterialKeyId Filter by the Material Key ID.
	MaterialKeyId *externalRef0.MaterialKeyQueryParamMaterialKeyIds `form:"material_key_id,omitempty" json:"material_key_id,omitempty"`

	// MinGenerateDate Filter by the Material Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.MaterialKeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Material Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.MaterialKeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `material_key_id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.MaterialKeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.MaterialKeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.MaterialKeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostElastickeyJSONRequestBody defines body for PostElastickey for application/json ContentType.
type PostElastickeyJSONRequestBody = externalRef0.ElasticKeyCreate

// PostElastickeyElasticKeyIDDecryptTextRequestBody defines body for PostElastickeyElasticKeyIDDecrypt for text/plain ContentType.
type PostElastickeyElasticKeyIDDecryptTextRequestBody = externalRef0.DecryptRequest

// PostElastickeyElasticKeyIDEncryptTextRequestBody defines body for PostElastickeyElasticKeyIDEncrypt for text/plain ContentType.
type PostElastickeyElasticKeyIDEncryptTextRequestBody = externalRef0.EncryptRequest

// PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody defines body for PostElastickeyElasticKeyIDMaterialkey for application/json ContentType.
type PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody = externalRef0.MaterialKeyGenerate

// PostElastickeyElasticKeyIDSignTextRequestBody defines body for PostElastickeyElasticKeyIDSign for text/plain ContentType.
type PostElastickeyElasticKeyIDSignTextRequestBody = externalRef0.SignRequest

// PostElastickeyElasticKeyIDVerifyTextRequestBody defines body for PostElastickeyElasticKeyIDVerify for text/plain ContentType.
type PostElastickeyElasticKeyIDVerifyTextRequestBody = externalRef0.VerifyRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new Elastic Key.
	// (POST /elastickey)
	PostElastickey(c *fiber.Ctx) error
	// Get an Elastic Key.
	// (GET /elastickey/{elasticKeyID})
	GetElastickeyElasticKeyID(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyId) error
	// Decrypt ciphertext using a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWE message kid header.
	// (POST /elastickey/{elasticKeyID}/decrypt)
	PostElastickeyElasticKeyIDDecrypt(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyId) error
	// Encrypt clear text data using a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWE message kid header.
	// (POST /elastickey/{elasticKeyID}/encrypt)
	PostElastickeyElasticKeyIDEncrypt(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyId, params PostElastickeyElasticKeyIDEncryptParams) error
	// Generate a new Material Key in an Elastic Key.
	// (POST /elastickey/{elasticKeyID}/materialkey)
	PostElastickeyElasticKeyIDMaterialkey(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyId) error
	// Get Material Key in Elastic Key.
	// (GET /elastickey/{elasticKeyID}/materialkey/{material_key_id})
	GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyId, materialKeyId externalRef0.MaterialKeyId) error
	// Find Material Keys in Elastic Key. Supports optional filtering, sorting, and paging.
	// (GET /elastickey/{elasticKeyID}/materialkeys)
	GetElastickeyElasticKeyIDMaterialkeys(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyId, params GetElastickeyElasticKeyIDMaterialkeysParams) error
	// Sign clear text using a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWS message kid header.
	// (POST /elastickey/{elasticKeyID}/sign)
	PostElastickeyElasticKeyIDSign(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyId, params PostElastickeyElasticKeyIDSignParams) error
	// Verify JWS message using a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWS message kid header.
	// (POST /elastickey/{elasticKeyID}/verify)
	PostElastickeyElasticKeyIDVerify(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyId) error
	// Find Elastic Keys. Supports optional filtering, sorting, and paging.
	// (GET /elastickeys)
	GetElastickeys(c *fiber.Ctx, params GetElastickeysParams) error
	// Find Material Keys. Supports optional filtering, sorting, and paging.
	// (GET /materialkeys)
	GetMaterialkeys(c *fiber.Ctx, params GetMaterialkeysParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// PostElastickey operation middleware
func (siw *ServerInterfaceWrapper) PostElastickey(c *fiber.Ctx) error {

	return siw.Handler.PostElastickey(c)
}

// GetElastickeyElasticKeyID operation middleware
func (siw *ServerInterfaceWrapper) GetElastickeyElasticKeyID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyId

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	return siw.Handler.GetElastickeyElasticKeyID(c, elasticKeyID)
}

// PostElastickeyElasticKeyIDDecrypt operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDDecrypt(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyId

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDDecrypt(c, elasticKeyID)
}

// PostElastickeyElasticKeyIDEncrypt operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDEncrypt(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyId

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostElastickeyElasticKeyIDEncryptParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "context" -------------

	err = runtime.BindQueryParameter("form", true, false, "context", query, &params.Context)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter context: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDEncrypt(c, elasticKeyID, params)
}

// PostElastickeyElasticKeyIDMaterialkey operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDMaterialkey(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyId

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDMaterialkey(c, elasticKeyID)
}

// GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId operation middleware
func (siw *ServerInterfaceWrapper) GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyId

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	// ------------- Path parameter "material_key_id" -------------
	var materialKeyId externalRef0.MaterialKeyId

	err = runtime.BindStyledParameterWithOptions("simple", "material_key_id", c.Params("material_key_id"), &materialKeyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter material_key_id: %w", err).Error())
	}

	return siw.Handler.GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId(c, elasticKeyID, materialKeyId)
}

// GetElastickeyElasticKeyIDMaterialkeys operation middleware
func (siw *ServerInterfaceWrapper) GetElastickeyElasticKeyIDMaterialkeys(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyId

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetElastickeyElasticKeyIDMaterialkeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "material_key_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "material_key_id", query, &params.MaterialKeyId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter material_key_id: %w", err).Error())
	}

	// ------------- Optional query parameter "min_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_generate_date", query, &params.MinGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter min_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "max_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_generate_date", query, &params.MaxGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter max_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetElastickeyElasticKeyIDMaterialkeys(c, elasticKeyID, params)
}

// PostElastickeyElasticKeyIDSign operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDSign(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyId

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostElastickeyElasticKeyIDSignParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "context" -------------

	err = runtime.BindQueryParameter("form", true, false, "context", query, &params.Context)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter context: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDSign(c, elasticKeyID, params)
}

// PostElastickeyElasticKeyIDVerify operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDVerify(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyId

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDVerify(c, elasticKeyID)
}

// GetElastickeys operation middleware
func (siw *ServerInterfaceWrapper) GetElastickeys(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetElastickeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "elastic_key_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "elastic_key_id", query, &params.ElasticKeyId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elastic_key_id: %w", err).Error())
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", query, &params.Provider)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter provider: %w", err).Error())
	}

	// ------------- Optional query parameter "algorithm" -------------

	err = runtime.BindQueryParameter("form", true, false, "algorithm", query, &params.Algorithm)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter algorithm: %w", err).Error())
	}

	// ------------- Optional query parameter "versioning_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "versioning_allowed", query, &params.VersioningAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter versioning_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "import_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "import_allowed", query, &params.ImportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter import_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "export_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "export_allowed", query, &params.ExportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter export_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", query, &params.Status)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter status: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetElastickeys(c, params)
}

// GetMaterialkeys operation middleware
func (siw *ServerInterfaceWrapper) GetMaterialkeys(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMaterialkeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "elastic_key_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "elastic_key_id", query, &params.ElasticKeyId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elastic_key_id: %w", err).Error())
	}

	// ------------- Optional query parameter "material_key_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "material_key_id", query, &params.MaterialKeyId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter material_key_id: %w", err).Error())
	}

	// ------------- Optional query parameter "min_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_generate_date", query, &params.MinGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter min_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "max_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_generate_date", query, &params.MaxGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter max_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetMaterialkeys(c, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/elastickey", wrapper.PostElastickey)

	router.Get(options.BaseURL+"/elastickey/:elasticKeyID", wrapper.GetElastickeyElasticKeyID)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/decrypt", wrapper.PostElastickeyElasticKeyIDDecrypt)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/encrypt", wrapper.PostElastickeyElasticKeyIDEncrypt)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/materialkey", wrapper.PostElastickeyElasticKeyIDMaterialkey)

	router.Get(options.BaseURL+"/elastickey/:elasticKeyID/materialkey/:material_key_id", wrapper.GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId)

	router.Get(options.BaseURL+"/elastickey/:elasticKeyID/materialkeys", wrapper.GetElastickeyElasticKeyIDMaterialkeys)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/sign", wrapper.PostElastickeyElasticKeyIDSign)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/verify", wrapper.PostElastickeyElasticKeyIDVerify)

	router.Get(options.BaseURL+"/elastickeys", wrapper.GetElastickeys)

	router.Get(options.BaseURL+"/materialkeys", wrapper.GetMaterialkeys)

}

type PostElastickeyRequestObject struct {
	Body *PostElastickeyJSONRequestBody
}

type PostElastickeyResponseObject interface {
	VisitPostElastickeyResponse(ctx *fiber.Ctx) error
}

type PostElastickey200JSONResponse externalRef0.ElasticKey

func (response PostElastickey200JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostElastickey400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickey400JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickey401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickey401JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickey403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickey403JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickey404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickey404JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickey429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickey429JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickey500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickey500JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickey502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickey502JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickey503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickey503JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickey504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickey504JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyId `json:"elasticKeyID"`
}

type GetElastickeyElasticKeyIDResponseObject interface {
	VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error
}

type GetElastickeyElasticKeyID200JSONResponse externalRef0.ElasticKey

func (response GetElastickeyElasticKeyID200JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetElastickeyElasticKeyID400JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetElastickeyElasticKeyID401JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetElastickeyElasticKeyID403JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetElastickeyElasticKeyID404JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetElastickeyElasticKeyID429JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetElastickeyElasticKeyID500JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetElastickeyElasticKeyID502JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetElastickeyElasticKeyID503JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetElastickeyElasticKeyID504JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecryptRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyId `json:"elasticKeyID"`
	Body         *PostElastickeyElasticKeyIDDecryptTextRequestBody
}

type PostElastickeyElasticKeyIDDecryptResponseObject interface {
	VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDDecrypt200TextResponse externalRef0.DecryptResponse

func (response PostElastickeyElasticKeyIDDecrypt200TextResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostElastickeyElasticKeyIDDecrypt400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDDecrypt400JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDDecrypt401JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDDecrypt403JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDDecrypt404JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDDecrypt429JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDDecrypt500JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDDecrypt502JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDDecrypt503JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDDecrypt504JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncryptRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyId `json:"elasticKeyID"`
	Params       PostElastickeyElasticKeyIDEncryptParams
	Body         *PostElastickeyElasticKeyIDEncryptTextRequestBody
}

type PostElastickeyElasticKeyIDEncryptResponseObject interface {
	VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDEncrypt200TextResponse externalRef0.EncryptResponse

func (response PostElastickeyElasticKeyIDEncrypt200TextResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostElastickeyElasticKeyIDEncrypt400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDEncrypt400JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDEncrypt401JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDEncrypt403JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDEncrypt404JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDEncrypt429JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDEncrypt500JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDEncrypt502JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDEncrypt503JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDEncrypt504JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkeyRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyId `json:"elasticKeyID"`
	Body         *PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody
}

type PostElastickeyElasticKeyIDMaterialkeyResponseObject interface {
	VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDMaterialkey200JSONResponse externalRef0.MaterialKey

func (response PostElastickeyElasticKeyIDMaterialkey200JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDMaterialkey400JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDMaterialkey401JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDMaterialkey403JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDMaterialkey404JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDMaterialkey429JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDMaterialkey500JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDMaterialkey502JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDMaterialkey503JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDMaterialkey504JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdRequestObject struct {
	ElasticKeyID  externalRef0.ElasticKeyId  `json:"elasticKeyID"`
	MaterialKeyId externalRef0.MaterialKeyId `json:"material_key_id"`
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponseObject interface {
	VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse(ctx *fiber.Ctx) error
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId200JSONResponse externalRef0.MaterialKey

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId200JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId400JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId401JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId403JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId404JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId429JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId500JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId502JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId503JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId504JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeysRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyId `json:"elasticKeyID"`
	Params       GetElastickeyElasticKeyIDMaterialkeysParams
}

type GetElastickeyElasticKeyIDMaterialkeysResponseObject interface {
	VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error
}

type GetElastickeyElasticKeyIDMaterialkeys200JSONResponse []externalRef0.MaterialKey

func (response GetElastickeyElasticKeyIDMaterialkeys200JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetElastickeyElasticKeyIDMaterialkeys400JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetElastickeyElasticKeyIDMaterialkeys401JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetElastickeyElasticKeyIDMaterialkeys403JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetElastickeyElasticKeyIDMaterialkeys404JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetElastickeyElasticKeyIDMaterialkeys429JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetElastickeyElasticKeyIDMaterialkeys500JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetElastickeyElasticKeyIDMaterialkeys502JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetElastickeyElasticKeyIDMaterialkeys503JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetElastickeyElasticKeyIDMaterialkeys504JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSignRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyId `json:"elasticKeyID"`
	Params       PostElastickeyElasticKeyIDSignParams
	Body         *PostElastickeyElasticKeyIDSignTextRequestBody
}

type PostElastickeyElasticKeyIDSignResponseObject interface {
	VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDSign200TextResponse externalRef0.SignResponse

func (response PostElastickeyElasticKeyIDSign200TextResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostElastickeyElasticKeyIDSign400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDSign400JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDSign401JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDSign403JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDSign404JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDSign429JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDSign500JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDSign502JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDSign503JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDSign504JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerifyRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyId `json:"elasticKeyID"`
	Body         *PostElastickeyElasticKeyIDVerifyTextRequestBody
}

type PostElastickeyElasticKeyIDVerifyResponseObject interface {
	VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDVerify204Response struct {
}

func (response PostElastickeyElasticKeyIDVerify204Response) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type PostElastickeyElasticKeyIDVerify400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDVerify400JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDVerify401JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDVerify403JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDVerify404JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDVerify429JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDVerify500JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDVerify502JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDVerify503JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDVerify504JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetElastickeysRequestObject struct {
	Params GetElastickeysParams
}

type GetElastickeysResponseObject interface {
	VisitGetElastickeysResponse(ctx *fiber.Ctx) error
}

type GetElastickeys200JSONResponse []externalRef0.ElasticKey

func (response GetElastickeys200JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetElastickeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetElastickeys400JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetElastickeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetElastickeys401JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetElastickeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetElastickeys403JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetElastickeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetElastickeys404JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetElastickeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetElastickeys429JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetElastickeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetElastickeys500JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetElastickeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetElastickeys502JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetElastickeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetElastickeys503JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetElastickeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetElastickeys504JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetMaterialkeysRequestObject struct {
	Params GetMaterialkeysParams
}

type GetMaterialkeysResponseObject interface {
	VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error
}

type GetMaterialkeys200JSONResponse []externalRef0.MaterialKey

func (response GetMaterialkeys200JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetMaterialkeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetMaterialkeys400JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetMaterialkeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetMaterialkeys401JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetMaterialkeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetMaterialkeys403JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetMaterialkeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetMaterialkeys404JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetMaterialkeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetMaterialkeys429JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetMaterialkeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetMaterialkeys500JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetMaterialkeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetMaterialkeys502JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetMaterialkeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetMaterialkeys503JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetMaterialkeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetMaterialkeys504JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a new Elastic Key.
	// (POST /elastickey)
	PostElastickey(ctx context.Context, request PostElastickeyRequestObject) (PostElastickeyResponseObject, error)
	// Get an Elastic Key.
	// (GET /elastickey/{elasticKeyID})
	GetElastickeyElasticKeyID(ctx context.Context, request GetElastickeyElasticKeyIDRequestObject) (GetElastickeyElasticKeyIDResponseObject, error)
	// Decrypt ciphertext using a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWE message kid header.
	// (POST /elastickey/{elasticKeyID}/decrypt)
	PostElastickeyElasticKeyIDDecrypt(ctx context.Context, request PostElastickeyElasticKeyIDDecryptRequestObject) (PostElastickeyElasticKeyIDDecryptResponseObject, error)
	// Encrypt clear text data using a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWE message kid header.
	// (POST /elastickey/{elasticKeyID}/encrypt)
	PostElastickeyElasticKeyIDEncrypt(ctx context.Context, request PostElastickeyElasticKeyIDEncryptRequestObject) (PostElastickeyElasticKeyIDEncryptResponseObject, error)
	// Generate a new Material Key in an Elastic Key.
	// (POST /elastickey/{elasticKeyID}/materialkey)
	PostElastickeyElasticKeyIDMaterialkey(ctx context.Context, request PostElastickeyElasticKeyIDMaterialkeyRequestObject) (PostElastickeyElasticKeyIDMaterialkeyResponseObject, error)
	// Get Material Key in Elastic Key.
	// (GET /elastickey/{elasticKeyID}/materialkey/{material_key_id})
	GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId(ctx context.Context, request GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdRequestObject) (GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponseObject, error)
	// Find Material Keys in Elastic Key. Supports optional filtering, sorting, and paging.
	// (GET /elastickey/{elasticKeyID}/materialkeys)
	GetElastickeyElasticKeyIDMaterialkeys(ctx context.Context, request GetElastickeyElasticKeyIDMaterialkeysRequestObject) (GetElastickeyElasticKeyIDMaterialkeysResponseObject, error)
	// Sign clear text using a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWS message kid header.
	// (POST /elastickey/{elasticKeyID}/sign)
	PostElastickeyElasticKeyIDSign(ctx context.Context, request PostElastickeyElasticKeyIDSignRequestObject) (PostElastickeyElasticKeyIDSignResponseObject, error)
	// Verify JWS message using a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWS message kid header.
	// (POST /elastickey/{elasticKeyID}/verify)
	PostElastickeyElasticKeyIDVerify(ctx context.Context, request PostElastickeyElasticKeyIDVerifyRequestObject) (PostElastickeyElasticKeyIDVerifyResponseObject, error)
	// Find Elastic Keys. Supports optional filtering, sorting, and paging.
	// (GET /elastickeys)
	GetElastickeys(ctx context.Context, request GetElastickeysRequestObject) (GetElastickeysResponseObject, error)
	// Find Material Keys. Supports optional filtering, sorting, and paging.
	// (GET /materialkeys)
	GetMaterialkeys(ctx context.Context, request GetMaterialkeysRequestObject) (GetMaterialkeysResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostElastickey operation middleware
func (sh *strictHandler) PostElastickey(ctx *fiber.Ctx) error {
	var request PostElastickeyRequestObject

	var body PostElastickeyJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickey(ctx.UserContext(), request.(PostElastickeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyResponseObject); ok {
		if err := validResponse.VisitPostElastickeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetElastickeyElasticKeyID operation middleware
func (sh *strictHandler) GetElastickeyElasticKeyID(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyId) error {
	var request GetElastickeyElasticKeyIDRequestObject

	request.ElasticKeyID = elasticKeyID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetElastickeyElasticKeyID(ctx.UserContext(), request.(GetElastickeyElasticKeyIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetElastickeyElasticKeyID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetElastickeyElasticKeyIDResponseObject); ok {
		if err := validResponse.VisitGetElastickeyElasticKeyIDResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDDecrypt operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDDecrypt(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyId) error {
	var request PostElastickeyElasticKeyIDDecryptRequestObject

	request.ElasticKeyID = elasticKeyID

	data := ctx.Request().Body()
	body := PostElastickeyElasticKeyIDDecryptTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDDecrypt(ctx.UserContext(), request.(PostElastickeyElasticKeyIDDecryptRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDDecrypt")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDDecryptResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDDecryptResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDEncrypt operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDEncrypt(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyId, params PostElastickeyElasticKeyIDEncryptParams) error {
	var request PostElastickeyElasticKeyIDEncryptRequestObject

	request.ElasticKeyID = elasticKeyID
	request.Params = params

	data := ctx.Request().Body()
	body := PostElastickeyElasticKeyIDEncryptTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDEncrypt(ctx.UserContext(), request.(PostElastickeyElasticKeyIDEncryptRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDEncrypt")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDEncryptResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDEncryptResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDMaterialkey operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDMaterialkey(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyId) error {
	var request PostElastickeyElasticKeyIDMaterialkeyRequestObject

	request.ElasticKeyID = elasticKeyID

	var body PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDMaterialkey(ctx.UserContext(), request.(PostElastickeyElasticKeyIDMaterialkeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDMaterialkey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDMaterialkeyResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId operation middleware
func (sh *strictHandler) GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyId, materialKeyId externalRef0.MaterialKeyId) error {
	var request GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdRequestObject

	request.ElasticKeyID = elasticKeyID
	request.MaterialKeyId = materialKeyId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId(ctx.UserContext(), request.(GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetElastickeyElasticKeyIDMaterialkeyMaterialKeyId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponseObject); ok {
		if err := validResponse.VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetElastickeyElasticKeyIDMaterialkeys operation middleware
func (sh *strictHandler) GetElastickeyElasticKeyIDMaterialkeys(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyId, params GetElastickeyElasticKeyIDMaterialkeysParams) error {
	var request GetElastickeyElasticKeyIDMaterialkeysRequestObject

	request.ElasticKeyID = elasticKeyID
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetElastickeyElasticKeyIDMaterialkeys(ctx.UserContext(), request.(GetElastickeyElasticKeyIDMaterialkeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetElastickeyElasticKeyIDMaterialkeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetElastickeyElasticKeyIDMaterialkeysResponseObject); ok {
		if err := validResponse.VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDSign operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDSign(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyId, params PostElastickeyElasticKeyIDSignParams) error {
	var request PostElastickeyElasticKeyIDSignRequestObject

	request.ElasticKeyID = elasticKeyID
	request.Params = params

	data := ctx.Request().Body()
	body := PostElastickeyElasticKeyIDSignTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDSign(ctx.UserContext(), request.(PostElastickeyElasticKeyIDSignRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDSign")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDSignResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDSignResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDVerify operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDVerify(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyId) error {
	var request PostElastickeyElasticKeyIDVerifyRequestObject

	request.ElasticKeyID = elasticKeyID

	data := ctx.Request().Body()
	body := PostElastickeyElasticKeyIDVerifyTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDVerify(ctx.UserContext(), request.(PostElastickeyElasticKeyIDVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDVerifyResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDVerifyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetElastickeys operation middleware
func (sh *strictHandler) GetElastickeys(ctx *fiber.Ctx, params GetElastickeysParams) error {
	var request GetElastickeysRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetElastickeys(ctx.UserContext(), request.(GetElastickeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetElastickeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetElastickeysResponseObject); ok {
		if err := validResponse.VisitGetElastickeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMaterialkeys operation middleware
func (sh *strictHandler) GetMaterialkeys(ctx *fiber.Ctx, params GetMaterialkeysParams) error {
	var request GetMaterialkeysRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetMaterialkeys(ctx.UserContext(), request.(GetMaterialkeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMaterialkeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetMaterialkeysResponseObject); ok {
		if err := validResponse.VisitGetMaterialkeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"DrrBQfDw+eH/AgAA//+n+mR+DaQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./openapi_spec_components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
