// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1-0.20250618140738-aae687ce8fe9 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "cryptoutil/internal/openapi/model"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// PostElastickeyElasticKeyIDEncryptParams defines parameters for PostElastickeyElasticKeyIDEncrypt.
type PostElastickeyElasticKeyIDEncryptParams struct {
	Context *externalRef0.EncryptContext `form:"context,omitempty" json:"context,omitempty"`
}

// GetElastickeyElasticKeyIDMaterialkeysParams defines parameters for GetElastickeyElasticKeyIDMaterialkeys.
type GetElastickeyElasticKeyIDMaterialkeysParams struct {
	// MaterialKeyID Filter by the Material Key ID.
	MaterialKeyID *externalRef0.MaterialKeyQueryParamMaterialKeyIDS `form:"material_key_id,omitempty" json:"material_key_id,omitempty"`

	// MinGenerateDate Filter by the Material Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.MaterialKeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Material Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.MaterialKeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `material_key_id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.MaterialKeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.MaterialKeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.MaterialKeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostElastickeyElasticKeyIDSignParams defines parameters for PostElastickeyElasticKeyIDSign.
type PostElastickeyElasticKeyIDSignParams struct {
	Context *externalRef0.SignContext `form:"context,omitempty" json:"context,omitempty"`
}

// GetElastickeysParams defines parameters for GetElastickeys.
type GetElastickeysParams struct {
	// ElasticKeyID Filter by the Elastic Key ID (UUID).
	ElasticKeyID *externalRef0.ElasticKeyQueryParamElasticKeyIDS `form:"elastic_key_id,omitempty" json:"elastic_key_id,omitempty"`

	// Name Filter by the Elastic Key name.
	Name *externalRef0.ElasticKeyQueryParamNames `form:"name,omitempty" json:"name,omitempty"`

	// Provider Filter by Elastic Key provider.
	Provider *externalRef0.ElasticKeyQueryParamProviders `form:"provider,omitempty" json:"provider,omitempty"`

	// Algorithm Filter by Elastic Key algorithm.
	Algorithm *externalRef0.ElasticKeyQueryParamAlgorithms `form:"algorithm,omitempty" json:"algorithm,omitempty"`

	// VersioningAllowed Filter by whether versioning is allowed.
	VersioningAllowed *externalRef0.ElasticKeyQueryParamVersioningAllowed `form:"versioning_allowed,omitempty" json:"versioning_allowed,omitempty"`

	// ImportAllowed Filter by whether import is allowed.
	ImportAllowed *externalRef0.ElasticKeyQueryParamImportAllowed `form:"import_allowed,omitempty" json:"import_allowed,omitempty"`

	// Status Filter by the Elastic Key status.
	Status *externalRef0.ElasticKeyQueryParamStatuses `form:"status,omitempty" json:"status,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `name:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.ElasticKeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.ElasticKeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.ElasticKeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetMaterialkeysParams defines parameters for GetMaterialkeys.
type GetMaterialkeysParams struct {
	// ElasticKeyID Filter by the Elastic Key ID (uuid).
	ElasticKeyID *externalRef0.MaterialKeyQueryParamElasticKeyIDS `form:"elastic_key_id,omitempty" json:"elastic_key_id,omitempty"`

	// MaterialKeyID Filter by the Material Key ID.
	MaterialKeyID *externalRef0.MaterialKeyQueryParamMaterialKeyIDS `form:"material_key_id,omitempty" json:"material_key_id,omitempty"`

	// MinGenerateDate Filter by the Material Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.MaterialKeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Material Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.MaterialKeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `material_key_id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.MaterialKeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.MaterialKeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.MaterialKeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostElastickeyJSONRequestBody defines body for PostElastickey for application/json ContentType.
type PostElastickeyJSONRequestBody = externalRef0.ElasticKeyCreate

// PostElastickeyElasticKeyIDDecryptTextRequestBody defines body for PostElastickeyElasticKeyIDDecrypt for text/plain ContentType.
type PostElastickeyElasticKeyIDDecryptTextRequestBody = externalRef0.DecryptRequest

// PostElastickeyElasticKeyIDEncryptTextRequestBody defines body for PostElastickeyElasticKeyIDEncrypt for text/plain ContentType.
type PostElastickeyElasticKeyIDEncryptTextRequestBody = externalRef0.EncryptRequest

// PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody defines body for PostElastickeyElasticKeyIDMaterialkey for application/json ContentType.
type PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody = externalRef0.MaterialKeyGenerate

// PostElastickeyElasticKeyIDSignTextRequestBody defines body for PostElastickeyElasticKeyIDSign for text/plain ContentType.
type PostElastickeyElasticKeyIDSignTextRequestBody = externalRef0.SignRequest

// PostElastickeyElasticKeyIDVerifyTextRequestBody defines body for PostElastickeyElasticKeyIDVerify for text/plain ContentType.
type PostElastickeyElasticKeyIDVerifyTextRequestBody = externalRef0.VerifyRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new Elastic Key.
	// (POST /elastickey)
	PostElastickey(c *fiber.Ctx) error
	// Get an Elastic Key.
	// (GET /elastickey/{elasticKeyID})
	GetElastickeyElasticKeyID(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error
	// Decrypt JWE message using a specific Materia Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWE message kid header.
	// (POST /elastickey/{elasticKeyID}/decrypt)
	PostElastickeyElasticKeyIDDecrypt(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error
	// Encrypt clear text data using latest Material Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWE message kid header.
	// (POST /elastickey/{elasticKeyID}/encrypt)
	PostElastickeyElasticKeyIDEncrypt(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params PostElastickeyElasticKeyIDEncryptParams) error
	// Generate a new Material Key in an Elastic Key.
	// (POST /elastickey/{elasticKeyID}/materialkey)
	PostElastickeyElasticKeyIDMaterialkey(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error
	// Get Material Key in Elastic Key.
	// (GET /elastickey/{elasticKeyID}/materialkey/{materialKeyID})
	GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, materialKeyID externalRef0.MaterialKeyID) error
	// Find Material Keys in Elastic Key. Supports optional filtering, sorting, and paging.
	// (GET /elastickey/{elasticKeyID}/materialkeys)
	GetElastickeyElasticKeyIDMaterialkeys(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params GetElastickeyElasticKeyIDMaterialkeysParams) error
	// Sign clear text using latest Material Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWS message kid header.
	// (POST /elastickey/{elasticKeyID}/sign)
	PostElastickeyElasticKeyIDSign(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params PostElastickeyElasticKeyIDSignParams) error
	// Verify JWS message using a specific Material Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWS message kid header.
	// (POST /elastickey/{elasticKeyID}/verify)
	PostElastickeyElasticKeyIDVerify(c *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error
	// Find Elastic Keys. Supports optional filtering, sorting, and paging.
	// (GET /elastickeys)
	GetElastickeys(c *fiber.Ctx, params GetElastickeysParams) error
	// Find Material Keys. Supports optional filtering, sorting, and paging.
	// (GET /materialkeys)
	GetMaterialkeys(c *fiber.Ctx, params GetMaterialkeysParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// PostElastickey operation middleware
func (siw *ServerInterfaceWrapper) PostElastickey(c *fiber.Ctx) error {

	return siw.Handler.PostElastickey(c)
}

// GetElastickeyElasticKeyID operation middleware
func (siw *ServerInterfaceWrapper) GetElastickeyElasticKeyID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	return siw.Handler.GetElastickeyElasticKeyID(c, elasticKeyID)
}

// PostElastickeyElasticKeyIDDecrypt operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDDecrypt(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDDecrypt(c, elasticKeyID)
}

// PostElastickeyElasticKeyIDEncrypt operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDEncrypt(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostElastickeyElasticKeyIDEncryptParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "context" -------------

	err = runtime.BindQueryParameter("form", true, false, "context", query, &params.Context)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter context: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDEncrypt(c, elasticKeyID, params)
}

// PostElastickeyElasticKeyIDMaterialkey operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDMaterialkey(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDMaterialkey(c, elasticKeyID)
}

// GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID operation middleware
func (siw *ServerInterfaceWrapper) GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	// ------------- Path parameter "materialKeyID" -------------
	var materialKeyID externalRef0.MaterialKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "materialKeyID", c.Params("materialKeyID"), &materialKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter materialKeyID: %w", err).Error())
	}

	return siw.Handler.GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(c, elasticKeyID, materialKeyID)
}

// GetElastickeyElasticKeyIDMaterialkeys operation middleware
func (siw *ServerInterfaceWrapper) GetElastickeyElasticKeyIDMaterialkeys(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetElastickeyElasticKeyIDMaterialkeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "material_key_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "material_key_id", query, &params.MaterialKeyID)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter material_key_id: %w", err).Error())
	}

	// ------------- Optional query parameter "min_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_generate_date", query, &params.MinGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter min_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "max_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_generate_date", query, &params.MaxGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter max_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetElastickeyElasticKeyIDMaterialkeys(c, elasticKeyID, params)
}

// PostElastickeyElasticKeyIDSign operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDSign(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostElastickeyElasticKeyIDSignParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "context" -------------

	err = runtime.BindQueryParameter("form", true, false, "context", query, &params.Context)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter context: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDSign(c, elasticKeyID, params)
}

// PostElastickeyElasticKeyIDVerify operation middleware
func (siw *ServerInterfaceWrapper) PostElastickeyElasticKeyIDVerify(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "elasticKeyID" -------------
	var elasticKeyID externalRef0.ElasticKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "elasticKeyID", c.Params("elasticKeyID"), &elasticKeyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elasticKeyID: %w", err).Error())
	}

	return siw.Handler.PostElastickeyElasticKeyIDVerify(c, elasticKeyID)
}

// GetElastickeys operation middleware
func (siw *ServerInterfaceWrapper) GetElastickeys(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetElastickeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "elastic_key_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "elastic_key_id", query, &params.ElasticKeyID)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elastic_key_id: %w", err).Error())
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", query, &params.Provider)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter provider: %w", err).Error())
	}

	// ------------- Optional query parameter "algorithm" -------------

	err = runtime.BindQueryParameter("form", true, false, "algorithm", query, &params.Algorithm)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter algorithm: %w", err).Error())
	}

	// ------------- Optional query parameter "versioning_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "versioning_allowed", query, &params.VersioningAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter versioning_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "import_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "import_allowed", query, &params.ImportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter import_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", query, &params.Status)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter status: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetElastickeys(c, params)
}

// GetMaterialkeys operation middleware
func (siw *ServerInterfaceWrapper) GetMaterialkeys(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMaterialkeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "elastic_key_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "elastic_key_id", query, &params.ElasticKeyID)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter elastic_key_id: %w", err).Error())
	}

	// ------------- Optional query parameter "material_key_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "material_key_id", query, &params.MaterialKeyID)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter material_key_id: %w", err).Error())
	}

	// ------------- Optional query parameter "min_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_generate_date", query, &params.MinGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter min_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "max_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_generate_date", query, &params.MaxGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter max_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetMaterialkeys(c, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/elastickey", wrapper.PostElastickey)

	router.Get(options.BaseURL+"/elastickey/:elasticKeyID", wrapper.GetElastickeyElasticKeyID)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/decrypt", wrapper.PostElastickeyElasticKeyIDDecrypt)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/encrypt", wrapper.PostElastickeyElasticKeyIDEncrypt)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/materialkey", wrapper.PostElastickeyElasticKeyIDMaterialkey)

	router.Get(options.BaseURL+"/elastickey/:elasticKeyID/materialkey/:materialKeyID", wrapper.GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID)

	router.Get(options.BaseURL+"/elastickey/:elasticKeyID/materialkeys", wrapper.GetElastickeyElasticKeyIDMaterialkeys)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/sign", wrapper.PostElastickeyElasticKeyIDSign)

	router.Post(options.BaseURL+"/elastickey/:elasticKeyID/verify", wrapper.PostElastickeyElasticKeyIDVerify)

	router.Get(options.BaseURL+"/elastickeys", wrapper.GetElastickeys)

	router.Get(options.BaseURL+"/materialkeys", wrapper.GetMaterialkeys)

}

type PostElastickeyRequestObject struct {
	Body *PostElastickeyJSONRequestBody
}

type PostElastickeyResponseObject interface {
	VisitPostElastickeyResponse(ctx *fiber.Ctx) error
}

type PostElastickey200JSONResponse externalRef0.ElasticKey

func (response PostElastickey200JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostElastickey400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickey400JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickey401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickey401JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickey403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickey403JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickey404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickey404JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickey429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickey429JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickey500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickey500JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickey502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickey502JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickey503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickey503JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickey504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickey504JSONResponse) VisitPostElastickeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
}

type GetElastickeyElasticKeyIDResponseObject interface {
	VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error
}

type GetElastickeyElasticKeyID200JSONResponse externalRef0.ElasticKey

func (response GetElastickeyElasticKeyID200JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetElastickeyElasticKeyID400JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetElastickeyElasticKeyID401JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetElastickeyElasticKeyID403JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetElastickeyElasticKeyID404JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetElastickeyElasticKeyID429JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetElastickeyElasticKeyID500JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetElastickeyElasticKeyID502JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetElastickeyElasticKeyID503JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyID504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetElastickeyElasticKeyID504JSONResponse) VisitGetElastickeyElasticKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecryptRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
	Body         *PostElastickeyElasticKeyIDDecryptTextRequestBody
}

type PostElastickeyElasticKeyIDDecryptResponseObject interface {
	VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDDecrypt200TextResponse externalRef0.DecryptResponse

func (response PostElastickeyElasticKeyIDDecrypt200TextResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostElastickeyElasticKeyIDDecrypt400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDDecrypt400JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDDecrypt401JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDDecrypt403JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDDecrypt404JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDDecrypt429JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDDecrypt500JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDDecrypt502JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDDecrypt503JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDDecrypt504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDDecrypt504JSONResponse) VisitPostElastickeyElasticKeyIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncryptRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
	Params       PostElastickeyElasticKeyIDEncryptParams
	Body         *PostElastickeyElasticKeyIDEncryptTextRequestBody
}

type PostElastickeyElasticKeyIDEncryptResponseObject interface {
	VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDEncrypt200TextResponse externalRef0.EncryptResponse

func (response PostElastickeyElasticKeyIDEncrypt200TextResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostElastickeyElasticKeyIDEncrypt400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDEncrypt400JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDEncrypt401JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDEncrypt403JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDEncrypt404JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDEncrypt429JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDEncrypt500JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDEncrypt502JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDEncrypt503JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDEncrypt504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDEncrypt504JSONResponse) VisitPostElastickeyElasticKeyIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkeyRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
	Body         *PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody
}

type PostElastickeyElasticKeyIDMaterialkeyResponseObject interface {
	VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDMaterialkey200JSONResponse externalRef0.MaterialKey

func (response PostElastickeyElasticKeyIDMaterialkey200JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDMaterialkey400JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDMaterialkey401JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDMaterialkey403JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDMaterialkey404JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDMaterialkey429JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDMaterialkey500JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDMaterialkey502JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDMaterialkey503JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDMaterialkey504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDMaterialkey504JSONResponse) VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDRequestObject struct {
	ElasticKeyID  externalRef0.ElasticKeyID  `json:"elasticKeyID"`
	MaterialKeyID externalRef0.MaterialKeyID `json:"materialKeyID"`
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponseObject interface {
	VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID200JSONResponse externalRef0.MaterialKey

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID200JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID400JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID401JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID403JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID404JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID429JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID500JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID502JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID503JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID504JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeysRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
	Params       GetElastickeyElasticKeyIDMaterialkeysParams
}

type GetElastickeyElasticKeyIDMaterialkeysResponseObject interface {
	VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error
}

type GetElastickeyElasticKeyIDMaterialkeys200JSONResponse []externalRef0.MaterialKey

func (response GetElastickeyElasticKeyIDMaterialkeys200JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetElastickeyElasticKeyIDMaterialkeys400JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetElastickeyElasticKeyIDMaterialkeys401JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetElastickeyElasticKeyIDMaterialkeys403JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetElastickeyElasticKeyIDMaterialkeys404JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetElastickeyElasticKeyIDMaterialkeys429JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetElastickeyElasticKeyIDMaterialkeys500JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetElastickeyElasticKeyIDMaterialkeys502JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetElastickeyElasticKeyIDMaterialkeys503JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetElastickeyElasticKeyIDMaterialkeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetElastickeyElasticKeyIDMaterialkeys504JSONResponse) VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSignRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
	Params       PostElastickeyElasticKeyIDSignParams
	Body         *PostElastickeyElasticKeyIDSignTextRequestBody
}

type PostElastickeyElasticKeyIDSignResponseObject interface {
	VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDSign200TextResponse externalRef0.SignResponse

func (response PostElastickeyElasticKeyIDSign200TextResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostElastickeyElasticKeyIDSign400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDSign400JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDSign401JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDSign403JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDSign404JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDSign429JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDSign500JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDSign502JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDSign503JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDSign504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDSign504JSONResponse) VisitPostElastickeyElasticKeyIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerifyRequestObject struct {
	ElasticKeyID externalRef0.ElasticKeyID `json:"elasticKeyID"`
	Body         *PostElastickeyElasticKeyIDVerifyTextRequestBody
}

type PostElastickeyElasticKeyIDVerifyResponseObject interface {
	VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error
}

type PostElastickeyElasticKeyIDVerify204Response struct {
}

func (response PostElastickeyElasticKeyIDVerify204Response) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type PostElastickeyElasticKeyIDVerify400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostElastickeyElasticKeyIDVerify400JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostElastickeyElasticKeyIDVerify401JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostElastickeyElasticKeyIDVerify403JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostElastickeyElasticKeyIDVerify404JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostElastickeyElasticKeyIDVerify429JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostElastickeyElasticKeyIDVerify500JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostElastickeyElasticKeyIDVerify502JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostElastickeyElasticKeyIDVerify503JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostElastickeyElasticKeyIDVerify504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostElastickeyElasticKeyIDVerify504JSONResponse) VisitPostElastickeyElasticKeyIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetElastickeysRequestObject struct {
	Params GetElastickeysParams
}

type GetElastickeysResponseObject interface {
	VisitGetElastickeysResponse(ctx *fiber.Ctx) error
}

type GetElastickeys200JSONResponse []externalRef0.ElasticKey

func (response GetElastickeys200JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetElastickeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetElastickeys400JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetElastickeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetElastickeys401JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetElastickeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetElastickeys403JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetElastickeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetElastickeys404JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetElastickeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetElastickeys429JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetElastickeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetElastickeys500JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetElastickeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetElastickeys502JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetElastickeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetElastickeys503JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetElastickeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetElastickeys504JSONResponse) VisitGetElastickeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetMaterialkeysRequestObject struct {
	Params GetMaterialkeysParams
}

type GetMaterialkeysResponseObject interface {
	VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error
}

type GetMaterialkeys200JSONResponse []externalRef0.MaterialKey

func (response GetMaterialkeys200JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetMaterialkeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetMaterialkeys400JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetMaterialkeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetMaterialkeys401JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetMaterialkeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetMaterialkeys403JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetMaterialkeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetMaterialkeys404JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetMaterialkeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetMaterialkeys429JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetMaterialkeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetMaterialkeys500JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetMaterialkeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetMaterialkeys502JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetMaterialkeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetMaterialkeys503JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetMaterialkeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetMaterialkeys504JSONResponse) VisitGetMaterialkeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a new Elastic Key.
	// (POST /elastickey)
	PostElastickey(ctx context.Context, request PostElastickeyRequestObject) (PostElastickeyResponseObject, error)
	// Get an Elastic Key.
	// (GET /elastickey/{elasticKeyID})
	GetElastickeyElasticKeyID(ctx context.Context, request GetElastickeyElasticKeyIDRequestObject) (GetElastickeyElasticKeyIDResponseObject, error)
	// Decrypt JWE message using a specific Materia Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWE message kid header.
	// (POST /elastickey/{elasticKeyID}/decrypt)
	PostElastickeyElasticKeyIDDecrypt(ctx context.Context, request PostElastickeyElasticKeyIDDecryptRequestObject) (PostElastickeyElasticKeyIDDecryptResponseObject, error)
	// Encrypt clear text data using latest Material Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWE message kid header.
	// (POST /elastickey/{elasticKeyID}/encrypt)
	PostElastickeyElasticKeyIDEncrypt(ctx context.Context, request PostElastickeyElasticKeyIDEncryptRequestObject) (PostElastickeyElasticKeyIDEncryptResponseObject, error)
	// Generate a new Material Key in an Elastic Key.
	// (POST /elastickey/{elasticKeyID}/materialkey)
	PostElastickeyElasticKeyIDMaterialkey(ctx context.Context, request PostElastickeyElasticKeyIDMaterialkeyRequestObject) (PostElastickeyElasticKeyIDMaterialkeyResponseObject, error)
	// Get Material Key in Elastic Key.
	// (GET /elastickey/{elasticKeyID}/materialkey/{materialKeyID})
	GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(ctx context.Context, request GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDRequestObject) (GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponseObject, error)
	// Find Material Keys in Elastic Key. Supports optional filtering, sorting, and paging.
	// (GET /elastickey/{elasticKeyID}/materialkeys)
	GetElastickeyElasticKeyIDMaterialkeys(ctx context.Context, request GetElastickeyElasticKeyIDMaterialkeysRequestObject) (GetElastickeyElasticKeyIDMaterialkeysResponseObject, error)
	// Sign clear text using latest Material Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWS message kid header.
	// (POST /elastickey/{elasticKeyID}/sign)
	PostElastickeyElasticKeyIDSign(ctx context.Context, request PostElastickeyElasticKeyIDSignRequestObject) (PostElastickeyElasticKeyIDSignResponseObject, error)
	// Verify JWS message using a specific Material Key from a specific Elastic Key. The Material Key in the Elastic Key is identified by the JWS message kid header.
	// (POST /elastickey/{elasticKeyID}/verify)
	PostElastickeyElasticKeyIDVerify(ctx context.Context, request PostElastickeyElasticKeyIDVerifyRequestObject) (PostElastickeyElasticKeyIDVerifyResponseObject, error)
	// Find Elastic Keys. Supports optional filtering, sorting, and paging.
	// (GET /elastickeys)
	GetElastickeys(ctx context.Context, request GetElastickeysRequestObject) (GetElastickeysResponseObject, error)
	// Find Material Keys. Supports optional filtering, sorting, and paging.
	// (GET /materialkeys)
	GetMaterialkeys(ctx context.Context, request GetMaterialkeysRequestObject) (GetMaterialkeysResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostElastickey operation middleware
func (sh *strictHandler) PostElastickey(ctx *fiber.Ctx) error {
	var request PostElastickeyRequestObject

	var body PostElastickeyJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickey(ctx.UserContext(), request.(PostElastickeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyResponseObject); ok {
		if err := validResponse.VisitPostElastickeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetElastickeyElasticKeyID operation middleware
func (sh *strictHandler) GetElastickeyElasticKeyID(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error {
	var request GetElastickeyElasticKeyIDRequestObject

	request.ElasticKeyID = elasticKeyID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetElastickeyElasticKeyID(ctx.UserContext(), request.(GetElastickeyElasticKeyIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetElastickeyElasticKeyID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetElastickeyElasticKeyIDResponseObject); ok {
		if err := validResponse.VisitGetElastickeyElasticKeyIDResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDDecrypt operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDDecrypt(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error {
	var request PostElastickeyElasticKeyIDDecryptRequestObject

	request.ElasticKeyID = elasticKeyID

	data := ctx.Request().Body()
	body := PostElastickeyElasticKeyIDDecryptTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDDecrypt(ctx.UserContext(), request.(PostElastickeyElasticKeyIDDecryptRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDDecrypt")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDDecryptResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDDecryptResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDEncrypt operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDEncrypt(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params PostElastickeyElasticKeyIDEncryptParams) error {
	var request PostElastickeyElasticKeyIDEncryptRequestObject

	request.ElasticKeyID = elasticKeyID
	request.Params = params

	data := ctx.Request().Body()
	body := PostElastickeyElasticKeyIDEncryptTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDEncrypt(ctx.UserContext(), request.(PostElastickeyElasticKeyIDEncryptRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDEncrypt")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDEncryptResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDEncryptResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDMaterialkey operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDMaterialkey(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error {
	var request PostElastickeyElasticKeyIDMaterialkeyRequestObject

	request.ElasticKeyID = elasticKeyID

	var body PostElastickeyElasticKeyIDMaterialkeyJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDMaterialkey(ctx.UserContext(), request.(PostElastickeyElasticKeyIDMaterialkeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDMaterialkey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDMaterialkeyResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDMaterialkeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID operation middleware
func (sh *strictHandler) GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, materialKeyID externalRef0.MaterialKeyID) error {
	var request GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDRequestObject

	request.ElasticKeyID = elasticKeyID
	request.MaterialKeyID = materialKeyID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID(ctx.UserContext(), request.(GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetElastickeyElasticKeyIDMaterialkeyMaterialKeyID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponseObject); ok {
		if err := validResponse.VisitGetElastickeyElasticKeyIDMaterialkeyMaterialKeyIDResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetElastickeyElasticKeyIDMaterialkeys operation middleware
func (sh *strictHandler) GetElastickeyElasticKeyIDMaterialkeys(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params GetElastickeyElasticKeyIDMaterialkeysParams) error {
	var request GetElastickeyElasticKeyIDMaterialkeysRequestObject

	request.ElasticKeyID = elasticKeyID
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetElastickeyElasticKeyIDMaterialkeys(ctx.UserContext(), request.(GetElastickeyElasticKeyIDMaterialkeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetElastickeyElasticKeyIDMaterialkeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetElastickeyElasticKeyIDMaterialkeysResponseObject); ok {
		if err := validResponse.VisitGetElastickeyElasticKeyIDMaterialkeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDSign operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDSign(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID, params PostElastickeyElasticKeyIDSignParams) error {
	var request PostElastickeyElasticKeyIDSignRequestObject

	request.ElasticKeyID = elasticKeyID
	request.Params = params

	data := ctx.Request().Body()
	body := PostElastickeyElasticKeyIDSignTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDSign(ctx.UserContext(), request.(PostElastickeyElasticKeyIDSignRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDSign")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDSignResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDSignResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostElastickeyElasticKeyIDVerify operation middleware
func (sh *strictHandler) PostElastickeyElasticKeyIDVerify(ctx *fiber.Ctx, elasticKeyID externalRef0.ElasticKeyID) error {
	var request PostElastickeyElasticKeyIDVerifyRequestObject

	request.ElasticKeyID = elasticKeyID

	data := ctx.Request().Body()
	body := PostElastickeyElasticKeyIDVerifyTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostElastickeyElasticKeyIDVerify(ctx.UserContext(), request.(PostElastickeyElasticKeyIDVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElastickeyElasticKeyIDVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostElastickeyElasticKeyIDVerifyResponseObject); ok {
		if err := validResponse.VisitPostElastickeyElasticKeyIDVerifyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetElastickeys operation middleware
func (sh *strictHandler) GetElastickeys(ctx *fiber.Ctx, params GetElastickeysParams) error {
	var request GetElastickeysRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetElastickeys(ctx.UserContext(), request.(GetElastickeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetElastickeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetElastickeysResponseObject); ok {
		if err := validResponse.VisitGetElastickeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMaterialkeys operation middleware
func (sh *strictHandler) GetMaterialkeys(ctx *fiber.Ctx, params GetMaterialkeysParams) error {
	var request GetMaterialkeysRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetMaterialkeys(ctx.UserContext(), request.(GetMaterialkeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMaterialkeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetMaterialkeysResponseObject); ok {
		if err := validResponse.VisitGetMaterialkeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/9t5gT9lngAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./openapi_spec_components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
