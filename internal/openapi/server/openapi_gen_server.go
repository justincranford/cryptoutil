// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "cryptoutil/internal/openapi/model"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// PostKeypoolKeyPoolIDEncryptParams defines parameters for PostKeypoolKeyPoolIDEncrypt.
type PostKeypoolKeyPoolIDEncryptParams struct {
	Iv  *externalRef0.SymmetricCipherInitializationVector        `form:"iv,omitempty" json:"iv,omitempty"`
	Aad *externalRef0.SymmetricCipherAdditionalAuthenticatedData `form:"aad,omitempty" json:"aad,omitempty"`
}

// GetKeypoolKeyPoolIDKeysParams defines parameters for GetKeypoolKeyPoolIDKeys.
type GetKeypoolKeyPoolIDKeysParams struct {
	// Id Filter by the Key ID.
	Id *externalRef0.KeyQueryParamIds `form:"id,omitempty" json:"id,omitempty"`

	// MinGenerateDate Filter by the Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.KeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.KeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetKeypoolsParams defines parameters for GetKeypools.
type GetKeypoolsParams struct {
	// Id Filter by the Key Pool ID (UUID).
	Id *externalRef0.KeyPoolQueryParamIds `form:"id,omitempty" json:"id,omitempty"`

	// Name Filter by the Key Pool name.
	Name *externalRef0.KeyPoolQueryParamNames `form:"name,omitempty" json:"name,omitempty"`

	// Provider Filter by Key Pool provider.
	Provider *externalRef0.KeyPoolQueryParamProviders `form:"provider,omitempty" json:"provider,omitempty"`

	// Algorithm Filter by cryptographic algorithm.
	Algorithm *externalRef0.KeyPoolQueryParamAlgorithms `form:"algorithm,omitempty" json:"algorithm,omitempty"`

	// VersioningAllowed Filter by whether versioning is allowed.
	VersioningAllowed *externalRef0.KeyPoolQueryParamVersioningAllowed `form:"versioning_allowed,omitempty" json:"versioning_allowed,omitempty"`

	// ImportAllowed Filter by whether import is allowed.
	ImportAllowed *externalRef0.KeyPoolQueryParamImportAllowed `form:"import_allowed,omitempty" json:"import_allowed,omitempty"`

	// ExportAllowed Filter by whether export is allowed.
	ExportAllowed *externalRef0.KeyPoolQueryParamExportAllowed `form:"export_allowed,omitempty" json:"export_allowed,omitempty"`

	// Status Filter by the Key Pool status.
	Status *externalRef0.KeyPoolQueryParamStatuses `form:"status,omitempty" json:"status,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `name:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyPoolQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyPoolQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyPoolQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// GetKeysParams defines parameters for GetKeys.
type GetKeysParams struct {
	// Pool Filter by the Key Pool ID (uuid).
	Pool *externalRef0.KeyQueryParamKeyPoolIds `form:"pool,omitempty" json:"pool,omitempty"`

	// Id Filter by the Key ID.
	Id *externalRef0.KeyQueryParamIds `form:"id,omitempty" json:"id,omitempty"`

	// MinGenerateDate Filter by the Key minimum generate date (inclusive).
	MinGenerateDate *externalRef0.KeyQueryParamMinimumGenerateDate `form:"min_generate_date,omitempty" json:"min_generate_date,omitempty"`

	// MaxGenerateDate Filter by the Key maximum generate date (inclusive).
	MaxGenerateDate *externalRef0.KeyQueryParamMaximumGenerateDate `form:"max_generate_date,omitempty" json:"max_generate_date,omitempty"`

	// Sort Specify sorting as `fieldName:direction` (e.g., `id:asc`). Repeat parameter for multiple sort fields.
	Sort *externalRef0.KeyQueryParamSorts      `form:"sort,omitempty" json:"sort,omitempty"`
	Page *externalRef0.KeyQueryParamPageNumber `form:"page,omitempty" json:"page,omitempty"`
	Size *externalRef0.KeyQueryParamPageSize   `form:"size,omitempty" json:"size,omitempty"`
}

// PostKeypoolJSONRequestBody defines body for PostKeypool for application/json ContentType.
type PostKeypoolJSONRequestBody = externalRef0.KeyPoolCreate

// PostKeypoolKeyPoolIDDecryptTextRequestBody defines body for PostKeypoolKeyPoolIDDecrypt for text/plain ContentType.
type PostKeypoolKeyPoolIDDecryptTextRequestBody = externalRef0.DecryptRequest

// PostKeypoolKeyPoolIDEncryptTextRequestBody defines body for PostKeypoolKeyPoolIDEncrypt for text/plain ContentType.
type PostKeypoolKeyPoolIDEncryptTextRequestBody = externalRef0.EncryptRequest

// PostKeypoolKeyPoolIDKeyJSONRequestBody defines body for PostKeypoolKeyPoolIDKey for application/json ContentType.
type PostKeypoolKeyPoolIDKeyJSONRequestBody = externalRef0.KeyGenerate

// PostKeypoolKeyPoolIDSignTextRequestBody defines body for PostKeypoolKeyPoolIDSign for text/plain ContentType.
type PostKeypoolKeyPoolIDSignTextRequestBody = externalRef0.SignRequest

// PostKeypoolKeyPoolIDVerifyTextRequestBody defines body for PostKeypoolKeyPoolIDVerify for text/plain ContentType.
type PostKeypoolKeyPoolIDVerifyTextRequestBody = externalRef0.VerifyRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new Key Pool.
	// (POST /keypool)
	PostKeypool(c *fiber.Ctx) error
	// Get a Key Pool.
	// (GET /keypool/{keyPoolID})
	GetKeypoolKeyPoolID(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error
	// Decrypt ciphertext using a specific key cryptoutilPool. The key material in the key pool is identified by the JWE message kid header.
	// (POST /keypool/{keyPoolID}/decrypt)
	PostKeypoolKeyPoolIDDecrypt(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error
	// Encrypt clear text data using a specific key cryptoutilPool. The key material in the key pool is identified by the JWE message kid header.
	// (POST /keypool/{keyPoolID}/encrypt)
	PostKeypoolKeyPoolIDEncrypt(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params PostKeypoolKeyPoolIDEncryptParams) error
	// Generate a new Key in a Key Pool.
	// (POST /keypool/{keyPoolID}/key)
	PostKeypoolKeyPoolIDKey(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error
	// Get Key in Key Pool.
	// (GET /keypool/{keyPoolID}/key/{keyID})
	GetKeypoolKeyPoolIDKeyKeyID(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, keyID externalRef0.KeyId) error
	// Find Keys in Key Pool. Supports optional filtering, sorting, and paging.
	// (GET /keypool/{keyPoolID}/keys)
	GetKeypoolKeyPoolIDKeys(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params GetKeypoolKeyPoolIDKeysParams) error
	// Sign clear text using a specific key. The key material in the key pool is identified by the JWS message kid header.
	// (POST /keypool/{keyPoolID}/sign)
	PostKeypoolKeyPoolIDSign(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error
	// Verify JWS message using a specific key cryptoutilPool. The key material in the key pool is identified by the JWS message kid header.
	// (POST /keypool/{keyPoolID}/verify)
	PostKeypoolKeyPoolIDVerify(c *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error
	// Find Key Pools. Supports optional filtering, sorting, and paging.
	// (GET /keypools)
	GetKeypools(c *fiber.Ctx, params GetKeypoolsParams) error
	// Find Keys. Supports optional filtering, sorting, and paging.
	// (GET /keys)
	GetKeys(c *fiber.Ctx, params GetKeysParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// PostKeypool operation middleware
func (siw *ServerInterfaceWrapper) PostKeypool(c *fiber.Ctx) error {

	return siw.Handler.PostKeypool(c)
}

// GetKeypoolKeyPoolID operation middleware
func (siw *ServerInterfaceWrapper) GetKeypoolKeyPoolID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	return siw.Handler.GetKeypoolKeyPoolID(c, keyPoolID)
}

// PostKeypoolKeyPoolIDDecrypt operation middleware
func (siw *ServerInterfaceWrapper) PostKeypoolKeyPoolIDDecrypt(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	return siw.Handler.PostKeypoolKeyPoolIDDecrypt(c, keyPoolID)
}

// PostKeypoolKeyPoolIDEncrypt operation middleware
func (siw *ServerInterfaceWrapper) PostKeypoolKeyPoolIDEncrypt(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostKeypoolKeyPoolIDEncryptParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "iv" -------------

	err = runtime.BindQueryParameter("form", true, false, "iv", query, &params.Iv)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter iv: %w", err).Error())
	}

	// ------------- Optional query parameter "aad" -------------

	err = runtime.BindQueryParameter("form", true, false, "aad", query, &params.Aad)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter aad: %w", err).Error())
	}

	return siw.Handler.PostKeypoolKeyPoolIDEncrypt(c, keyPoolID, params)
}

// PostKeypoolKeyPoolIDKey operation middleware
func (siw *ServerInterfaceWrapper) PostKeypoolKeyPoolIDKey(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	return siw.Handler.PostKeypoolKeyPoolIDKey(c, keyPoolID)
}

// GetKeypoolKeyPoolIDKeyKeyID operation middleware
func (siw *ServerInterfaceWrapper) GetKeypoolKeyPoolIDKeyKeyID(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	// ------------- Path parameter "keyID" -------------
	var keyID externalRef0.KeyId

	err = runtime.BindStyledParameterWithOptions("simple", "keyID", c.Params("keyID"), &keyID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyID: %w", err).Error())
	}

	return siw.Handler.GetKeypoolKeyPoolIDKeyKeyID(c, keyPoolID, keyID)
}

// GetKeypoolKeyPoolIDKeys operation middleware
func (siw *ServerInterfaceWrapper) GetKeypoolKeyPoolIDKeys(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeypoolKeyPoolIDKeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", query, &params.Id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Optional query parameter "min_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_generate_date", query, &params.MinGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter min_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "max_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_generate_date", query, &params.MaxGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter max_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetKeypoolKeyPoolIDKeys(c, keyPoolID, params)
}

// PostKeypoolKeyPoolIDSign operation middleware
func (siw *ServerInterfaceWrapper) PostKeypoolKeyPoolIDSign(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	return siw.Handler.PostKeypoolKeyPoolIDSign(c, keyPoolID)
}

// PostKeypoolKeyPoolIDVerify operation middleware
func (siw *ServerInterfaceWrapper) PostKeypoolKeyPoolIDVerify(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "keyPoolID" -------------
	var keyPoolID externalRef0.KeyPoolId

	err = runtime.BindStyledParameterWithOptions("simple", "keyPoolID", c.Params("keyPoolID"), &keyPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter keyPoolID: %w", err).Error())
	}

	return siw.Handler.PostKeypoolKeyPoolIDVerify(c, keyPoolID)
}

// GetKeypools operation middleware
func (siw *ServerInterfaceWrapper) GetKeypools(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeypoolsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", query, &params.Id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", query, &params.Provider)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter provider: %w", err).Error())
	}

	// ------------- Optional query parameter "algorithm" -------------

	err = runtime.BindQueryParameter("form", true, false, "algorithm", query, &params.Algorithm)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter algorithm: %w", err).Error())
	}

	// ------------- Optional query parameter "versioning_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "versioning_allowed", query, &params.VersioningAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter versioning_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "import_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "import_allowed", query, &params.ImportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter import_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "export_allowed" -------------

	err = runtime.BindQueryParameter("form", true, false, "export_allowed", query, &params.ExportAllowed)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter export_allowed: %w", err).Error())
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", query, &params.Status)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter status: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetKeypools(c, params)
}

// GetKeys operation middleware
func (siw *ServerInterfaceWrapper) GetKeys(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, false, "pool", query, &params.Pool)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter pool: %w", err).Error())
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", query, &params.Id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Optional query parameter "min_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_generate_date", query, &params.MinGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter min_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "max_generate_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_generate_date", query, &params.MaxGenerateDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter max_generate_date: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", query, &params.Size)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter size: %w", err).Error())
	}

	return siw.Handler.GetKeys(c, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/keypool", wrapper.PostKeypool)

	router.Get(options.BaseURL+"/keypool/:keyPoolID", wrapper.GetKeypoolKeyPoolID)

	router.Post(options.BaseURL+"/keypool/:keyPoolID/decrypt", wrapper.PostKeypoolKeyPoolIDDecrypt)

	router.Post(options.BaseURL+"/keypool/:keyPoolID/encrypt", wrapper.PostKeypoolKeyPoolIDEncrypt)

	router.Post(options.BaseURL+"/keypool/:keyPoolID/key", wrapper.PostKeypoolKeyPoolIDKey)

	router.Get(options.BaseURL+"/keypool/:keyPoolID/key/:keyID", wrapper.GetKeypoolKeyPoolIDKeyKeyID)

	router.Get(options.BaseURL+"/keypool/:keyPoolID/keys", wrapper.GetKeypoolKeyPoolIDKeys)

	router.Post(options.BaseURL+"/keypool/:keyPoolID/sign", wrapper.PostKeypoolKeyPoolIDSign)

	router.Post(options.BaseURL+"/keypool/:keyPoolID/verify", wrapper.PostKeypoolKeyPoolIDVerify)

	router.Get(options.BaseURL+"/keypools", wrapper.GetKeypools)

	router.Get(options.BaseURL+"/keys", wrapper.GetKeys)

}

type PostKeypoolRequestObject struct {
	Body *PostKeypoolJSONRequestBody
}

type PostKeypoolResponseObject interface {
	VisitPostKeypoolResponse(ctx *fiber.Ctx) error
}

type PostKeypool200JSONResponse externalRef0.KeyPool

func (response PostKeypool200JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostKeypool400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypool400JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypool401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypool401JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypool403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypool403JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypool404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypool404JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypool429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypool429JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypool500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypool500JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypool502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypool502JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypool503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypool503JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypool504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypool504JSONResponse) VisitPostKeypoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
}

type GetKeypoolKeyPoolIDResponseObject interface {
	VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error
}

type GetKeypoolKeyPoolID200JSONResponse externalRef0.KeyPool

func (response GetKeypoolKeyPoolID200JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypoolKeyPoolID400JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypoolKeyPoolID401JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypoolKeyPoolID403JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypoolKeyPoolID404JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypoolKeyPoolID429JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypoolKeyPoolID500JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypoolKeyPoolID502JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypoolKeyPoolID503JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolID504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypoolKeyPoolID504JSONResponse) VisitGetKeypoolKeyPoolIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecryptRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Body      *PostKeypoolKeyPoolIDDecryptTextRequestBody
}

type PostKeypoolKeyPoolIDDecryptResponseObject interface {
	VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error
}

type PostKeypoolKeyPoolIDDecrypt200TextResponse externalRef0.DecryptResponse

func (response PostKeypoolKeyPoolIDDecrypt200TextResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostKeypoolKeyPoolIDDecrypt400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypoolKeyPoolIDDecrypt400JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypoolKeyPoolIDDecrypt401JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypoolKeyPoolIDDecrypt403JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypoolKeyPoolIDDecrypt404JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypoolKeyPoolIDDecrypt429JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypoolKeyPoolIDDecrypt500JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypoolKeyPoolIDDecrypt502JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypoolKeyPoolIDDecrypt503JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDDecrypt504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypoolKeyPoolIDDecrypt504JSONResponse) VisitPostKeypoolKeyPoolIDDecryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncryptRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Params    PostKeypoolKeyPoolIDEncryptParams
	Body      *PostKeypoolKeyPoolIDEncryptTextRequestBody
}

type PostKeypoolKeyPoolIDEncryptResponseObject interface {
	VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error
}

type PostKeypoolKeyPoolIDEncrypt200TextResponse externalRef0.EncryptResponse

func (response PostKeypoolKeyPoolIDEncrypt200TextResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostKeypoolKeyPoolIDEncrypt400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypoolKeyPoolIDEncrypt400JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypoolKeyPoolIDEncrypt401JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypoolKeyPoolIDEncrypt403JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypoolKeyPoolIDEncrypt404JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypoolKeyPoolIDEncrypt429JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypoolKeyPoolIDEncrypt500JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypoolKeyPoolIDEncrypt502JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypoolKeyPoolIDEncrypt503JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDEncrypt504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypoolKeyPoolIDEncrypt504JSONResponse) VisitPostKeypoolKeyPoolIDEncryptResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKeyRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Body      *PostKeypoolKeyPoolIDKeyJSONRequestBody
}

type PostKeypoolKeyPoolIDKeyResponseObject interface {
	VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error
}

type PostKeypoolKeyPoolIDKey200JSONResponse externalRef0.Key

func (response PostKeypoolKeyPoolIDKey200JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypoolKeyPoolIDKey400JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypoolKeyPoolIDKey401JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypoolKeyPoolIDKey403JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypoolKeyPoolIDKey404JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypoolKeyPoolIDKey429JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypoolKeyPoolIDKey500JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypoolKeyPoolIDKey502JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypoolKeyPoolIDKey503JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDKey504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypoolKeyPoolIDKey504JSONResponse) VisitPostKeypoolKeyPoolIDKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyIDRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	KeyID     externalRef0.KeyId     `json:"keyID"`
}

type GetKeypoolKeyPoolIDKeyKeyIDResponseObject interface {
	VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error
}

type GetKeypoolKeyPoolIDKeyKeyID200JSONResponse externalRef0.Key

func (response GetKeypoolKeyPoolIDKeyKeyID200JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypoolKeyPoolIDKeyKeyID400JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypoolKeyPoolIDKeyKeyID401JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypoolKeyPoolIDKeyKeyID403JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypoolKeyPoolIDKeyKeyID404JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypoolKeyPoolIDKeyKeyID429JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypoolKeyPoolIDKeyKeyID500JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypoolKeyPoolIDKeyKeyID502JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypoolKeyPoolIDKeyKeyID503JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeyKeyID504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypoolKeyPoolIDKeyKeyID504JSONResponse) VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeysRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Params    GetKeypoolKeyPoolIDKeysParams
}

type GetKeypoolKeyPoolIDKeysResponseObject interface {
	VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error
}

type GetKeypoolKeyPoolIDKeys200JSONResponse []externalRef0.Key

func (response GetKeypoolKeyPoolIDKeys200JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypoolKeyPoolIDKeys400JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypoolKeyPoolIDKeys401JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypoolKeyPoolIDKeys403JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypoolKeyPoolIDKeys404JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypoolKeyPoolIDKeys429JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypoolKeyPoolIDKeys500JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypoolKeyPoolIDKeys502JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypoolKeyPoolIDKeys503JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypoolKeyPoolIDKeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypoolKeyPoolIDKeys504JSONResponse) VisitGetKeypoolKeyPoolIDKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDSignRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Body      *PostKeypoolKeyPoolIDSignTextRequestBody
}

type PostKeypoolKeyPoolIDSignResponseObject interface {
	VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error
}

type PostKeypoolKeyPoolIDSign200TextResponse externalRef0.SignResponse

func (response PostKeypoolKeyPoolIDSign200TextResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type PostKeypoolKeyPoolIDSign400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypoolKeyPoolIDSign400JSONResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDSign401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypoolKeyPoolIDSign401JSONResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDSign403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypoolKeyPoolIDSign403JSONResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDSign404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypoolKeyPoolIDSign404JSONResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDSign429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypoolKeyPoolIDSign429JSONResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDSign500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypoolKeyPoolIDSign500JSONResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDSign502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypoolKeyPoolIDSign502JSONResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDSign503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypoolKeyPoolIDSign503JSONResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDSign504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypoolKeyPoolIDSign504JSONResponse) VisitPostKeypoolKeyPoolIDSignResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDVerifyRequestObject struct {
	KeyPoolID externalRef0.KeyPoolId `json:"keyPoolID"`
	Body      *PostKeypoolKeyPoolIDVerifyTextRequestBody
}

type PostKeypoolKeyPoolIDVerifyResponseObject interface {
	VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error
}

type PostKeypoolKeyPoolIDVerify204Response struct {
}

func (response PostKeypoolKeyPoolIDVerify204Response) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type PostKeypoolKeyPoolIDVerify400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response PostKeypoolKeyPoolIDVerify400JSONResponse) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDVerify401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response PostKeypoolKeyPoolIDVerify401JSONResponse) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDVerify403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response PostKeypoolKeyPoolIDVerify403JSONResponse) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDVerify404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response PostKeypoolKeyPoolIDVerify404JSONResponse) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDVerify429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response PostKeypoolKeyPoolIDVerify429JSONResponse) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDVerify500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response PostKeypoolKeyPoolIDVerify500JSONResponse) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDVerify502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response PostKeypoolKeyPoolIDVerify502JSONResponse) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDVerify503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response PostKeypoolKeyPoolIDVerify503JSONResponse) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKeypoolKeyPoolIDVerify504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response PostKeypoolKeyPoolIDVerify504JSONResponse) VisitPostKeypoolKeyPoolIDVerifyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeypoolsRequestObject struct {
	Params GetKeypoolsParams
}

type GetKeypoolsResponseObject interface {
	VisitGetKeypoolsResponse(ctx *fiber.Ctx) error
}

type GetKeypools200JSONResponse []externalRef0.KeyPool

func (response GetKeypools200JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeypools400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeypools400JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeypools401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeypools401JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeypools403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeypools403JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeypools404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeypools404JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeypools429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeypools429JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeypools500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeypools500JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeypools502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeypools502JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeypools503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeypools503JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeypools504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeypools504JSONResponse) VisitGetKeypoolsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKeysRequestObject struct {
	Params GetKeysParams
}

type GetKeysResponseObject interface {
	VisitGetKeysResponse(ctx *fiber.Ctx) error
}

type GetKeys200JSONResponse []externalRef0.Key

func (response GetKeys200JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKeys400JSONResponse struct{ externalRef0.HTTP400BadRequest }

func (response GetKeys400JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKeys401JSONResponse struct {
	externalRef0.HTTP401Unauthorized
}

func (response GetKeys401JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKeys403JSONResponse struct{ externalRef0.HTTP403Forbidden }

func (response GetKeys403JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKeys404JSONResponse struct{ externalRef0.HTTP404NotFound }

func (response GetKeys404JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKeys429JSONResponse struct {
	externalRef0.HTTP429TooManyRequests
}

func (response GetKeys429JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKeys500JSONResponse struct {
	externalRef0.HTTP500InternalServerError
}

func (response GetKeys500JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKeys502JSONResponse struct{ externalRef0.HTTP502BadGateway }

func (response GetKeys502JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(502)

	return ctx.JSON(&response)
}

type GetKeys503JSONResponse struct {
	externalRef0.HTTP503ServiceUnavailable
}

func (response GetKeys503JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKeys504JSONResponse struct {
	externalRef0.HTTP504GatewayTimeout
}

func (response GetKeys504JSONResponse) VisitGetKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a new Key Pool.
	// (POST /keypool)
	PostKeypool(ctx context.Context, request PostKeypoolRequestObject) (PostKeypoolResponseObject, error)
	// Get a Key Pool.
	// (GET /keypool/{keyPoolID})
	GetKeypoolKeyPoolID(ctx context.Context, request GetKeypoolKeyPoolIDRequestObject) (GetKeypoolKeyPoolIDResponseObject, error)
	// Decrypt ciphertext using a specific key cryptoutilPool. The key material in the key pool is identified by the JWE message kid header.
	// (POST /keypool/{keyPoolID}/decrypt)
	PostKeypoolKeyPoolIDDecrypt(ctx context.Context, request PostKeypoolKeyPoolIDDecryptRequestObject) (PostKeypoolKeyPoolIDDecryptResponseObject, error)
	// Encrypt clear text data using a specific key cryptoutilPool. The key material in the key pool is identified by the JWE message kid header.
	// (POST /keypool/{keyPoolID}/encrypt)
	PostKeypoolKeyPoolIDEncrypt(ctx context.Context, request PostKeypoolKeyPoolIDEncryptRequestObject) (PostKeypoolKeyPoolIDEncryptResponseObject, error)
	// Generate a new Key in a Key Pool.
	// (POST /keypool/{keyPoolID}/key)
	PostKeypoolKeyPoolIDKey(ctx context.Context, request PostKeypoolKeyPoolIDKeyRequestObject) (PostKeypoolKeyPoolIDKeyResponseObject, error)
	// Get Key in Key Pool.
	// (GET /keypool/{keyPoolID}/key/{keyID})
	GetKeypoolKeyPoolIDKeyKeyID(ctx context.Context, request GetKeypoolKeyPoolIDKeyKeyIDRequestObject) (GetKeypoolKeyPoolIDKeyKeyIDResponseObject, error)
	// Find Keys in Key Pool. Supports optional filtering, sorting, and paging.
	// (GET /keypool/{keyPoolID}/keys)
	GetKeypoolKeyPoolIDKeys(ctx context.Context, request GetKeypoolKeyPoolIDKeysRequestObject) (GetKeypoolKeyPoolIDKeysResponseObject, error)
	// Sign clear text using a specific key. The key material in the key pool is identified by the JWS message kid header.
	// (POST /keypool/{keyPoolID}/sign)
	PostKeypoolKeyPoolIDSign(ctx context.Context, request PostKeypoolKeyPoolIDSignRequestObject) (PostKeypoolKeyPoolIDSignResponseObject, error)
	// Verify JWS message using a specific key cryptoutilPool. The key material in the key pool is identified by the JWS message kid header.
	// (POST /keypool/{keyPoolID}/verify)
	PostKeypoolKeyPoolIDVerify(ctx context.Context, request PostKeypoolKeyPoolIDVerifyRequestObject) (PostKeypoolKeyPoolIDVerifyResponseObject, error)
	// Find Key Pools. Supports optional filtering, sorting, and paging.
	// (GET /keypools)
	GetKeypools(ctx context.Context, request GetKeypoolsRequestObject) (GetKeypoolsResponseObject, error)
	// Find Keys. Supports optional filtering, sorting, and paging.
	// (GET /keys)
	GetKeys(ctx context.Context, request GetKeysRequestObject) (GetKeysResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostKeypool operation middleware
func (sh *strictHandler) PostKeypool(ctx *fiber.Ctx) error {
	var request PostKeypoolRequestObject

	var body PostKeypoolJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypool(ctx.UserContext(), request.(PostKeypoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolResponseObject); ok {
		if err := validResponse.VisitPostKeypoolResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeypoolKeyPoolID operation middleware
func (sh *strictHandler) GetKeypoolKeyPoolID(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error {
	var request GetKeypoolKeyPoolIDRequestObject

	request.KeyPoolID = keyPoolID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypoolKeyPoolID(ctx.UserContext(), request.(GetKeypoolKeyPoolIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypoolKeyPoolID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolKeyPoolIDResponseObject); ok {
		if err := validResponse.VisitGetKeypoolKeyPoolIDResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypoolKeyPoolIDDecrypt operation middleware
func (sh *strictHandler) PostKeypoolKeyPoolIDDecrypt(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error {
	var request PostKeypoolKeyPoolIDDecryptRequestObject

	request.KeyPoolID = keyPoolID

	data := ctx.Request().Body()
	body := PostKeypoolKeyPoolIDDecryptTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypoolKeyPoolIDDecrypt(ctx.UserContext(), request.(PostKeypoolKeyPoolIDDecryptRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypoolKeyPoolIDDecrypt")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolKeyPoolIDDecryptResponseObject); ok {
		if err := validResponse.VisitPostKeypoolKeyPoolIDDecryptResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypoolKeyPoolIDEncrypt operation middleware
func (sh *strictHandler) PostKeypoolKeyPoolIDEncrypt(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params PostKeypoolKeyPoolIDEncryptParams) error {
	var request PostKeypoolKeyPoolIDEncryptRequestObject

	request.KeyPoolID = keyPoolID
	request.Params = params

	data := ctx.Request().Body()
	body := PostKeypoolKeyPoolIDEncryptTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypoolKeyPoolIDEncrypt(ctx.UserContext(), request.(PostKeypoolKeyPoolIDEncryptRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypoolKeyPoolIDEncrypt")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolKeyPoolIDEncryptResponseObject); ok {
		if err := validResponse.VisitPostKeypoolKeyPoolIDEncryptResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypoolKeyPoolIDKey operation middleware
func (sh *strictHandler) PostKeypoolKeyPoolIDKey(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error {
	var request PostKeypoolKeyPoolIDKeyRequestObject

	request.KeyPoolID = keyPoolID

	var body PostKeypoolKeyPoolIDKeyJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypoolKeyPoolIDKey(ctx.UserContext(), request.(PostKeypoolKeyPoolIDKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypoolKeyPoolIDKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolKeyPoolIDKeyResponseObject); ok {
		if err := validResponse.VisitPostKeypoolKeyPoolIDKeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeypoolKeyPoolIDKeyKeyID operation middleware
func (sh *strictHandler) GetKeypoolKeyPoolIDKeyKeyID(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, keyID externalRef0.KeyId) error {
	var request GetKeypoolKeyPoolIDKeyKeyIDRequestObject

	request.KeyPoolID = keyPoolID
	request.KeyID = keyID

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypoolKeyPoolIDKeyKeyID(ctx.UserContext(), request.(GetKeypoolKeyPoolIDKeyKeyIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypoolKeyPoolIDKeyKeyID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolKeyPoolIDKeyKeyIDResponseObject); ok {
		if err := validResponse.VisitGetKeypoolKeyPoolIDKeyKeyIDResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeypoolKeyPoolIDKeys operation middleware
func (sh *strictHandler) GetKeypoolKeyPoolIDKeys(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId, params GetKeypoolKeyPoolIDKeysParams) error {
	var request GetKeypoolKeyPoolIDKeysRequestObject

	request.KeyPoolID = keyPoolID
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypoolKeyPoolIDKeys(ctx.UserContext(), request.(GetKeypoolKeyPoolIDKeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypoolKeyPoolIDKeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolKeyPoolIDKeysResponseObject); ok {
		if err := validResponse.VisitGetKeypoolKeyPoolIDKeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypoolKeyPoolIDSign operation middleware
func (sh *strictHandler) PostKeypoolKeyPoolIDSign(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error {
	var request PostKeypoolKeyPoolIDSignRequestObject

	request.KeyPoolID = keyPoolID

	data := ctx.Request().Body()
	body := PostKeypoolKeyPoolIDSignTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypoolKeyPoolIDSign(ctx.UserContext(), request.(PostKeypoolKeyPoolIDSignRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypoolKeyPoolIDSign")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolKeyPoolIDSignResponseObject); ok {
		if err := validResponse.VisitPostKeypoolKeyPoolIDSignResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKeypoolKeyPoolIDVerify operation middleware
func (sh *strictHandler) PostKeypoolKeyPoolIDVerify(ctx *fiber.Ctx, keyPoolID externalRef0.KeyPoolId) error {
	var request PostKeypoolKeyPoolIDVerifyRequestObject

	request.KeyPoolID = keyPoolID

	data := ctx.Request().Body()
	body := PostKeypoolKeyPoolIDVerifyTextRequestBody(data)
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKeypoolKeyPoolIDVerify(ctx.UserContext(), request.(PostKeypoolKeyPoolIDVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKeypoolKeyPoolIDVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKeypoolKeyPoolIDVerifyResponseObject); ok {
		if err := validResponse.VisitPostKeypoolKeyPoolIDVerifyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeypools operation middleware
func (sh *strictHandler) GetKeypools(ctx *fiber.Ctx, params GetKeypoolsParams) error {
	var request GetKeypoolsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeypools(ctx.UserContext(), request.(GetKeypoolsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeypools")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeypoolsResponseObject); ok {
		if err := validResponse.VisitGetKeypoolsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKeys operation middleware
func (sh *strictHandler) GetKeys(ctx *fiber.Ctx, params GetKeysParams) error {
	var request GetKeysRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeys(ctx.UserContext(), request.(GetKeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKeysResponseObject); ok {
		if err := validResponse.VisitGetKeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"78B7+vL0/wEAAP//Xw7BkiiTAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./openapi_spec_components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
