// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package model

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for KeyPoolAlgorithm.
const (
	A128CBCHS256A128GCMKW    KeyPoolAlgorithm = "A128CBC-HS256/A128GCMKW"
	A128CBCHS256A128KW       KeyPoolAlgorithm = "A128CBC-HS256/A128KW"
	A128CBCHS256A192GCMKW    KeyPoolAlgorithm = "A128CBC-HS256/A192GCMKW"
	A128CBCHS256A192KW       KeyPoolAlgorithm = "A128CBC-HS256/A192KW"
	A128CBCHS256A256GCMKW    KeyPoolAlgorithm = "A128CBC-HS256/A256GCMKW"
	A128CBCHS256A256KW       KeyPoolAlgorithm = "A128CBC-HS256/A256KW"
	A128CBCHS256ECDHES       KeyPoolAlgorithm = "A128CBC-HS256/ECDH_ES"
	A128CBCHS256ECDHESA128KW KeyPoolAlgorithm = "A128CBC-HS256/ECDH_ES_A128KW"
	A128CBCHS256ECDHESA192KW KeyPoolAlgorithm = "A128CBC-HS256/ECDH_ES_A192KW"
	A128CBCHS256ECDHESA256KW KeyPoolAlgorithm = "A128CBC-HS256/ECDH_ES_A256KW"
	A128CBCHS256RSA15        KeyPoolAlgorithm = "A128CBC-HS256/RSA1_5"
	A128CBCHS256RSAOAEP      KeyPoolAlgorithm = "A128CBC-HS256/RSA_OAEP"
	A128CBCHS256RSAOAEP256   KeyPoolAlgorithm = "A128CBC-HS256/RSA_OAEP_256"
	A128CBCHS256RSAOAEP384   KeyPoolAlgorithm = "A128CBC-HS256/RSA_OAEP_384"
	A128CBCHS256RSAOAEP512   KeyPoolAlgorithm = "A128CBC-HS256/RSA_OAEP_512"
	A128CBCHS256dir          KeyPoolAlgorithm = "A128CBC-HS256/dir"
	A128GCMA128GCMKW         KeyPoolAlgorithm = "A128GCM/A128GCMKW"
	A128GCMA128KW            KeyPoolAlgorithm = "A128GCM/A128KW"
	A128GCMA192GCMKW         KeyPoolAlgorithm = "A128GCM/A192GCMKW"
	A128GCMA192KW            KeyPoolAlgorithm = "A128GCM/A192KW"
	A128GCMA256GCMKW         KeyPoolAlgorithm = "A128GCM/A256GCMKW"
	A128GCMA256KW            KeyPoolAlgorithm = "A128GCM/A256KW"
	A128GCMECDHES            KeyPoolAlgorithm = "A128GCM/ECDH_ES"
	A128GCMECDHESA128KW      KeyPoolAlgorithm = "A128GCM/ECDH_ES_A128KW"
	A128GCMECDHESA192KW      KeyPoolAlgorithm = "A128GCM/ECDH_ES_A192KW"
	A128GCMECDHESA256KW      KeyPoolAlgorithm = "A128GCM/ECDH_ES_A256KW"
	A128GCMRSA15             KeyPoolAlgorithm = "A128GCM/RSA1_5"
	A128GCMRSAOAEP           KeyPoolAlgorithm = "A128GCM/RSA_OAEP"
	A128GCMRSAOAEP256        KeyPoolAlgorithm = "A128GCM/RSA_OAEP_256"
	A128GCMRSAOAEP384        KeyPoolAlgorithm = "A128GCM/RSA_OAEP_384"
	A128GCMRSAOAEP512        KeyPoolAlgorithm = "A128GCM/RSA_OAEP_512"
	A128GCMdir               KeyPoolAlgorithm = "A128GCM/dir"
	A192CBCHS384A128GCMKW    KeyPoolAlgorithm = "A192CBC-HS384/A128GCMKW"
	A192CBCHS384A128KW       KeyPoolAlgorithm = "A192CBC-HS384/A128KW"
	A192CBCHS384A192GCMKW    KeyPoolAlgorithm = "A192CBC-HS384/A192GCMKW"
	A192CBCHS384A192KW       KeyPoolAlgorithm = "A192CBC-HS384/A192KW"
	A192CBCHS384A256GCMKW    KeyPoolAlgorithm = "A192CBC-HS384/A256GCMKW"
	A192CBCHS384A256KW       KeyPoolAlgorithm = "A192CBC-HS384/A256KW"
	A192CBCHS384ECDHES       KeyPoolAlgorithm = "A192CBC-HS384/ECDH_ES"
	A192CBCHS384ECDHESA128KW KeyPoolAlgorithm = "A192CBC-HS384/ECDH_ES_A128KW"
	A192CBCHS384ECDHESA192KW KeyPoolAlgorithm = "A192CBC-HS384/ECDH_ES_A192KW"
	A192CBCHS384ECDHESA256KW KeyPoolAlgorithm = "A192CBC-HS384/ECDH_ES_A256KW"
	A192CBCHS384RSA15        KeyPoolAlgorithm = "A192CBC-HS384/RSA1_5"
	A192CBCHS384RSAOAEP      KeyPoolAlgorithm = "A192CBC-HS384/RSA_OAEP"
	A192CBCHS384RSAOAEP256   KeyPoolAlgorithm = "A192CBC-HS384/RSA_OAEP_256"
	A192CBCHS384RSAOAEP384   KeyPoolAlgorithm = "A192CBC-HS384/RSA_OAEP_384"
	A192CBCHS384RSAOAEP512   KeyPoolAlgorithm = "A192CBC-HS384/RSA_OAEP_512"
	A192CBCHS384dir          KeyPoolAlgorithm = "A192CBC-HS384/dir"
	A192GCMA128GCMKW         KeyPoolAlgorithm = "A192GCM/A128GCMKW"
	A192GCMA128KW            KeyPoolAlgorithm = "A192GCM/A128KW"
	A192GCMA192GCMKW         KeyPoolAlgorithm = "A192GCM/A192GCMKW"
	A192GCMA192KW            KeyPoolAlgorithm = "A192GCM/A192KW"
	A192GCMA256GCMKW         KeyPoolAlgorithm = "A192GCM/A256GCMKW"
	A192GCMA256KW            KeyPoolAlgorithm = "A192GCM/A256KW"
	A192GCMECDHES            KeyPoolAlgorithm = "A192GCM/ECDH_ES"
	A192GCMECDHESA128KW      KeyPoolAlgorithm = "A192GCM/ECDH_ES_A128KW"
	A192GCMECDHESA192KW      KeyPoolAlgorithm = "A192GCM/ECDH_ES_A192KW"
	A192GCMECDHESA256KW      KeyPoolAlgorithm = "A192GCM/ECDH_ES_A256KW"
	A192GCMRSA15             KeyPoolAlgorithm = "A192GCM/RSA1_5"
	A192GCMRSAOAEP           KeyPoolAlgorithm = "A192GCM/RSA_OAEP"
	A192GCMRSAOAEP256        KeyPoolAlgorithm = "A192GCM/RSA_OAEP_256"
	A192GCMRSAOAEP384        KeyPoolAlgorithm = "A192GCM/RSA_OAEP_384"
	A192GCMRSAOAEP512        KeyPoolAlgorithm = "A192GCM/RSA_OAEP_512"
	A192GCMdir               KeyPoolAlgorithm = "A192GCM/dir"
	A256CBCHS256RSAOAEP256   KeyPoolAlgorithm = "A256CBC-HS256/RSA_OAEP_256"
	A256CBCHS512A128GCMKW    KeyPoolAlgorithm = "A256CBC-HS512/A128GCMKW"
	A256CBCHS512A128KW       KeyPoolAlgorithm = "A256CBC-HS512/A128KW"
	A256CBCHS512A192GCMKW    KeyPoolAlgorithm = "A256CBC-HS512/A192GCMKW"
	A256CBCHS512A192KW       KeyPoolAlgorithm = "A256CBC-HS512/A192KW"
	A256CBCHS512A256GCMKW    KeyPoolAlgorithm = "A256CBC-HS512/A256GCMKW"
	A256CBCHS512A256KW       KeyPoolAlgorithm = "A256CBC-HS512/A256KW"
	A256CBCHS512ECDHES       KeyPoolAlgorithm = "A256CBC-HS512/ECDH_ES"
	A256CBCHS512ECDHESA128KW KeyPoolAlgorithm = "A256CBC-HS512/ECDH_ES_A128KW"
	A256CBCHS512ECDHESA192KW KeyPoolAlgorithm = "A256CBC-HS512/ECDH_ES_A192KW"
	A256CBCHS512ECDHESA256KW KeyPoolAlgorithm = "A256CBC-HS512/ECDH_ES_A256KW"
	A256CBCHS512RSA15        KeyPoolAlgorithm = "A256CBC-HS512/RSA1_5"
	A256CBCHS512RSAOAEP      KeyPoolAlgorithm = "A256CBC-HS512/RSA_OAEP"
	A256CBCHS512RSAOAEP384   KeyPoolAlgorithm = "A256CBC-HS512/RSA_OAEP_384"
	A256CBCHS512RSAOAEP512   KeyPoolAlgorithm = "A256CBC-HS512/RSA_OAEP_512"
	A256CBCHS512dir          KeyPoolAlgorithm = "A256CBC-HS512/dir"
	A256GCMA128GCMKW         KeyPoolAlgorithm = "A256GCM/A128GCMKW"
	A256GCMA128KW            KeyPoolAlgorithm = "A256GCM/A128KW"
	A256GCMA192GCMKW         KeyPoolAlgorithm = "A256GCM/A192GCMKW"
	A256GCMA192KW            KeyPoolAlgorithm = "A256GCM/A192KW"
	A256GCMA256GCMKW         KeyPoolAlgorithm = "A256GCM/A256GCMKW"
	A256GCMA256KW            KeyPoolAlgorithm = "A256GCM/A256KW"
	A256GCMECDHES            KeyPoolAlgorithm = "A256GCM/ECDH_ES"
	A256GCMECDHESA128KW      KeyPoolAlgorithm = "A256GCM/ECDH_ES_A128KW"
	A256GCMECDHESA192KW      KeyPoolAlgorithm = "A256GCM/ECDH_ES_A192KW"
	A256GCMECDHESA256KW      KeyPoolAlgorithm = "A256GCM/ECDH_ES_A256KW"
	A256GCMRSA15             KeyPoolAlgorithm = "A256GCM/RSA1_5"
	A256GCMRSAOAEP           KeyPoolAlgorithm = "A256GCM/RSA_OAEP"
	A256GCMRSAOAEP256        KeyPoolAlgorithm = "A256GCM/RSA_OAEP_256"
	A256GCMRSAOAEP384        KeyPoolAlgorithm = "A256GCM/RSA_OAEP_384"
	A256GCMRSAOAEP512        KeyPoolAlgorithm = "A256GCM/RSA_OAEP_512"
	A256GCMdir               KeyPoolAlgorithm = "A256GCM/dir"
	ES256                    KeyPoolAlgorithm = "ES256"
	ES384                    KeyPoolAlgorithm = "ES384"
	ES512                    KeyPoolAlgorithm = "ES512"
	EdDSA                    KeyPoolAlgorithm = "EdDSA"
	HS256                    KeyPoolAlgorithm = "HS256"
	HS384                    KeyPoolAlgorithm = "HS384"
	HS512                    KeyPoolAlgorithm = "HS512"
	PS256                    KeyPoolAlgorithm = "PS256"
	PS384                    KeyPoolAlgorithm = "PS384"
	PS512                    KeyPoolAlgorithm = "PS512"
	RS256                    KeyPoolAlgorithm = "RS256"
	RS384                    KeyPoolAlgorithm = "RS384"
	RS512                    KeyPoolAlgorithm = "RS512"
)

// Defines values for KeyPoolProvider.
const (
	Internal KeyPoolProvider = "Internal"
)

// Defines values for KeyPoolSort.
const (
	KeyPoolSortAlgorithmASC          KeyPoolSort = "algorithm:ASC"
	KeyPoolSortAlgorithmDESC         KeyPoolSort = "algorithm:DESC"
	KeyPoolSortExportAllowedASC      KeyPoolSort = "export_allowed:ASC"
	KeyPoolSortExportAllowedDESC     KeyPoolSort = "export_allowed:DESC"
	KeyPoolSortIdASC                 KeyPoolSort = "id:ASC"
	KeyPoolSortIdDESC                KeyPoolSort = "id:DESC"
	KeyPoolSortImportAllowedASC      KeyPoolSort = "import_allowed:ASC"
	KeyPoolSortImportAllowedDESC     KeyPoolSort = "import_allowed:DESC"
	KeyPoolSortNameASC               KeyPoolSort = "name:ASC"
	KeyPoolSortNameDESC              KeyPoolSort = "name:DESC"
	KeyPoolSortProviderASC           KeyPoolSort = "provider:ASC"
	KeyPoolSortProviderDESC          KeyPoolSort = "provider:DESC"
	KeyPoolSortStatusASC             KeyPoolSort = "status:ASC"
	KeyPoolSortStatusDESC            KeyPoolSort = "status:DESC"
	KeyPoolSortVersioningAllowedASC  KeyPoolSort = "versioning_allowed:ASC"
	KeyPoolSortVersioningAllowedDESC KeyPoolSort = "versioning_allowed:DESC"
)

// Defines values for KeyPoolStatus.
const (
	Active                         KeyPoolStatus = "active"
	Creating                       KeyPoolStatus = "creating"
	Disabled                       KeyPoolStatus = "disabled"
	FinishedDelete                 KeyPoolStatus = "finished_delete"
	GenerateFailed                 KeyPoolStatus = "generate_failed"
	ImportFailed                   KeyPoolStatus = "import_failed"
	PendingDeleteWasActive         KeyPoolStatus = "pending_delete_was_active"
	PendingDeleteWasDisabled       KeyPoolStatus = "pending_delete_was_disabled"
	PendingDeleteWasGenerateFailed KeyPoolStatus = "pending_delete_was_generate_failed"
	PendingDeleteWasImportFailed   KeyPoolStatus = "pending_delete_was_import_failed"
	PendingDeleteWasPendingImport  KeyPoolStatus = "pending_delete_was_pending_import"
	PendingGenerate                KeyPoolStatus = "pending_generate"
	PendingImport                  KeyPoolStatus = "pending_import"
	StartedDelete                  KeyPoolStatus = "started_delete"
)

// Defines values for KeySort.
const (
	KeySortGenerateDate     KeySort = "generate_date"
	KeySortGenerateDateASC  KeySort = "generate_date:ASC"
	KeySortGenerateDateDESC KeySort = "generate_date:DESC"
	KeySortId               KeySort = "id"
	KeySortIdASC            KeySort = "id:ASC"
	KeySortIdDESC           KeySort = "id:DESC"
	KeySortPool             KeySort = "pool"
	KeySortPoolASC          KeySort = "pool:ASC"
	KeySortPoolDESC         KeySort = "pool:DESC"
)

// DecryptRequest Base64Url-encoded JSON Web Encryption (JWE) of the encrypted bytes (and non-secret cipher parameters) in compact serialized format. See RFC 7516 JSON Web Encryption (JWE) for more details. Compact serialized format is 'Header.EncryptedKey.IV.Ciphertext.AuthenticationTag'. There are five Base64Url-encoded parts and separated by '.'. Some parts can be empty depending on the 'alg' and 'enc' headers parameters. - Header: Required base64Url-encoded JSON key/values for the JWE. - EncryptedKey: Optional base64Url-encoded JWE of an encrypted symmetric key used to encrypt the payload. This is non-empty for envelope encryption (e.g. alg=a256gcmkw), or empty for direct encryption (e.g. alg=dir). - IV: Required base64Url-encoded Initialization Vector (IV) used for encryption. For AES-GCM or AES-GCM-SIV it contains a 12-bytes nonce. For AES-CBC it contains a 16-bytes IV. - Ciphertext: Required base64Url-encoded encrypted secret bytes. It is always non-empty. For AES-GCM or AES-GCM-SIV it contains same number of bytes as the plaintext. - AuthenticationTag: Required base64Url-encoded authentication tag used for encryption. For AES-GCM or AES-GCM-SIV it contains a 16-bytes authentication tag. For AES-CBC-HMAC it contains a N-bytes HMAC hash.
type DecryptRequest = string

// DecryptResponse Encrypted text to be decrypted. If you pre-encoded bytes to text before submitting them for encryption, remember to decode to bytes; ese the same encoding scheme you chose before submission (e.g. Hexadecimal, Base64, Base64-URL, Base64-MIME, etc).
type DecryptResponse = string

// EncryptRequest Clear text to be encrypted. If you need to encrypt bytes, encode them first as text (e.g. Hexadecimal, Base64, Base64-URL, Base64-MIME, etc).
type EncryptRequest = string

// EncryptResponse Base64Url-encoded JSON Web Encryption (JWE) of the encrypted bytes (and non-secret cipher parameters) in compact serialized format. See RFC 7516 JSON Web Encryption (JWE) for more details. Compact serialized format is 'Header.EncryptedKey.IV.Ciphertext.AuthenticationTag'. There are five Base64Url-encoded parts and separated by '.'. Some parts can be empty depending on the 'alg' and 'enc' headers parameters. - Header: Required base64Url-encoded JSON key/values for the JWE. - EncryptedKey: Optional base64Url-encoded JWE of an encrypted symmetric key used to encrypt the payload. This is non-empty for envelope encryption (e.g. alg=a256gcmkw), or empty for direct encryption (e.g. alg=dir). - IV: Required base64Url-encoded Initialization Vector (IV) used for encryption. For AES-GCM or AES-GCM-SIV it contains a 12-bytes nonce. For AES-CBC it contains a 16-bytes IV. - Ciphertext: Required base64Url-encoded encrypted secret bytes. It is always non-empty. For AES-GCM or AES-GCM-SIV it contains same number of bytes as the plaintext. - AuthenticationTag: Required base64Url-encoded authentication tag used for encryption. For AES-GCM or AES-GCM-SIV it contains a 16-bytes authentication tag. For AES-CBC-HMAC it contains a N-bytes HMAC hash.
type EncryptResponse = string

// HTTPError defines model for HTTPError.
type HTTPError struct {
	// Error HTTP status message
	Error string `json:"error"`

	// Message Detailed error message
	Message string `json:"message"`

	// Status HTTP status code
	Status int `json:"status"`
}

// Key defines model for Key.
type Key struct {
	// GenerateDate ISO 8601 UTC timestamp of Key generation.
	GenerateDate *KeyGenerateDate `json:"generate_date,omitempty"`

	// Id Unique UUID for a Key.
	Id *KeyId `json:"id,omitempty"`

	// Pool Unique UUID for a Key Pool.
	Pool *KeyPoolId `json:"pool,omitempty"`
}

// KeyGenerate defines model for KeyGenerate.
type KeyGenerate = map[string]interface{}

// KeyGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyGenerateDate = time.Time

// KeyId Unique UUID for a Key.
type KeyId = openapi_types.UUID

// KeyPool defines model for KeyPool.
type KeyPool struct {
	// Algorithm Cryptographic algorithm(s) used for Keys in the Key Pool. The first is the content encryption algorithm, and the second is the optional key encryption algorithm. If key encryption algorithm is 'dir', the Key Pool Key is directly used on values. direct encryption is useful for small values. If key encryption algorithm is 'K*W', a random Content Encryption Key (CEK) is used directly on values, and the Key Pool Key is used to encrypt the CEK. Key wrap is useful for large values (e.g. files, blobs, etc). If in doubt, it is safe to use 'A256GCM/A256KW' for all values; it is the default.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description *KeyPoolDescription `json:"description,omitempty"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`

	// Id Unique UUID for a Key Pool.
	Id *KeyPoolId `json:"id,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name *KeyPoolName `json:"name,omitempty"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// Status Status of the Key Pool.
	Status *KeyPoolStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolAlgorithm Cryptographic algorithm(s) used for Keys in the Key Pool. The first is the content encryption algorithm, and the second is the optional key encryption algorithm. If key encryption algorithm is 'dir', the Key Pool Key is directly used on values. direct encryption is useful for small values. If key encryption algorithm is 'K*W', a random Content Encryption Key (CEK) is used directly on values, and the Key Pool Key is used to encrypt the CEK. Key wrap is useful for large values (e.g. files, blobs, etc). If in doubt, it is safe to use 'A256GCM/A256KW' for all values; it is the default.
type KeyPoolAlgorithm string

// KeyPoolCreate defines model for KeyPoolCreate.
type KeyPoolCreate struct {
	// Algorithm Cryptographic algorithm(s) used for Keys in the Key Pool. The first is the content encryption algorithm, and the second is the optional key encryption algorithm. If key encryption algorithm is 'dir', the Key Pool Key is directly used on values. direct encryption is useful for small values. If key encryption algorithm is 'K*W', a random Content Encryption Key (CEK) is used directly on values, and the Key Pool Key is used to encrypt the CEK. Key wrap is useful for large values (e.g. files, blobs, etc). If in doubt, it is safe to use 'A256GCM/A256KW' for all values; it is the default.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolDescription Description for a Key Pool.
type KeyPoolDescription = string

// KeyPoolExportAllowed Indicates if the Key Pool supports export.
type KeyPoolExportAllowed = bool

// KeyPoolId Unique UUID for a Key Pool.
type KeyPoolId = openapi_types.UUID

// KeyPoolImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolImportAllowed = bool

// KeyPoolKeysQueryParams defines model for KeyPoolKeysQueryParams.
type KeyPoolKeysQueryParams struct {
	Id *[]KeyId `json:"id,omitempty"`

	// MaxGenerateDate ISO 8601 UTC timestamp of Key generation.
	MaxGenerateDate *KeyGenerateDate `json:"max_generate_date,omitempty"`

	// MinGenerateDate ISO 8601 UTC timestamp of Key generation.
	MinGenerateDate *KeyGenerateDate `json:"min_generate_date,omitempty"`

	// Page Page number starting at 0.
	Page *PageNumber `json:"page,omitempty"`

	// Size Page number.
	Size *PageSize  `json:"size,omitempty"`
	Sort *[]KeySort `json:"sort,omitempty"`
}

// KeyPoolName Friendly name for a Key Pool.
type KeyPoolName = string

// KeyPoolProvider Provider of the Key Pool management service.
type KeyPoolProvider string

// KeyPoolSort defines model for KeyPoolSort.
type KeyPoolSort string

// KeyPoolStatus Status of the Key Pool.
type KeyPoolStatus string

// KeyPoolUpdate defines model for KeyPoolUpdate.
type KeyPoolUpdate struct {
	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`
}

// KeyPoolVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolVersioningAllowed = bool

// KeyPoolsQueryParams defines model for KeyPoolsQueryParams.
type KeyPoolsQueryParams struct {
	Algorithm *[]KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`
	Id            *[]KeyPoolId          `json:"id,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`
	Name          *[]KeyPoolName        `json:"name,omitempty"`

	// Page Page number starting at 0.
	Page     *PageNumber        `json:"page,omitempty"`
	Provider *[]KeyPoolProvider `json:"provider,omitempty"`

	// Size Page number.
	Size   *PageSize        `json:"size,omitempty"`
	Sort   *[]KeyPoolSort   `json:"sort,omitempty"`
	Status *[]KeyPoolStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeySort defines model for KeySort.
type KeySort string

// KeyUpdate defines model for KeyUpdate.
type KeyUpdate struct {
	// Id Unique UUID for a Key.
	Id KeyId `json:"id"`

	// Pool Unique UUID for a Key Pool.
	Pool KeyPoolId `json:"pool"`
}

// KeysQueryParams defines model for KeysQueryParams.
type KeysQueryParams struct {
	Id *[]KeyId `json:"id,omitempty"`

	// MaxGenerateDate ISO 8601 UTC timestamp of Key generation.
	MaxGenerateDate *KeyGenerateDate `json:"max_generate_date,omitempty"`

	// MinGenerateDate ISO 8601 UTC timestamp of Key generation.
	MinGenerateDate *KeyGenerateDate `json:"min_generate_date,omitempty"`

	// Page Page number starting at 0.
	Page *PageNumber  `json:"page,omitempty"`
	Pool *[]KeyPoolId `json:"pool,omitempty"`

	// Size Page number.
	Size *PageSize  `json:"size,omitempty"`
	Sort *[]KeySort `json:"sort,omitempty"`
}

// PageNumber Page number starting at 0.
type PageNumber = int

// PageSize Page number.
type PageSize = int

// SignRequest Clear text to be signed. Can be JSON-encoded to create a JWT, or freeform to create a JWS. If you need freeform, encode as text (e.g. Base64-URL, Base64-MIME, Base64, Hexadecimal, etc).
type SignRequest = string

// SignResponse Base64Url-encoded JSON Web Signature (JWS) of the clear text in compact serialized format. See RFC 7515 JSON Web Signature (JWS) for more details. Compact serialized format is 'Header.Payload.Signature'. There are three Base64Url-encoded parts and separated by '.'. - Header: Required base64Url-encoded JSON key/values for the JWS. - Plaintext: Required base64Url-encoded clear text. It is always non-empty. Can be freeform (JWS) or JSON-encoded (JWT). - Signature: Required base64Url-encoded signature.
type SignResponse = string

// SymmetricCipherAdditionalAuthenticatedData Base64URL-encoded Additional Authenticated Data (AAD). This is non-secret data used for authentication and integrity checking during decryption (e.g. namespace, context).
type SymmetricCipherAdditionalAuthenticatedData = string

// SymmetricCipherInitializationVector Base64URL-encoded Nonce (e.g. 12-bytes AES-GCM or AES-GCM-SIV) or Initialization Vector (e.g. 16-bytes AES-CBC). This is non-secret data used for encryption/decryption, as well as authentication and integrity checking during decryption (e.g. namespace, context).
type SymmetricCipherInitializationVector = string

// SymmetricEncryptParams defines model for SymmetricEncryptParams.
type SymmetricEncryptParams struct {
	// Aad Base64URL-encoded Additional Authenticated Data (AAD). This is non-secret data used for authentication and integrity checking during decryption (e.g. namespace, context).
	Aad *SymmetricCipherAdditionalAuthenticatedData `json:"aad,omitempty"`

	// Iv Base64URL-encoded Nonce (e.g. 12-bytes AES-GCM or AES-GCM-SIV) or Initialization Vector (e.g. 16-bytes AES-CBC). This is non-secret data used for encryption/decryption, as well as authentication and integrity checking during decryption (e.g. namespace, context).
	Iv *SymmetricCipherInitializationVector `json:"iv,omitempty"`
}

// VerifyRequest Base64Url-encoded JSON Web Signature (JWS) of the clear text in compact serialized format. See RFC 7515 JSON Web Signature (JWS) for more details. Compact serialized format is 'Header.Payload.Signature'. There are three Base64Url-encoded parts and separated by '.'. - Header: Required base64Url-encoded JSON key/values for the JWS. - Plaintext: Required base64Url-encoded clear text. It is always non-empty. Can be freeform (JWS) or JSON-encoded (JWT). - Signature: Required base64Url-encoded signature.
type VerifyRequest = string

// KeyPoolQueryParamAlgorithms defines model for KeyPoolQueryParamAlgorithms.
type KeyPoolQueryParamAlgorithms = []KeyPoolAlgorithm

// KeyPoolQueryParamExportAllowed Indicates if the Key Pool supports export.
type KeyPoolQueryParamExportAllowed = KeyPoolExportAllowed

// KeyPoolQueryParamIds defines model for KeyPoolQueryParamIds.
type KeyPoolQueryParamIds = []KeyPoolId

// KeyPoolQueryParamImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolQueryParamImportAllowed = KeyPoolImportAllowed

// KeyPoolQueryParamNames defines model for KeyPoolQueryParamNames.
type KeyPoolQueryParamNames = []KeyPoolName

// KeyPoolQueryParamPageNumber Page number starting at 0.
type KeyPoolQueryParamPageNumber = PageNumber

// KeyPoolQueryParamPageSize Page number.
type KeyPoolQueryParamPageSize = PageSize

// KeyPoolQueryParamProviders defines model for KeyPoolQueryParamProviders.
type KeyPoolQueryParamProviders = []KeyPoolProvider

// KeyPoolQueryParamSorts defines model for KeyPoolQueryParamSorts.
type KeyPoolQueryParamSorts = []KeyPoolSort

// KeyPoolQueryParamStatuses defines model for KeyPoolQueryParamStatuses.
type KeyPoolQueryParamStatuses = []KeyPoolStatus

// KeyPoolQueryParamVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolQueryParamVersioningAllowed = KeyPoolVersioningAllowed

// KeyQueryParamIds defines model for KeyQueryParamIds.
type KeyQueryParamIds = []KeyId

// KeyQueryParamKeyPoolIds defines model for KeyQueryParamKeyPoolIds.
type KeyQueryParamKeyPoolIds = []KeyPoolId

// KeyQueryParamMaximumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyQueryParamMaximumGenerateDate = KeyGenerateDate

// KeyQueryParamMinimumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyQueryParamMinimumGenerateDate = KeyGenerateDate

// KeyQueryParamPageNumber Page number starting at 0.
type KeyQueryParamPageNumber = PageNumber

// KeyQueryParamPageSize Page number.
type KeyQueryParamPageSize = PageSize

// KeyQueryParamSorts defines model for KeyQueryParamSorts.
type KeyQueryParamSorts = []KeySort

// HTTP400BadRequest defines model for HTTP400BadRequest.
type HTTP400BadRequest struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP401Unauthorized defines model for HTTP401Unauthorized.
type HTTP401Unauthorized struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP403Forbidden defines model for HTTP403Forbidden.
type HTTP403Forbidden struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP404NotFound defines model for HTTP404NotFound.
type HTTP404NotFound struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP429TooManyRequests defines model for HTTP429TooManyRequests.
type HTTP429TooManyRequests struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP500InternalServerError defines model for HTTP500InternalServerError.
type HTTP500InternalServerError struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP502BadGateway defines model for HTTP502BadGateway.
type HTTP502BadGateway struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP503ServiceUnavailable defines model for HTTP503ServiceUnavailable.
type HTTP503ServiceUnavailable struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP504GatewayTimeout defines model for HTTP504GatewayTimeout.
type HTTP504GatewayTimeout struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
