// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package model

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for KeyPoolAlgorithm.
const (
	AES128 KeyPoolAlgorithm = "AES-128"
	AES192 KeyPoolAlgorithm = "AES-192"
	AES256 KeyPoolAlgorithm = "AES-256"
)

// Defines values for KeyPoolProvider.
const (
	Internal KeyPoolProvider = "Internal"
)

// Defines values for KeyPoolSort.
const (
	KeyPoolSortAlgorithmASC          KeyPoolSort = "algorithm:ASC"
	KeyPoolSortAlgorithmDESC         KeyPoolSort = "algorithm:DESC"
	KeyPoolSortExportAllowedASC      KeyPoolSort = "export_allowed:ASC"
	KeyPoolSortExportAllowedDESC     KeyPoolSort = "export_allowed:DESC"
	KeyPoolSortIdASC                 KeyPoolSort = "id:ASC"
	KeyPoolSortIdDESC                KeyPoolSort = "id:DESC"
	KeyPoolSortImportAllowedASC      KeyPoolSort = "import_allowed:ASC"
	KeyPoolSortImportAllowedDESC     KeyPoolSort = "import_allowed:DESC"
	KeyPoolSortNameASC               KeyPoolSort = "name:ASC"
	KeyPoolSortNameDESC              KeyPoolSort = "name:DESC"
	KeyPoolSortProviderASC           KeyPoolSort = "provider:ASC"
	KeyPoolSortProviderDESC          KeyPoolSort = "provider:DESC"
	KeyPoolSortStatusASC             KeyPoolSort = "status:ASC"
	KeyPoolSortStatusDESC            KeyPoolSort = "status:DESC"
	KeyPoolSortVersioningAllowedASC  KeyPoolSort = "versioning_allowed:ASC"
	KeyPoolSortVersioningAllowedDESC KeyPoolSort = "versioning_allowed:DESC"
)

// Defines values for KeyPoolStatus.
const (
	Active                         KeyPoolStatus = "active"
	Creating                       KeyPoolStatus = "creating"
	Disabled                       KeyPoolStatus = "disabled"
	FinishedDelete                 KeyPoolStatus = "finished_delete"
	GenerateFailed                 KeyPoolStatus = "generate_failed"
	ImportFailed                   KeyPoolStatus = "import_failed"
	PendingDeleteWasActive         KeyPoolStatus = "pending_delete_was_active"
	PendingDeleteWasDisabled       KeyPoolStatus = "pending_delete_was_disabled"
	PendingDeleteWasGenerateFailed KeyPoolStatus = "pending_delete_was_generate_failed"
	PendingDeleteWasImportFailed   KeyPoolStatus = "pending_delete_was_import_failed"
	PendingDeleteWasPendingImport  KeyPoolStatus = "pending_delete_was_pending_import"
	PendingGenerate                KeyPoolStatus = "pending_generate"
	PendingImport                  KeyPoolStatus = "pending_import"
	StartedDelete                  KeyPoolStatus = "started_delete"
)

// Defines values for KeySort.
const (
	KeySortGenerateDate     KeySort = "generate_date"
	KeySortGenerateDateASC  KeySort = "generate_date:ASC"
	KeySortGenerateDateDESC KeySort = "generate_date:DESC"
	KeySortId               KeySort = "id"
	KeySortIdASC            KeySort = "id:ASC"
	KeySortIdDESC           KeySort = "id:DESC"
	KeySortPool             KeySort = "pool"
	KeySortPoolASC          KeySort = "pool:ASC"
	KeySortPoolDESC         KeySort = "pool:DESC"
)

// Defines values for SymmetricCipherAlgorithm.
const (
	Aes256gcm128V1    SymmetricCipherAlgorithm = "aes256gcm128V1"
	Aes256gcmsiv128V1 SymmetricCipherAlgorithm = "aes256gcmsiv128V1"
)

// HTTPError defines model for HTTPError.
type HTTPError struct {
	// Error HTTP status message
	Error string `json:"error"`

	// Message Detailed error message
	Message string `json:"message"`

	// Status HTTP status code
	Status int `json:"status"`
}

// Key defines model for Key.
type Key struct {
	// GenerateDate ISO 8601 UTC timestamp of Key generation.
	GenerateDate *KeyGenerateDate `json:"generate_date,omitempty"`

	// Id Unique UUID for a Key.
	Id *KeyId `json:"id,omitempty"`

	// Pool Unique UUID for a Key Pool.
	Pool *KeyPoolId `json:"pool,omitempty"`
}

// KeyGenerate defines model for KeyGenerate.
type KeyGenerate = map[string]interface{}

// KeyGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyGenerateDate = time.Time

// KeyId Unique UUID for a Key.
type KeyId = openapi_types.UUID

// KeyPool defines model for KeyPool.
type KeyPool struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description *KeyPoolDescription `json:"description,omitempty"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`

	// Id Unique UUID for a Key Pool.
	Id *KeyPoolId `json:"id,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name *KeyPoolName `json:"name,omitempty"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// Status Status of the Key Pool.
	Status *KeyPoolStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolAlgorithm Cryptographic algorithm for the Key Pool.
type KeyPoolAlgorithm string

// KeyPoolCreate defines model for KeyPoolCreate.
type KeyPoolCreate struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolDescription Description for a Key Pool.
type KeyPoolDescription = string

// KeyPoolExportAllowed Indicates if the Key Pool supports export.
type KeyPoolExportAllowed = bool

// KeyPoolId Unique UUID for a Key Pool.
type KeyPoolId = openapi_types.UUID

// KeyPoolImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolImportAllowed = bool

// KeyPoolKeysQueryParams defines model for KeyPoolKeysQueryParams.
type KeyPoolKeysQueryParams struct {
	Id *[]KeyId `json:"id,omitempty"`

	// MaxGenerateDate ISO 8601 UTC timestamp of Key generation.
	MaxGenerateDate *KeyGenerateDate `json:"max_generate_date,omitempty"`

	// MinGenerateDate ISO 8601 UTC timestamp of Key generation.
	MinGenerateDate *KeyGenerateDate `json:"min_generate_date,omitempty"`

	// Page Page number starting at 0.
	Page *PageNumber `json:"page,omitempty"`

	// Size Page number.
	Size *PageSize  `json:"size,omitempty"`
	Sort *[]KeySort `json:"sort,omitempty"`
}

// KeyPoolName Friendly name for a Key Pool.
type KeyPoolName = string

// KeyPoolProvider Provider of the Key Pool management service.
type KeyPoolProvider string

// KeyPoolSort defines model for KeyPoolSort.
type KeyPoolSort string

// KeyPoolStatus Status of the Key Pool.
type KeyPoolStatus string

// KeyPoolUpdate defines model for KeyPoolUpdate.
type KeyPoolUpdate struct {
	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`
}

// KeyPoolVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolVersioningAllowed = bool

// KeyPoolsQueryParams defines model for KeyPoolsQueryParams.
type KeyPoolsQueryParams struct {
	Algorithm *[]KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`
	Id            *[]KeyPoolId          `json:"id,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`
	Name          *[]KeyPoolName        `json:"name,omitempty"`

	// Page Page number starting at 0.
	Page     *PageNumber        `json:"page,omitempty"`
	Provider *[]KeyPoolProvider `json:"provider,omitempty"`

	// Size Page number.
	Size   *PageSize        `json:"size,omitempty"`
	Sort   *[]KeyPoolSort   `json:"sort,omitempty"`
	Status *[]KeyPoolStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeySort defines model for KeySort.
type KeySort string

// KeyUpdate defines model for KeyUpdate.
type KeyUpdate struct {
	// Id Unique UUID for a Key.
	Id KeyId `json:"id"`

	// Pool Unique UUID for a Key Pool.
	Pool KeyPoolId `json:"pool"`
}

// KeysQueryParams defines model for KeysQueryParams.
type KeysQueryParams struct {
	Id *[]KeyId `json:"id,omitempty"`

	// MaxGenerateDate ISO 8601 UTC timestamp of Key generation.
	MaxGenerateDate *KeyGenerateDate `json:"max_generate_date,omitempty"`

	// MinGenerateDate ISO 8601 UTC timestamp of Key generation.
	MinGenerateDate *KeyGenerateDate `json:"min_generate_date,omitempty"`

	// Page Page number starting at 0.
	Page *PageNumber  `json:"page,omitempty"`
	Pool *[]KeyPoolId `json:"pool,omitempty"`

	// Size Page number.
	Size *PageSize  `json:"size,omitempty"`
	Sort *[]KeySort `json:"sort,omitempty"`
}

// PageNumber Page number starting at 0.
type PageNumber = int

// PageSize Page number.
type PageSize = int

// SymmetricCipherAdditionalAuthenticatedData Base64URL-encoded Additional Authenticated Data (AAD). This is non-secret data used for authentication and integrity checking during decryption (e.g. namespace, context).
type SymmetricCipherAdditionalAuthenticatedData = string

// SymmetricCipherAlgorithm Optional encryption algorithm. Defaults to `aes256gcm128V1`. - `aes256gcm128V1`: randomized encryption (default), example usage is for non-searchable data such as passwords. - `aes256gcmsiv128V1`: convergent encryption (deterministic), example usage is for searchable data such as names, numbers, and other PII (Personally Identifiable Information).
type SymmetricCipherAlgorithm string

// SymmetricCipherInitializationVector Base64URL-encoded Nonce (e.g. 12-bytes AES-GCM or AES-GCM-SIV) or Initialization Vector (e.g. 16-bytes AES-CBC). This is non-secret data used for encryption/decryption, as well as authentication and integrity checking during decryption (e.g. namespace, context).
type SymmetricCipherInitializationVector = string

// SymmetricDecryptRequest Base64Url-encoded JSON Web Encryption (JWE) of the encrypted bytes and non-secret cipher parameters. See RFC 7516 JSON Web Encryption (JWE) for more details.
type SymmetricDecryptRequest = string

// SymmetricDecryptResponse Decrypted, secret bytes.
type SymmetricDecryptResponse = openapi_types.File

// SymmetricEncryptParams defines model for SymmetricEncryptParams.
type SymmetricEncryptParams struct {
	// Aad Base64URL-encoded Additional Authenticated Data (AAD). This is non-secret data used for authentication and integrity checking during decryption (e.g. namespace, context).
	Aad *SymmetricCipherAdditionalAuthenticatedData `json:"aad,omitempty"`

	// Alg Optional encryption algorithm. Defaults to `aes256gcm128V1`. - `aes256gcm128V1`: randomized encryption (default), example usage is for non-searchable data such as passwords. - `aes256gcmsiv128V1`: convergent encryption (deterministic), example usage is for searchable data such as names, numbers, and other PII (Personally Identifiable Information).
	Alg *SymmetricCipherAlgorithm `json:"alg,omitempty"`

	// Iv Base64URL-encoded Nonce (e.g. 12-bytes AES-GCM or AES-GCM-SIV) or Initialization Vector (e.g. 16-bytes AES-CBC). This is non-secret data used for encryption/decryption, as well as authentication and integrity checking during decryption (e.g. namespace, context).
	Iv *SymmetricCipherInitializationVector `json:"iv,omitempty"`
}

// SymmetricEncryptRequest Clear, secret bytes to be encrypted.
type SymmetricEncryptRequest = openapi_types.File

// SymmetricEncryptResponse Base64Url-encoded JSON Web Encryption (JWE) of the encrypted bytes and non-secret cipher parameters. See RFC 7516 JSON Web Encryption (JWE) for more details.
type SymmetricEncryptResponse = string

// KeyPoolQueryParamAlgorithms defines model for KeyPoolQueryParamAlgorithms.
type KeyPoolQueryParamAlgorithms = []KeyPoolAlgorithm

// KeyPoolQueryParamExportAllowed Indicates if the Key Pool supports export.
type KeyPoolQueryParamExportAllowed = KeyPoolExportAllowed

// KeyPoolQueryParamIds defines model for KeyPoolQueryParamIds.
type KeyPoolQueryParamIds = []KeyPoolId

// KeyPoolQueryParamImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolQueryParamImportAllowed = KeyPoolImportAllowed

// KeyPoolQueryParamNames defines model for KeyPoolQueryParamNames.
type KeyPoolQueryParamNames = []KeyPoolName

// KeyPoolQueryParamPageNumber Page number starting at 0.
type KeyPoolQueryParamPageNumber = PageNumber

// KeyPoolQueryParamPageSize Page number.
type KeyPoolQueryParamPageSize = PageSize

// KeyPoolQueryParamProviders defines model for KeyPoolQueryParamProviders.
type KeyPoolQueryParamProviders = []KeyPoolProvider

// KeyPoolQueryParamSorts defines model for KeyPoolQueryParamSorts.
type KeyPoolQueryParamSorts = []KeyPoolSort

// KeyPoolQueryParamStatuses defines model for KeyPoolQueryParamStatuses.
type KeyPoolQueryParamStatuses = []KeyPoolStatus

// KeyPoolQueryParamVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolQueryParamVersioningAllowed = KeyPoolVersioningAllowed

// KeyQueryParamIds defines model for KeyQueryParamIds.
type KeyQueryParamIds = []KeyId

// KeyQueryParamKeyPoolIds defines model for KeyQueryParamKeyPoolIds.
type KeyQueryParamKeyPoolIds = []KeyPoolId

// KeyQueryParamMaximumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyQueryParamMaximumGenerateDate = KeyGenerateDate

// KeyQueryParamMinimumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyQueryParamMinimumGenerateDate = KeyGenerateDate

// KeyQueryParamPageNumber Page number starting at 0.
type KeyQueryParamPageNumber = PageNumber

// KeyQueryParamPageSize Page number.
type KeyQueryParamPageSize = PageSize

// KeyQueryParamSorts defines model for KeyQueryParamSorts.
type KeyQueryParamSorts = []KeySort

// HTTP400BadRequest defines model for HTTP400BadRequest.
type HTTP400BadRequest struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP401Unauthorized defines model for HTTP401Unauthorized.
type HTTP401Unauthorized struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP403Forbidden defines model for HTTP403Forbidden.
type HTTP403Forbidden struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP404NotFound defines model for HTTP404NotFound.
type HTTP404NotFound struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP429TooManyRequests defines model for HTTP429TooManyRequests.
type HTTP429TooManyRequests struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP500InternalServerError defines model for HTTP500InternalServerError.
type HTTP500InternalServerError struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP502BadGateway defines model for HTTP502BadGateway.
type HTTP502BadGateway struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP503ServiceUnavailable defines model for HTTP503ServiceUnavailable.
type HTTP503ServiceUnavailable struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP504GatewayTimeout defines model for HTTP504GatewayTimeout.
type HTTP504GatewayTimeout struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"zF4sVDDiaRTd/ycAAP//7QmPqQM9AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
