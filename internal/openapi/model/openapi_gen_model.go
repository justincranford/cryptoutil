// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package model

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for KeyPoolAlgorithm.
const (
	AES128 KeyPoolAlgorithm = "AES-128"
	AES192 KeyPoolAlgorithm = "AES-192"
	AES256 KeyPoolAlgorithm = "AES-256"
)

// Defines values for KeyPoolProvider.
const (
	Internal KeyPoolProvider = "Internal"
)

// Defines values for KeyPoolSort.
const (
	KeyPoolSortAlgorithmASC          KeyPoolSort = "algorithm:ASC"
	KeyPoolSortAlgorithmDESC         KeyPoolSort = "algorithm:DESC"
	KeyPoolSortExportAllowedASC      KeyPoolSort = "export_allowed:ASC"
	KeyPoolSortExportAllowedDESC     KeyPoolSort = "export_allowed:DESC"
	KeyPoolSortIdASC                 KeyPoolSort = "id:ASC"
	KeyPoolSortIdDESC                KeyPoolSort = "id:DESC"
	KeyPoolSortImportAllowedASC      KeyPoolSort = "import_allowed:ASC"
	KeyPoolSortImportAllowedDESC     KeyPoolSort = "import_allowed:DESC"
	KeyPoolSortNameASC               KeyPoolSort = "name:ASC"
	KeyPoolSortNameDESC              KeyPoolSort = "name:DESC"
	KeyPoolSortProviderASC           KeyPoolSort = "provider:ASC"
	KeyPoolSortProviderDESC          KeyPoolSort = "provider:DESC"
	KeyPoolSortStatusASC             KeyPoolSort = "status:ASC"
	KeyPoolSortStatusDESC            KeyPoolSort = "status:DESC"
	KeyPoolSortVersioningAllowedASC  KeyPoolSort = "versioning_allowed:ASC"
	KeyPoolSortVersioningAllowedDESC KeyPoolSort = "versioning_allowed:DESC"
)

// Defines values for KeyPoolStatus.
const (
	Active                         KeyPoolStatus = "active"
	Creating                       KeyPoolStatus = "creating"
	Disabled                       KeyPoolStatus = "disabled"
	FinishedDelete                 KeyPoolStatus = "finished_delete"
	GenerateFailed                 KeyPoolStatus = "generate_failed"
	ImportFailed                   KeyPoolStatus = "import_failed"
	PendingDeleteWasActive         KeyPoolStatus = "pending_delete_was_active"
	PendingDeleteWasDisabled       KeyPoolStatus = "pending_delete_was_disabled"
	PendingDeleteWasGenerateFailed KeyPoolStatus = "pending_delete_was_generate_failed"
	PendingDeleteWasImportFailed   KeyPoolStatus = "pending_delete_was_import_failed"
	PendingDeleteWasPendingImport  KeyPoolStatus = "pending_delete_was_pending_import"
	PendingGenerate                KeyPoolStatus = "pending_generate"
	PendingImport                  KeyPoolStatus = "pending_import"
	StartedDelete                  KeyPoolStatus = "started_delete"
)

// Defines values for KeySort.
const (
	KeySortGenerateDate     KeySort = "generate_date"
	KeySortGenerateDateASC  KeySort = "generate_date:ASC"
	KeySortGenerateDateDESC KeySort = "generate_date:DESC"
	KeySortId               KeySort = "id"
	KeySortIdASC            KeySort = "id:ASC"
	KeySortIdDESC           KeySort = "id:DESC"
	KeySortPool             KeySort = "pool"
	KeySortPoolASC          KeySort = "pool:ASC"
	KeySortPoolDESC         KeySort = "pool:DESC"
)

// HTTPError defines model for HTTPError.
type HTTPError struct {
	// Error HTTP status message
	Error string `json:"error"`

	// Message Detailed error message
	Message string `json:"message"`

	// Status HTTP status code
	Status int `json:"status"`
}

// Key defines model for Key.
type Key struct {
	// GenerateDate ISO 8601 UTC timestamp of Key generation.
	GenerateDate *KeyGenerateDate `json:"generate_date,omitempty"`

	// Id Unique version of the Key in a Key Pool.
	Id *KeyId `json:"id,omitempty"`

	// Pool Unique UUID for a Key Pool.
	Pool *KeyPoolId `json:"pool,omitempty"`
}

// KeyGenerate defines model for KeyGenerate.
type KeyGenerate = map[string]interface{}

// KeyGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyGenerateDate = time.Time

// KeyId Unique version of the Key in a Key Pool.
type KeyId = int

// KeyPool defines model for KeyPool.
type KeyPool struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description *KeyPoolDescription `json:"description,omitempty"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`

	// Id Unique UUID for a Key Pool.
	Id *KeyPoolId `json:"id,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name *KeyPoolName `json:"name,omitempty"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// Status Status of the Key Pool.
	Status *KeyPoolStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolAlgorithm Cryptographic algorithm for the Key Pool.
type KeyPoolAlgorithm string

// KeyPoolCreate defines model for KeyPoolCreate.
type KeyPoolCreate struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolDescription Description for a Key Pool.
type KeyPoolDescription = string

// KeyPoolExportAllowed Indicates if the Key Pool supports export.
type KeyPoolExportAllowed = bool

// KeyPoolId Unique UUID for a Key Pool.
type KeyPoolId = openapi_types.UUID

// KeyPoolImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolImportAllowed = bool

// KeyPoolName Friendly name for a Key Pool.
type KeyPoolName = string

// KeyPoolProvider Provider of the Key Pool management service.
type KeyPoolProvider string

// KeyPoolQueryParams defines model for KeyPoolQueryParams.
type KeyPoolQueryParams struct {
	Algorithm *[]KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`
	Id            *[]KeyPoolId          `json:"id,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`
	Name          *[]KeyPoolName        `json:"name,omitempty"`
	Page          *int                  `json:"page,omitempty"`
	Provider      *[]KeyPoolProvider    `json:"provider,omitempty"`
	Size          *int                  `json:"size,omitempty"`
	Sort          *[]KeyPoolSort        `json:"sort,omitempty"`
	Status        *[]KeyPoolStatus      `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolSort defines model for KeyPoolSort.
type KeyPoolSort string

// KeyPoolStatus Status of the Key Pool.
type KeyPoolStatus string

// KeyPoolUpdate defines model for KeyPoolUpdate.
type KeyPoolUpdate struct {
	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`
}

// KeyPoolVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolVersioningAllowed = bool

// KeySort defines model for KeySort.
type KeySort string

// KeyUpdate defines model for KeyUpdate.
type KeyUpdate struct {
	// Id Unique version of the Key in a Key Pool.
	Id KeyId `json:"id"`

	// Pool Unique UUID for a Key Pool.
	Pool KeyPoolId `json:"pool"`
}

// PageNumber Page number starting at 0.
type PageNumber = int

// PageSize Page number.
type PageSize = int

// KeyFilterId defines model for KeyFilterId.
type KeyFilterId = []KeyId

// KeyFilterKeyPoolId defines model for KeyFilterKeyPoolId.
type KeyFilterKeyPoolId = []KeyPoolId

// KeyFilterMaximumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyFilterMaximumGenerateDate = KeyGenerateDate

// KeyFilterMinimumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyFilterMinimumGenerateDate = KeyGenerateDate

// KeyFilterPageNumber Page number starting at 0.
type KeyFilterPageNumber = PageNumber

// KeyFilterPageSize Page number.
type KeyFilterPageSize = PageSize

// KeyFilterSorts defines model for KeyFilterSorts.
type KeyFilterSorts = KeySort

// KeyPoolFilterAlgorithms defines model for KeyPoolFilterAlgorithms.
type KeyPoolFilterAlgorithms = []KeyPoolAlgorithm

// KeyPoolFilterExportAllowed Indicates if the Key Pool supports export.
type KeyPoolFilterExportAllowed = KeyPoolExportAllowed

// KeyPoolFilterIds defines model for KeyPoolFilterIds.
type KeyPoolFilterIds = []KeyPoolId

// KeyPoolFilterImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolFilterImportAllowed = KeyPoolImportAllowed

// KeyPoolFilterNames defines model for KeyPoolFilterNames.
type KeyPoolFilterNames = []KeyPoolName

// KeyPoolFilterPageNumber Page number starting at 0.
type KeyPoolFilterPageNumber = PageNumber

// KeyPoolFilterPageSize Page number.
type KeyPoolFilterPageSize = PageSize

// KeyPoolFilterProviders defines model for KeyPoolFilterProviders.
type KeyPoolFilterProviders = []KeyPoolProvider

// KeyPoolFilterSorts defines model for KeyPoolFilterSorts.
type KeyPoolFilterSorts = []KeyPoolSort

// KeyPoolFilterStatuses defines model for KeyPoolFilterStatuses.
type KeyPoolFilterStatuses = []KeyPoolStatus

// KeyPoolFilterVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolFilterVersioningAllowed = KeyPoolVersioningAllowed

// HTTP400BadRequest defines model for HTTP400BadRequest.
type HTTP400BadRequest struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP401Unauthorized defines model for HTTP401Unauthorized.
type HTTP401Unauthorized struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP403Forbidden defines model for HTTP403Forbidden.
type HTTP403Forbidden struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP404NotFound defines model for HTTP404NotFound.
type HTTP404NotFound struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP429TooManyRequests defines model for HTTP429TooManyRequests.
type HTTP429TooManyRequests struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP500InternalServerError defines model for HTTP500InternalServerError.
type HTTP500InternalServerError struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP502BadGateway defines model for HTTP502BadGateway.
type HTTP502BadGateway struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP503ServiceUnavailable defines model for HTTP503ServiceUnavailable.
type HTTP503ServiceUnavailable struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP504GatewayTimeout defines model for HTTP504GatewayTimeout.
type HTTP504GatewayTimeout struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
