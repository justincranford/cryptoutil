// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package model

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for KeyPoolAlgorithm.
const (
	AES128 KeyPoolAlgorithm = "AES-128"
	AES192 KeyPoolAlgorithm = "AES-192"
	AES256 KeyPoolAlgorithm = "AES-256"
)

// Defines values for KeyPoolProvider.
const (
	Internal KeyPoolProvider = "Internal"
)

// Defines values for KeyPoolStatus.
const (
	Active                         KeyPoolStatus = "active"
	Creating                       KeyPoolStatus = "creating"
	Disabled                       KeyPoolStatus = "disabled"
	FinishedDelete                 KeyPoolStatus = "finished_delete"
	GenerateFailed                 KeyPoolStatus = "generate_failed"
	ImportFailed                   KeyPoolStatus = "import_failed"
	PendingDeleteWasActive         KeyPoolStatus = "pending_delete_was_active"
	PendingDeleteWasDisabled       KeyPoolStatus = "pending_delete_was_disabled"
	PendingDeleteWasGenerateFailed KeyPoolStatus = "pending_delete_was_generate_failed"
	PendingDeleteWasImportFailed   KeyPoolStatus = "pending_delete_was_import_failed"
	PendingDeleteWasPendingImport  KeyPoolStatus = "pending_delete_was_pending_import"
	PendingGenerate                KeyPoolStatus = "pending_generate"
	PendingImport                  KeyPoolStatus = "pending_import"
	StartedDelete                  KeyPoolStatus = "started_delete"
)

// Defines values for KeyFilterSortParameter.
const (
	KeyFilterSortParameterGenerateDate     KeyFilterSortParameter = "generate_date"
	KeyFilterSortParameterGenerateDateASC  KeyFilterSortParameter = "generate_date:ASC"
	KeyFilterSortParameterGenerateDateDESC KeyFilterSortParameter = "generate_date:DESC"
	KeyFilterSortParameterId               KeyFilterSortParameter = "id"
	KeyFilterSortParameterIdASC            KeyFilterSortParameter = "id:ASC"
	KeyFilterSortParameterIdDESC           KeyFilterSortParameter = "id:DESC"
	KeyFilterSortParameterPool             KeyFilterSortParameter = "pool"
	KeyFilterSortParameterPoolASC          KeyFilterSortParameter = "pool:ASC"
	KeyFilterSortParameterPoolDESC         KeyFilterSortParameter = "pool:DESC"
)

// Defines values for KeyPoolFilterSortParameter.
const (
	KeyPoolFilterSortParameterAlgorithm             KeyPoolFilterSortParameter = "algorithm"
	KeyPoolFilterSortParameterAlgorithmASC          KeyPoolFilterSortParameter = "algorithm:ASC"
	KeyPoolFilterSortParameterAlgorithmDESC         KeyPoolFilterSortParameter = "algorithm:DESC"
	KeyPoolFilterSortParameterExportAllowed         KeyPoolFilterSortParameter = "export_allowed"
	KeyPoolFilterSortParameterExportAllowedASC      KeyPoolFilterSortParameter = "export_allowed:ASC"
	KeyPoolFilterSortParameterExportAllowedDESC     KeyPoolFilterSortParameter = "export_allowed:DESC"
	KeyPoolFilterSortParameterId                    KeyPoolFilterSortParameter = "id"
	KeyPoolFilterSortParameterIdASC                 KeyPoolFilterSortParameter = "id:ASC"
	KeyPoolFilterSortParameterIdDESC                KeyPoolFilterSortParameter = "id:DESC"
	KeyPoolFilterSortParameterImportAllowed         KeyPoolFilterSortParameter = "import_allowed"
	KeyPoolFilterSortParameterImportAllowedASC      KeyPoolFilterSortParameter = "import_allowed:ASC"
	KeyPoolFilterSortParameterImportAllowedDESC     KeyPoolFilterSortParameter = "import_allowed:DESC"
	KeyPoolFilterSortParameterName                  KeyPoolFilterSortParameter = "name"
	KeyPoolFilterSortParameterNameASC               KeyPoolFilterSortParameter = "name:ASC"
	KeyPoolFilterSortParameterNameDESC              KeyPoolFilterSortParameter = "name:DESC"
	KeyPoolFilterSortParameterProvider              KeyPoolFilterSortParameter = "provider"
	KeyPoolFilterSortParameterProviderASC           KeyPoolFilterSortParameter = "provider:ASC"
	KeyPoolFilterSortParameterProviderDESC          KeyPoolFilterSortParameter = "provider:DESC"
	KeyPoolFilterSortParameterStatus                KeyPoolFilterSortParameter = "status"
	KeyPoolFilterSortParameterStatusASC             KeyPoolFilterSortParameter = "status:ASC"
	KeyPoolFilterSortParameterStatusDESC            KeyPoolFilterSortParameter = "status:DESC"
	KeyPoolFilterSortParameterVersioningAllowed     KeyPoolFilterSortParameter = "versioning_allowed"
	KeyPoolFilterSortParameterVersioningAllowedASC  KeyPoolFilterSortParameter = "versioning_allowed:ASC"
	KeyPoolFilterSortParameterVersioningAllowedDESC KeyPoolFilterSortParameter = "versioning_allowed:DESC"
)

// HTTPError defines model for HTTPError.
type HTTPError struct {
	// Error HTTP status message
	Error string `json:"error"`

	// Message Detailed error message
	Message string `json:"message"`

	// Status HTTP status code
	Status int `json:"status"`
}

// Key defines model for Key.
type Key struct {
	// GenerateDate ISO 8601 UTC timestamp of Key generation.
	GenerateDate *KeyGenerateDate `json:"generate_date,omitempty"`

	// Id Unique version of the Key in a Key Pool.
	Id *KeyId `json:"id,omitempty"`

	// Pool Unique UUID for a Key Pool.
	Pool *KeyPoolId `json:"pool,omitempty"`
}

// KeyGenerate defines model for KeyGenerate.
type KeyGenerate = map[string]interface{}

// KeyGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyGenerateDate = time.Time

// KeyId Unique version of the Key in a Key Pool.
type KeyId = int

// KeyPool defines model for KeyPool.
type KeyPool struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description *KeyPoolDescription `json:"description,omitempty"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolIsExportAllowed `json:"export_allowed,omitempty"`

	// Id Unique UUID for a Key Pool.
	Id *KeyPoolId `json:"id,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolIsImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name *KeyPoolName `json:"name,omitempty"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// Status Status of the Key Pool.
	Status *KeyPoolStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolIsVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolAlgorithm Cryptographic algorithm for the Key Pool.
type KeyPoolAlgorithm string

// KeyPoolCreate defines model for KeyPoolCreate.
type KeyPoolCreate struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolIsExportAllowed `json:"export_allowed,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolIsImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolIsVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolDescription Description for a Key Pool.
type KeyPoolDescription = string

// KeyPoolId Unique UUID for a Key Pool.
type KeyPoolId = openapi_types.UUID

// KeyPoolIsExportAllowed Indicates if the Key Pool supports export.
type KeyPoolIsExportAllowed = bool

// KeyPoolIsImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolIsImportAllowed = bool

// KeyPoolIsVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolIsVersioningAllowed = bool

// KeyPoolName Friendly name for a Key Pool.
type KeyPoolName = string

// KeyPoolProvider Provider of the Key Pool management service.
type KeyPoolProvider string

// KeyPoolStatus Status of the Key Pool.
type KeyPoolStatus string

// KeyPoolUpdate defines model for KeyPoolUpdate.
type KeyPoolUpdate struct {
	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`
}

// KeyUpdate defines model for KeyUpdate.
type KeyUpdate struct {
	// Id Unique version of the Key in a Key Pool.
	Id KeyId `json:"id"`

	// Pool Unique UUID for a Key Pool.
	Pool KeyPoolId `json:"pool"`
}

// PageNumber Page number starting at 0.
type PageNumber = int

// PageSize Page number.
type PageSize = int

// KeyFilterId Unique version of the Key in a Key Pool.
type KeyFilterId = KeyId

// KeyFilterKeyPoolId Unique UUID for a Key Pool.
type KeyFilterKeyPoolId = KeyPoolId

// KeyFilterMaximumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyFilterMaximumGenerateDate = KeyGenerateDate

// KeyFilterMinimumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyFilterMinimumGenerateDate = KeyGenerateDate

// KeyFilterPageNumber Page number starting at 0.
type KeyFilterPageNumber = PageNumber

// KeyFilterPageSize Page number.
type KeyFilterPageSize = PageSize

// KeyFilterSortParameter defines model for KeyFilterSortParameter.
type KeyFilterSortParameter string

// KeyPoolFilterAlgorithm Cryptographic algorithm for the Key Pool.
type KeyPoolFilterAlgorithm = KeyPoolAlgorithm

// KeyPoolFilterId Unique UUID for a Key Pool.
type KeyPoolFilterId = KeyPoolId

// KeyPoolFilterIsExportAllowed Indicates if the Key Pool supports export.
type KeyPoolFilterIsExportAllowed = KeyPoolIsExportAllowed

// KeyPoolFilterIsImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolFilterIsImportAllowed = KeyPoolIsImportAllowed

// KeyPoolFilterIsVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolFilterIsVersioningAllowed = KeyPoolIsVersioningAllowed

// KeyPoolFilterName Friendly name for a Key Pool.
type KeyPoolFilterName = KeyPoolName

// KeyPoolFilterPageNumber Page number starting at 0.
type KeyPoolFilterPageNumber = PageNumber

// KeyPoolFilterPageSize Page number.
type KeyPoolFilterPageSize = PageSize

// KeyPoolFilterProvider Provider of the Key Pool management service.
type KeyPoolFilterProvider = KeyPoolProvider

// KeyPoolFilterSortParameter defines model for KeyPoolFilterSortParameter.
type KeyPoolFilterSortParameter string

// KeyPoolFilterStatus Status of the Key Pool.
type KeyPoolFilterStatus = KeyPoolStatus

// HTTP400BadRequest defines model for HTTP400BadRequest.
type HTTP400BadRequest struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP401Unauthorized defines model for HTTP401Unauthorized.
type HTTP401Unauthorized struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP403Forbidden defines model for HTTP403Forbidden.
type HTTP403Forbidden struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP404NotFound defines model for HTTP404NotFound.
type HTTP404NotFound struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP429TooManyRequests defines model for HTTP429TooManyRequests.
type HTTP429TooManyRequests struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP500InternalServerError defines model for HTTP500InternalServerError.
type HTTP500InternalServerError struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP502BadGateway defines model for HTTP502BadGateway.
type HTTP502BadGateway struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP503ServiceUnavailable defines model for HTTP503ServiceUnavailable.
type HTTP503ServiceUnavailable struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP504GatewayTimeout defines model for HTTP504GatewayTimeout.
type HTTP504GatewayTimeout struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
