// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package model

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for KeyPoolAlgorithm.
const (
	AES128 KeyPoolAlgorithm = "AES-128"
	AES192 KeyPoolAlgorithm = "AES-192"
	AES256 KeyPoolAlgorithm = "AES-256"
)

// Defines values for KeyPoolProvider.
const (
	Internal KeyPoolProvider = "Internal"
)

// Defines values for KeyPoolSort.
const (
	KeyPoolSortAlgorithmASC          KeyPoolSort = "algorithm:ASC"
	KeyPoolSortAlgorithmDESC         KeyPoolSort = "algorithm:DESC"
	KeyPoolSortExportAllowedASC      KeyPoolSort = "export_allowed:ASC"
	KeyPoolSortExportAllowedDESC     KeyPoolSort = "export_allowed:DESC"
	KeyPoolSortIdASC                 KeyPoolSort = "id:ASC"
	KeyPoolSortIdDESC                KeyPoolSort = "id:DESC"
	KeyPoolSortImportAllowedASC      KeyPoolSort = "import_allowed:ASC"
	KeyPoolSortImportAllowedDESC     KeyPoolSort = "import_allowed:DESC"
	KeyPoolSortNameASC               KeyPoolSort = "name:ASC"
	KeyPoolSortNameDESC              KeyPoolSort = "name:DESC"
	KeyPoolSortProviderASC           KeyPoolSort = "provider:ASC"
	KeyPoolSortProviderDESC          KeyPoolSort = "provider:DESC"
	KeyPoolSortStatusASC             KeyPoolSort = "status:ASC"
	KeyPoolSortStatusDESC            KeyPoolSort = "status:DESC"
	KeyPoolSortVersioningAllowedASC  KeyPoolSort = "versioning_allowed:ASC"
	KeyPoolSortVersioningAllowedDESC KeyPoolSort = "versioning_allowed:DESC"
)

// Defines values for KeyPoolStatus.
const (
	Active                         KeyPoolStatus = "active"
	Creating                       KeyPoolStatus = "creating"
	Disabled                       KeyPoolStatus = "disabled"
	FinishedDelete                 KeyPoolStatus = "finished_delete"
	GenerateFailed                 KeyPoolStatus = "generate_failed"
	ImportFailed                   KeyPoolStatus = "import_failed"
	PendingDeleteWasActive         KeyPoolStatus = "pending_delete_was_active"
	PendingDeleteWasDisabled       KeyPoolStatus = "pending_delete_was_disabled"
	PendingDeleteWasGenerateFailed KeyPoolStatus = "pending_delete_was_generate_failed"
	PendingDeleteWasImportFailed   KeyPoolStatus = "pending_delete_was_import_failed"
	PendingDeleteWasPendingImport  KeyPoolStatus = "pending_delete_was_pending_import"
	PendingGenerate                KeyPoolStatus = "pending_generate"
	PendingImport                  KeyPoolStatus = "pending_import"
	StartedDelete                  KeyPoolStatus = "started_delete"
)

// Defines values for KeySort.
const (
	KeySortGenerateDate     KeySort = "generate_date"
	KeySortGenerateDateASC  KeySort = "generate_date:ASC"
	KeySortGenerateDateDESC KeySort = "generate_date:DESC"
	KeySortId               KeySort = "id"
	KeySortIdASC            KeySort = "id:ASC"
	KeySortIdDESC           KeySort = "id:DESC"
	KeySortPool             KeySort = "pool"
	KeySortPoolASC          KeySort = "pool:ASC"
	KeySortPoolDESC         KeySort = "pool:DESC"
)

// Defines values for SymmetricCipherAlgorithm.
const (
	AESGCMDirectV1    SymmetricCipherAlgorithm = "AES-GCM-Direct-V1"
	AESGCMKeyWrapV1   SymmetricCipherAlgorithm = "AES-GCM-KeyWrap-V1"
	AESGCMSIVDirectV1 SymmetricCipherAlgorithm = "AES-GCM-SIV-Direct-V1"
)

// HTTPError defines model for HTTPError.
type HTTPError struct {
	// Error HTTP status message
	Error string `json:"error"`

	// Message Detailed error message
	Message string `json:"message"`

	// Status HTTP status code
	Status int `json:"status"`
}

// Key defines model for Key.
type Key struct {
	// GenerateDate ISO 8601 UTC timestamp of Key generation.
	GenerateDate *KeyGenerateDate `json:"generate_date,omitempty"`

	// Id Unique UUID for a Key.
	Id *KeyId `json:"id,omitempty"`

	// Pool Unique UUID for a Key Pool.
	Pool *KeyPoolId `json:"pool,omitempty"`
}

// KeyGenerate defines model for KeyGenerate.
type KeyGenerate = map[string]interface{}

// KeyGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyGenerateDate = time.Time

// KeyId Unique UUID for a Key.
type KeyId = openapi_types.UUID

// KeyPool defines model for KeyPool.
type KeyPool struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description *KeyPoolDescription `json:"description,omitempty"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`

	// Id Unique UUID for a Key Pool.
	Id *KeyPoolId `json:"id,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name *KeyPoolName `json:"name,omitempty"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// Status Status of the Key Pool.
	Status *KeyPoolStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolAlgorithm Cryptographic algorithm for the Key Pool.
type KeyPoolAlgorithm string

// KeyPoolCreate defines model for KeyPoolCreate.
type KeyPoolCreate struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolDescription Description for a Key Pool.
type KeyPoolDescription = string

// KeyPoolExportAllowed Indicates if the Key Pool supports export.
type KeyPoolExportAllowed = bool

// KeyPoolId Unique UUID for a Key Pool.
type KeyPoolId = openapi_types.UUID

// KeyPoolImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolImportAllowed = bool

// KeyPoolKeysQueryParams defines model for KeyPoolKeysQueryParams.
type KeyPoolKeysQueryParams struct {
	Id *[]KeyId `json:"id,omitempty"`

	// MaxGenerateDate ISO 8601 UTC timestamp of Key generation.
	MaxGenerateDate *KeyGenerateDate `json:"max_generate_date,omitempty"`

	// MinGenerateDate ISO 8601 UTC timestamp of Key generation.
	MinGenerateDate *KeyGenerateDate `json:"min_generate_date,omitempty"`

	// Page Page number starting at 0.
	Page *PageNumber `json:"page,omitempty"`

	// Size Page number.
	Size *PageSize  `json:"size,omitempty"`
	Sort *[]KeySort `json:"sort,omitempty"`
}

// KeyPoolName Friendly name for a Key Pool.
type KeyPoolName = string

// KeyPoolProvider Provider of the Key Pool management service.
type KeyPoolProvider string

// KeyPoolSort defines model for KeyPoolSort.
type KeyPoolSort string

// KeyPoolStatus Status of the Key Pool.
type KeyPoolStatus string

// KeyPoolUpdate defines model for KeyPoolUpdate.
type KeyPoolUpdate struct {
	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`
}

// KeyPoolVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolVersioningAllowed = bool

// KeyPoolsQueryParams defines model for KeyPoolsQueryParams.
type KeyPoolsQueryParams struct {
	Algorithm *[]KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`
	Id            *[]KeyPoolId          `json:"id,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`
	Name          *[]KeyPoolName        `json:"name,omitempty"`

	// Page Page number starting at 0.
	Page     *PageNumber        `json:"page,omitempty"`
	Provider *[]KeyPoolProvider `json:"provider,omitempty"`

	// Size Page number.
	Size   *PageSize        `json:"size,omitempty"`
	Sort   *[]KeyPoolSort   `json:"sort,omitempty"`
	Status *[]KeyPoolStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeySort defines model for KeySort.
type KeySort string

// KeyUpdate defines model for KeyUpdate.
type KeyUpdate struct {
	// Id Unique UUID for a Key.
	Id KeyId `json:"id"`

	// Pool Unique UUID for a Key Pool.
	Pool KeyPoolId `json:"pool"`
}

// KeysQueryParams defines model for KeysQueryParams.
type KeysQueryParams struct {
	Id *[]KeyId `json:"id,omitempty"`

	// MaxGenerateDate ISO 8601 UTC timestamp of Key generation.
	MaxGenerateDate *KeyGenerateDate `json:"max_generate_date,omitempty"`

	// MinGenerateDate ISO 8601 UTC timestamp of Key generation.
	MinGenerateDate *KeyGenerateDate `json:"min_generate_date,omitempty"`

	// Page Page number starting at 0.
	Page *PageNumber  `json:"page,omitempty"`
	Pool *[]KeyPoolId `json:"pool,omitempty"`

	// Size Page number.
	Size *PageSize  `json:"size,omitempty"`
	Sort *[]KeySort `json:"sort,omitempty"`
}

// PageNumber Page number starting at 0.
type PageNumber = int

// PageSize Page number.
type PageSize = int

// SymmetricCipherAdditionalAuthenticatedData Base64URL-encoded Additional Authenticated Data (AAD). This is non-secret data used for authentication and integrity checking during decryption (e.g. namespace, context).
type SymmetricCipherAdditionalAuthenticatedData = string

// SymmetricCipherAlgorithm Optional encryption algorithm. Defaults to `AES-GCM-KeyWrap-V1`. - `AES-GCM-KeyWrap-V1`: randomized envelope encryption (default) for large, non-searchable values such as file contents, clobs, blobs, etc. - `AES-GCM-Direct-V1`: randomized direct encryption, for small, non-searchable values such as encryption keys, signing keys, deriving keys, etc. - `AES-GCM-SIV-Direct-V1`: deterministic direct encryption (aka convergent) for small, searchable values such as IDs or attributes, including usernames, names, numbers, and PII (Personally Identifiable Information).
type SymmetricCipherAlgorithm string

// SymmetricCipherInitializationVector Base64URL-encoded Nonce (e.g. 12-bytes AES-GCM or AES-GCM-SIV) or Initialization Vector (e.g. 16-bytes AES-CBC). This is non-secret data used for encryption/decryption, as well as authentication and integrity checking during decryption (e.g. namespace, context).
type SymmetricCipherInitializationVector = string

// SymmetricDecryptRequest Base64Url-encoded JSON Web Encryption (JWE) of the encrypted bytes and non-secret cipher parameters. See RFC 7516 JSON Web Encryption (JWE) for more details.
type SymmetricDecryptRequest = []byte

// SymmetricDecryptResponse Decrypted, secret bytes.
type SymmetricDecryptResponse = openapi_types.File

// SymmetricEncryptParams defines model for SymmetricEncryptParams.
type SymmetricEncryptParams struct {
	// Aad Base64URL-encoded Additional Authenticated Data (AAD). This is non-secret data used for authentication and integrity checking during decryption (e.g. namespace, context).
	Aad *SymmetricCipherAdditionalAuthenticatedData `json:"aad,omitempty"`

	// Alg Optional encryption algorithm. Defaults to `AES-GCM-KeyWrap-V1`. - `AES-GCM-KeyWrap-V1`: randomized envelope encryption (default) for large, non-searchable values such as file contents, clobs, blobs, etc. - `AES-GCM-Direct-V1`: randomized direct encryption, for small, non-searchable values such as encryption keys, signing keys, deriving keys, etc. - `AES-GCM-SIV-Direct-V1`: deterministic direct encryption (aka convergent) for small, searchable values such as IDs or attributes, including usernames, names, numbers, and PII (Personally Identifiable Information).
	Alg *SymmetricCipherAlgorithm `json:"alg,omitempty"`

	// Iv Base64URL-encoded Nonce (e.g. 12-bytes AES-GCM or AES-GCM-SIV) or Initialization Vector (e.g. 16-bytes AES-CBC). This is non-secret data used for encryption/decryption, as well as authentication and integrity checking during decryption (e.g. namespace, context).
	Iv *SymmetricCipherInitializationVector `json:"iv,omitempty"`
}

// SymmetricEncryptRequest Clear, secret bytes to be encrypted.
type SymmetricEncryptRequest = openapi_types.File

// SymmetricEncryptResponse Base64Url-encoded JSON Web Encryption (JWE) of the encrypted bytes and non-secret cipher parameters. See RFC 7516 JSON Web Encryption (JWE) for more details.
type SymmetricEncryptResponse = []byte

// KeyPoolQueryParamAlgorithms defines model for KeyPoolQueryParamAlgorithms.
type KeyPoolQueryParamAlgorithms = []KeyPoolAlgorithm

// KeyPoolQueryParamExportAllowed Indicates if the Key Pool supports export.
type KeyPoolQueryParamExportAllowed = KeyPoolExportAllowed

// KeyPoolQueryParamIds defines model for KeyPoolQueryParamIds.
type KeyPoolQueryParamIds = []KeyPoolId

// KeyPoolQueryParamImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolQueryParamImportAllowed = KeyPoolImportAllowed

// KeyPoolQueryParamNames defines model for KeyPoolQueryParamNames.
type KeyPoolQueryParamNames = []KeyPoolName

// KeyPoolQueryParamPageNumber Page number starting at 0.
type KeyPoolQueryParamPageNumber = PageNumber

// KeyPoolQueryParamPageSize Page number.
type KeyPoolQueryParamPageSize = PageSize

// KeyPoolQueryParamProviders defines model for KeyPoolQueryParamProviders.
type KeyPoolQueryParamProviders = []KeyPoolProvider

// KeyPoolQueryParamSorts defines model for KeyPoolQueryParamSorts.
type KeyPoolQueryParamSorts = []KeyPoolSort

// KeyPoolQueryParamStatuses defines model for KeyPoolQueryParamStatuses.
type KeyPoolQueryParamStatuses = []KeyPoolStatus

// KeyPoolQueryParamVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolQueryParamVersioningAllowed = KeyPoolVersioningAllowed

// KeyQueryParamIds defines model for KeyQueryParamIds.
type KeyQueryParamIds = []KeyId

// KeyQueryParamKeyPoolIds defines model for KeyQueryParamKeyPoolIds.
type KeyQueryParamKeyPoolIds = []KeyPoolId

// KeyQueryParamMaximumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyQueryParamMaximumGenerateDate = KeyGenerateDate

// KeyQueryParamMinimumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyQueryParamMinimumGenerateDate = KeyGenerateDate

// KeyQueryParamPageNumber Page number starting at 0.
type KeyQueryParamPageNumber = PageNumber

// KeyQueryParamPageSize Page number.
type KeyQueryParamPageSize = PageSize

// KeyQueryParamSorts defines model for KeyQueryParamSorts.
type KeyQueryParamSorts = []KeySort

// HTTP400BadRequest defines model for HTTP400BadRequest.
type HTTP400BadRequest struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP401Unauthorized defines model for HTTP401Unauthorized.
type HTTP401Unauthorized struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP403Forbidden defines model for HTTP403Forbidden.
type HTTP403Forbidden struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP404NotFound defines model for HTTP404NotFound.
type HTTP404NotFound struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP429TooManyRequests defines model for HTTP429TooManyRequests.
type HTTP429TooManyRequests struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP500InternalServerError defines model for HTTP500InternalServerError.
type HTTP500InternalServerError struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP502BadGateway defines model for HTTP502BadGateway.
type HTTP502BadGateway struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP503ServiceUnavailable defines model for HTTP503ServiceUnavailable.
type HTTP503ServiceUnavailable struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP504GatewayTimeout defines model for HTTP504GatewayTimeout.
type HTTP504GatewayTimeout struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
