// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package model

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for KeyPoolAlgorithm.
const (
	AES128 KeyPoolAlgorithm = "AES-128"
	AES192 KeyPoolAlgorithm = "AES-192"
	AES256 KeyPoolAlgorithm = "AES-256"
)

// Defines values for KeyPoolProvider.
const (
	Internal KeyPoolProvider = "Internal"
)

// Defines values for KeyPoolStatus.
const (
	Active                         KeyPoolStatus = "active"
	Creating                       KeyPoolStatus = "creating"
	Disabled                       KeyPoolStatus = "disabled"
	FinishedDelete                 KeyPoolStatus = "finished_delete"
	GenerateFailed                 KeyPoolStatus = "generate_failed"
	ImportFailed                   KeyPoolStatus = "import_failed"
	PendingDeleteWasActive         KeyPoolStatus = "pending_delete_was_active"
	PendingDeleteWasDisabled       KeyPoolStatus = "pending_delete_was_disabled"
	PendingDeleteWasGenerateFailed KeyPoolStatus = "pending_delete_was_generate_failed"
	PendingDeleteWasImportFailed   KeyPoolStatus = "pending_delete_was_import_failed"
	PendingDeleteWasPendingImport  KeyPoolStatus = "pending_delete_was_pending_import"
	PendingGenerate                KeyPoolStatus = "pending_generate"
	PendingImport                  KeyPoolStatus = "pending_import"
	StartedDelete                  KeyPoolStatus = "started_delete"
)

// Defines values for KeyFilterSortParameter.
const (
	KeyFilterSortParameterGenerateDate     KeyFilterSortParameter = "generate_date"
	KeyFilterSortParameterGenerateDateASC  KeyFilterSortParameter = "generate_date:ASC"
	KeyFilterSortParameterGenerateDateDESC KeyFilterSortParameter = "generate_date:DESC"
	KeyFilterSortParameterId               KeyFilterSortParameter = "id"
	KeyFilterSortParameterIdASC            KeyFilterSortParameter = "id:ASC"
	KeyFilterSortParameterIdDESC           KeyFilterSortParameter = "id:DESC"
	KeyFilterSortParameterPool             KeyFilterSortParameter = "pool"
	KeyFilterSortParameterPoolASC          KeyFilterSortParameter = "pool:ASC"
	KeyFilterSortParameterPoolDESC         KeyFilterSortParameter = "pool:DESC"
)

// Defines values for KeyPoolFilterSortParameter.
const (
	KeyPoolFilterSortParameterAlgorithm             KeyPoolFilterSortParameter = "algorithm"
	KeyPoolFilterSortParameterAlgorithmASC          KeyPoolFilterSortParameter = "algorithm:ASC"
	KeyPoolFilterSortParameterAlgorithmDESC         KeyPoolFilterSortParameter = "algorithm:DESC"
	KeyPoolFilterSortParameterExportAllowed         KeyPoolFilterSortParameter = "export_allowed"
	KeyPoolFilterSortParameterExportAllowedASC      KeyPoolFilterSortParameter = "export_allowed:ASC"
	KeyPoolFilterSortParameterExportAllowedDESC     KeyPoolFilterSortParameter = "export_allowed:DESC"
	KeyPoolFilterSortParameterId                    KeyPoolFilterSortParameter = "id"
	KeyPoolFilterSortParameterIdASC                 KeyPoolFilterSortParameter = "id:ASC"
	KeyPoolFilterSortParameterIdDESC                KeyPoolFilterSortParameter = "id:DESC"
	KeyPoolFilterSortParameterImportAllowed         KeyPoolFilterSortParameter = "import_allowed"
	KeyPoolFilterSortParameterImportAllowedASC      KeyPoolFilterSortParameter = "import_allowed:ASC"
	KeyPoolFilterSortParameterImportAllowedDESC     KeyPoolFilterSortParameter = "import_allowed:DESC"
	KeyPoolFilterSortParameterName                  KeyPoolFilterSortParameter = "name"
	KeyPoolFilterSortParameterNameASC               KeyPoolFilterSortParameter = "name:ASC"
	KeyPoolFilterSortParameterNameDESC              KeyPoolFilterSortParameter = "name:DESC"
	KeyPoolFilterSortParameterProvider              KeyPoolFilterSortParameter = "provider"
	KeyPoolFilterSortParameterProviderASC           KeyPoolFilterSortParameter = "provider:ASC"
	KeyPoolFilterSortParameterProviderDESC          KeyPoolFilterSortParameter = "provider:DESC"
	KeyPoolFilterSortParameterStatus                KeyPoolFilterSortParameter = "status"
	KeyPoolFilterSortParameterStatusASC             KeyPoolFilterSortParameter = "status:ASC"
	KeyPoolFilterSortParameterStatusDESC            KeyPoolFilterSortParameter = "status:DESC"
	KeyPoolFilterSortParameterVersioningAllowed     KeyPoolFilterSortParameter = "versioning_allowed"
	KeyPoolFilterSortParameterVersioningAllowedASC  KeyPoolFilterSortParameter = "versioning_allowed:ASC"
	KeyPoolFilterSortParameterVersioningAllowedDESC KeyPoolFilterSortParameter = "versioning_allowed:DESC"
)

// HTTPError defines model for HTTPError.
type HTTPError struct {
	// Error HTTP status message
	Error string `json:"error"`

	// Message Detailed error message
	Message string `json:"message"`

	// Status HTTP status code
	Status int `json:"status"`
}

// Key defines model for Key.
type Key struct {
	// GenerateDate ISO 8601 UTC timestamp of Key generation.
	GenerateDate *KeyGenerateDate `json:"generate_date,omitempty"`

	// Id Unique version of the Key in a Key Pool.
	Id *KeyId `json:"id,omitempty"`

	// Pool Unique UUID for a Key Pool.
	Pool *KeyPoolId `json:"pool,omitempty"`
}

// KeyGenerate defines model for KeyGenerate.
type KeyGenerate = map[string]interface{}

// KeyGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyGenerateDate = time.Time

// KeyId Unique version of the Key in a Key Pool.
type KeyId = int

// KeyPool defines model for KeyPool.
type KeyPool struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description *KeyPoolDescription `json:"description,omitempty"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolIsExportAllowed `json:"export_allowed,omitempty"`

	// Id Unique UUID for a Key Pool.
	Id *KeyPoolId `json:"id,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolIsImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name *KeyPoolName `json:"name,omitempty"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// Status Status of the Key Pool.
	Status *KeyPoolStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolIsVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolAlgorithm Cryptographic algorithm for the Key Pool.
type KeyPoolAlgorithm string

// KeyPoolCreate defines model for KeyPoolCreate.
type KeyPoolCreate struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolIsExportAllowed `json:"export_allowed,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolIsImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolIsVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolDescription Description for a Key Pool.
type KeyPoolDescription = string

// KeyPoolId Unique UUID for a Key Pool.
type KeyPoolId = openapi_types.UUID

// KeyPoolIsExportAllowed Indicates if the Key Pool supports export.
type KeyPoolIsExportAllowed = bool

// KeyPoolIsImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolIsImportAllowed = bool

// KeyPoolIsVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolIsVersioningAllowed = bool

// KeyPoolName Friendly name for a Key Pool.
type KeyPoolName = string

// KeyPoolProvider Provider of the Key Pool management service.
type KeyPoolProvider string

// KeyPoolStatus Status of the Key Pool.
type KeyPoolStatus string

// KeyPoolUpdate defines model for KeyPoolUpdate.
type KeyPoolUpdate struct {
	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`
}

// KeyUpdate defines model for KeyUpdate.
type KeyUpdate struct {
	// Id Unique version of the Key in a Key Pool.
	Id KeyId `json:"id"`

	// Pool Unique UUID for a Key Pool.
	Pool KeyPoolId `json:"pool"`
}

// PageNumber Page number starting at 0.
type PageNumber = int

// PageSize Page number.
type PageSize = int

// KeyFilterId Unique version of the Key in a Key Pool.
type KeyFilterId = KeyId

// KeyFilterKeyPoolId Unique UUID for a Key Pool.
type KeyFilterKeyPoolId = KeyPoolId

// KeyFilterMaximumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyFilterMaximumGenerateDate = KeyGenerateDate

// KeyFilterMinimumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyFilterMinimumGenerateDate = KeyGenerateDate

// KeyFilterSortParameter defines model for KeyFilterSortParameter.
type KeyFilterSortParameter string

// KeyPoolFilterAlgorithm Cryptographic algorithm for the Key Pool.
type KeyPoolFilterAlgorithm = KeyPoolAlgorithm

// KeyPoolFilterId Unique UUID for a Key Pool.
type KeyPoolFilterId = KeyPoolId

// KeyPoolFilterIsExportAllowed Indicates if the Key Pool supports export.
type KeyPoolFilterIsExportAllowed = KeyPoolIsExportAllowed

// KeyPoolFilterIsImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolFilterIsImportAllowed = KeyPoolIsImportAllowed

// KeyPoolFilterIsVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolFilterIsVersioningAllowed = KeyPoolIsVersioningAllowed

// KeyPoolFilterName Friendly name for a Key Pool.
type KeyPoolFilterName = KeyPoolName

// KeyPoolFilterProvider Provider of the Key Pool management service.
type KeyPoolFilterProvider = KeyPoolProvider

// KeyPoolFilterSortParameter defines model for KeyPoolFilterSortParameter.
type KeyPoolFilterSortParameter string

// KeyPoolFilterStatus Status of the Key Pool.
type KeyPoolFilterStatus = KeyPoolStatus

// HTTP400BadRequest defines model for HTTP400BadRequest.
type HTTP400BadRequest struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP401Unauthorized defines model for HTTP401Unauthorized.
type HTTP401Unauthorized struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP403Forbidden defines model for HTTP403Forbidden.
type HTTP403Forbidden struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP404NotFound defines model for HTTP404NotFound.
type HTTP404NotFound struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP429TooManyRequests defines model for HTTP429TooManyRequests.
type HTTP429TooManyRequests struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP500InternalServerError defines model for HTTP500InternalServerError.
type HTTP500InternalServerError struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP502BadGateway defines model for HTTP502BadGateway.
type HTTP502BadGateway struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP503ServiceUnavailable defines model for HTTP503ServiceUnavailable.
type HTTP503ServiceUnavailable struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP504GatewayTimeout defines model for HTTP504GatewayTimeout.
type HTTP504GatewayTimeout struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xaUW/bOBL+KwTvHlrATW3HLjZ+S+t0z8htGjTOAXu9IqXFsc2FRKok5cQt8t8PpEhZ",
	"tCRXclukdy+JRJHDj/PNDIccf8WRSFLBgWuFJ19xSiRJQIO0b5ewfctiDXJGzSsFFUmWaiY4nuD8C1ps",
	"kV4DuoQtmk1PcA8z8/FzBnKLe5iTBPAEM4p7WEVrSIgR9HcJSzzBf3u5m/xl/lW9vITtjOLHx95u9kvY",
	"XgsRtwNheqLZFD3LMkafNwFKhYi7QHLzB7D+IA8syZLfgYMkGqZEQxuAST4Mrdw4RM2fZ4xHcabYBhox",
	"J+Thzg+6M4O6LCBAGS6D8aOWkQ87YhmM/4xl3Aipr731Vhdwk0LEllukhNSMrxBR6NOSQUyvSAITyiRE",
	"pucn9AxOVic99InRCVHRp+cn6D2kQDQqXAMthURJFmuWxmAFIitJNa3YdAkWCTxL8OSDt0Lzb3J+88Y/",
	"Ti/ss3UaRt0XRn37vvKCd9c7bLMDP/aw3qYWj5aMr7z6jGnnKjyPV0IyvU4O8R/JbarFSpJ0zSJE/JCm",
	"tRcdunrbDkwFZ8dAcHs7mz7/MZEpDAMlROriIRVSn8exuIeD8O7XoNcgEdgBiClE8kFNCPOOd65XZ7R7",
	"yGqgz5KO0FnSEnre8XjoIbIa6P8CqZjgjK86wN8Ug1osYdf5+GVUUVaWcmVna2nUBloTXvuvI0I7eQXS",
	"tRQbRuti6Q5WASl1nRv3Wy+sI7QCRAXej473BujPj/hNMd3RZkGcFy3+a0l7/tHvF/7V9SyH2+LZ9d29",
	"u861tl1tdMNrPviNat/Nwwa/2LDRja1Et7DBjd1rdGOVJjpTxYPr615a7nk3uYy2rpcLb6S9ANTFxh0E",
	"A+2arOAqSxa5Rdc6Elm19++SOC/9hn2BJtnKfOsi2wp7NKIlqFRwBVaT/5jPr0f9/mtC38PnDJQ2jZHg",
	"Grh9JGkas4gYTb/8Sxl1fy1NSuL43RJPPhye3sxxIaWQ+LH31bhBClKzfH6w7ebhgSRpbJb2mlDkwVRs",
	"oocTUMooNhgzXwOS+RgUiSymiAuNFoAyTkEqLQRFQqJ7olDClDJRxnRnEugudFhbqcynCqsrphv1+z3s",
	"zgb+LU+x3ZsTwriGlSPUNYnFXxBp/PjRUhHacXnhjz1HzeCWk0yvhWRf8i3zackJ0LRl5zzTa+DaQUVL",
	"wmKwfGQKJKIClKVrTTaAUpCWIcGVDeXGpSkoyxSx+0B7lgYBS4OApcGxLAUaKGg6fSvkglEK/Ok52kE5",
	"kiCVRREABYoWmbYMkF0HoHW0kSgCpZAWtrsEJTIZQXuqTgOqTgOqTo+laqeIgqfRldBvRcZ/AVe6Ehrl",
	"UI6IckALJYcBb2kkttf7KND7KND76Fi971bm9T48mwvxB+FbF9/U06t/LgQyiFABqS0Nf4osN3oFXCMt",
	"BEqMHMeMQowjglZsAxyRRGRcI7FEmiXt3WF4VqbFvhW0mLfjaKmu2NEz7vdnXIPkJL4BuQF54dX1tBR5",
	"UChHhfKhrYMaRxmHhxQi4y1WPBJRlEmzlQhuA5WygtvyMg72/XGw74+P3/frl1lwM3xN6O9Ewz3Z/hrJ",
	"mQfTJWzlikYSImAbs5VzxPiGxMzGMZuPoqUUiWUlS5WWQJLO9AwDeoYBPcPvScv8kgtSTg1XLIJbTjaE",
	"xWQRw9OT4zChMqgjSGIKWS/hOt6ijBsxZmNfE07NUynVppn9osGcF4ncIrEBGQtik7uEGEVzwtvnAeMg",
	"DxgHecD4+DygTi8FkyPH7ZwlILJf4Pzj8CAP6AgGKcvzAeduiNjtJ97+SF8bBUyNAqaOzhz21256ODX6",
	"02qxNzUoMhRoRribAOS1ZqH+E/hKr/FkcFi9obQp6Pzsku8mrQWqhpuLMrpIUCup0OnZWYtjpT/F4smH",
	"3ZUGuH3S4/tY0b29WakqMSxXdC3x2DJIu5JhXj3pdotftwQPwDojpczolcTXpUUtSazg8OD6Mtrs5h36",
	"7VV/gG7nb6z7KE2S1KRyl7D1pTR3HN054bA/HL/on74YjOaD4aTfn/T7/8Y9vBQyIRpPsFHsCyOtzs9y",
	"5VSQ3HL2OQN/F26TSXfPZTNNf+EVAClHzpqjbnGzVrUBUq4sdSv+7Hlzq+HT0ojHyh3jkYWTlpbojaty",
	"LXpk0cPfznW4yS9dGHe9ZS+HlQ5Xl7V3yd9XHqlzrtA0Kjb9pr40WVz5BEbtLuTPL25eDMevcM8+Dc6G",
	"/mn4mwlxpcy/6FjnYkbsGwnO6f8vjf9/0pp/uFmW90ZXtClT9LHZcKchk/tJQPFmzbUhAuP5mqldNYIp",
	"lCmgJl0Gbgvz1s6vyVaKOEZTosmCKJcB+FxiOB5/M7c48Isbt3Hc3s6mNUiLPSnLGD3gK98smM84tReD",
	"CrHlXgkmS81I5SrogX7CjXkhRAyEB9N+o9jdYlpX/X72+s93l887zt6iXt0Cwc6og+m1zA7N3lBilgw4",
	"jbe2qHzQ9A5b1avTtkbVXFf2X8rZiF15QjhZQQJc2xMFyw9/PoT7q44wXhetzUiaan95+z6K8pSRCfVG",
	"WBEX8/oD7uEUODXhJm8vNfg8uPzrnGIUiTTb2GDClDlKliVRiEHD3T1Rd02Tlbo0zl/qU8xW8+0wgCpy",
	"pYnUQF0nEwIYZ2q9awlYKSmuiZXblNZuo9+9E3beeY4O901L+KlHmTJU98MyRmsRhlXmPR8kK0DcfkSW",
	"WvvjCY36QTAoX1L2604C5VJz4wSByOE4OPuXJqi7ZDMJCV+KphwQvb+4maPz69l/bL2K6TyFu57tfseA",
	"J7h/0j8ZGLQiBU5Shif49KR/cmpMn+i1whOexfHjfwMAAP//vNV8WSQrAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
