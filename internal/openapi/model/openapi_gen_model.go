// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package model

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for KeyPoolAlgorithm.
const (
	AES128 KeyPoolAlgorithm = "AES-128"
	AES192 KeyPoolAlgorithm = "AES-192"
	AES256 KeyPoolAlgorithm = "AES-256"
)

// Defines values for KeyPoolProvider.
const (
	Internal KeyPoolProvider = "Internal"
)

// Defines values for KeyPoolSort.
const (
	KeyPoolSortAlgorithmASC          KeyPoolSort = "algorithm:ASC"
	KeyPoolSortAlgorithmDESC         KeyPoolSort = "algorithm:DESC"
	KeyPoolSortExportAllowedASC      KeyPoolSort = "export_allowed:ASC"
	KeyPoolSortExportAllowedDESC     KeyPoolSort = "export_allowed:DESC"
	KeyPoolSortIdASC                 KeyPoolSort = "id:ASC"
	KeyPoolSortIdDESC                KeyPoolSort = "id:DESC"
	KeyPoolSortImportAllowedASC      KeyPoolSort = "import_allowed:ASC"
	KeyPoolSortImportAllowedDESC     KeyPoolSort = "import_allowed:DESC"
	KeyPoolSortNameASC               KeyPoolSort = "name:ASC"
	KeyPoolSortNameDESC              KeyPoolSort = "name:DESC"
	KeyPoolSortProviderASC           KeyPoolSort = "provider:ASC"
	KeyPoolSortProviderDESC          KeyPoolSort = "provider:DESC"
	KeyPoolSortStatusASC             KeyPoolSort = "status:ASC"
	KeyPoolSortStatusDESC            KeyPoolSort = "status:DESC"
	KeyPoolSortVersioningAllowedASC  KeyPoolSort = "versioning_allowed:ASC"
	KeyPoolSortVersioningAllowedDESC KeyPoolSort = "versioning_allowed:DESC"
)

// Defines values for KeyPoolStatus.
const (
	Active                         KeyPoolStatus = "active"
	Creating                       KeyPoolStatus = "creating"
	Disabled                       KeyPoolStatus = "disabled"
	FinishedDelete                 KeyPoolStatus = "finished_delete"
	GenerateFailed                 KeyPoolStatus = "generate_failed"
	ImportFailed                   KeyPoolStatus = "import_failed"
	PendingDeleteWasActive         KeyPoolStatus = "pending_delete_was_active"
	PendingDeleteWasDisabled       KeyPoolStatus = "pending_delete_was_disabled"
	PendingDeleteWasGenerateFailed KeyPoolStatus = "pending_delete_was_generate_failed"
	PendingDeleteWasImportFailed   KeyPoolStatus = "pending_delete_was_import_failed"
	PendingDeleteWasPendingImport  KeyPoolStatus = "pending_delete_was_pending_import"
	PendingGenerate                KeyPoolStatus = "pending_generate"
	PendingImport                  KeyPoolStatus = "pending_import"
	StartedDelete                  KeyPoolStatus = "started_delete"
)

// Defines values for KeySort.
const (
	KeySortGenerateDate     KeySort = "generate_date"
	KeySortGenerateDateASC  KeySort = "generate_date:ASC"
	KeySortGenerateDateDESC KeySort = "generate_date:DESC"
	KeySortId               KeySort = "id"
	KeySortIdASC            KeySort = "id:ASC"
	KeySortIdDESC           KeySort = "id:DESC"
	KeySortPool             KeySort = "pool"
	KeySortPoolASC          KeySort = "pool:ASC"
	KeySortPoolDESC         KeySort = "pool:DESC"
)

// Defines values for SymmetricCipherAlgorithm.
const (
	AESGCMDirectV1    SymmetricCipherAlgorithm = "AES-GCM-Direct-V1"
	AESGCMKeyWrapV1   SymmetricCipherAlgorithm = "AES-GCM-KeyWrap-V1"
	AESGCMSIVDirectV1 SymmetricCipherAlgorithm = "AES-GCM-SIV-Direct-V1"
)

// HTTPError defines model for HTTPError.
type HTTPError struct {
	// Error HTTP status message
	Error string `json:"error"`

	// Message Detailed error message
	Message string `json:"message"`

	// Status HTTP status code
	Status int `json:"status"`
}

// Key defines model for Key.
type Key struct {
	// GenerateDate ISO 8601 UTC timestamp of Key generation.
	GenerateDate *KeyGenerateDate `json:"generate_date,omitempty"`

	// Id Unique UUID for a Key.
	Id *KeyId `json:"id,omitempty"`

	// Pool Unique UUID for a Key Pool.
	Pool *KeyPoolId `json:"pool,omitempty"`
}

// KeyGenerate defines model for KeyGenerate.
type KeyGenerate = map[string]interface{}

// KeyGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyGenerateDate = time.Time

// KeyId Unique UUID for a Key.
type KeyId = openapi_types.UUID

// KeyPool defines model for KeyPool.
type KeyPool struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description *KeyPoolDescription `json:"description,omitempty"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`

	// Id Unique UUID for a Key Pool.
	Id *KeyPoolId `json:"id,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name *KeyPoolName `json:"name,omitempty"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// Status Status of the Key Pool.
	Status *KeyPoolStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolAlgorithm Cryptographic algorithm for the Key Pool.
type KeyPoolAlgorithm string

// KeyPoolCreate defines model for KeyPoolCreate.
type KeyPoolCreate struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolDescription Description for a Key Pool.
type KeyPoolDescription = string

// KeyPoolExportAllowed Indicates if the Key Pool supports export.
type KeyPoolExportAllowed = bool

// KeyPoolId Unique UUID for a Key Pool.
type KeyPoolId = openapi_types.UUID

// KeyPoolImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolImportAllowed = bool

// KeyPoolKeysQueryParams defines model for KeyPoolKeysQueryParams.
type KeyPoolKeysQueryParams struct {
	Id *[]KeyId `json:"id,omitempty"`

	// MaxGenerateDate ISO 8601 UTC timestamp of Key generation.
	MaxGenerateDate *KeyGenerateDate `json:"max_generate_date,omitempty"`

	// MinGenerateDate ISO 8601 UTC timestamp of Key generation.
	MinGenerateDate *KeyGenerateDate `json:"min_generate_date,omitempty"`

	// Page Page number starting at 0.
	Page *PageNumber `json:"page,omitempty"`

	// Size Page number.
	Size *PageSize  `json:"size,omitempty"`
	Sort *[]KeySort `json:"sort,omitempty"`
}

// KeyPoolName Friendly name for a Key Pool.
type KeyPoolName = string

// KeyPoolProvider Provider of the Key Pool management service.
type KeyPoolProvider string

// KeyPoolSort defines model for KeyPoolSort.
type KeyPoolSort string

// KeyPoolStatus Status of the Key Pool.
type KeyPoolStatus string

// KeyPoolUpdate defines model for KeyPoolUpdate.
type KeyPoolUpdate struct {
	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`
}

// KeyPoolVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolVersioningAllowed = bool

// KeyPoolsQueryParams defines model for KeyPoolsQueryParams.
type KeyPoolsQueryParams struct {
	Algorithm *[]KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`
	Id            *[]KeyPoolId          `json:"id,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`
	Name          *[]KeyPoolName        `json:"name,omitempty"`

	// Page Page number starting at 0.
	Page     *PageNumber        `json:"page,omitempty"`
	Provider *[]KeyPoolProvider `json:"provider,omitempty"`

	// Size Page number.
	Size   *PageSize        `json:"size,omitempty"`
	Sort   *[]KeyPoolSort   `json:"sort,omitempty"`
	Status *[]KeyPoolStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeySort defines model for KeySort.
type KeySort string

// KeyUpdate defines model for KeyUpdate.
type KeyUpdate struct {
	// Id Unique UUID for a Key.
	Id KeyId `json:"id"`

	// Pool Unique UUID for a Key Pool.
	Pool KeyPoolId `json:"pool"`
}

// KeysQueryParams defines model for KeysQueryParams.
type KeysQueryParams struct {
	Id *[]KeyId `json:"id,omitempty"`

	// MaxGenerateDate ISO 8601 UTC timestamp of Key generation.
	MaxGenerateDate *KeyGenerateDate `json:"max_generate_date,omitempty"`

	// MinGenerateDate ISO 8601 UTC timestamp of Key generation.
	MinGenerateDate *KeyGenerateDate `json:"min_generate_date,omitempty"`

	// Page Page number starting at 0.
	Page *PageNumber  `json:"page,omitempty"`
	Pool *[]KeyPoolId `json:"pool,omitempty"`

	// Size Page number.
	Size *PageSize  `json:"size,omitempty"`
	Sort *[]KeySort `json:"sort,omitempty"`
}

// PageNumber Page number starting at 0.
type PageNumber = int

// PageSize Page number.
type PageSize = int

// SymmetricCipherAdditionalAuthenticatedData Base64URL-encoded Additional Authenticated Data (AAD). This is non-secret data used for authentication and integrity checking during decryption (e.g. namespace, context).
type SymmetricCipherAdditionalAuthenticatedData = string

// SymmetricCipherAlgorithm Optional encryption algorithm. Defaults to `AES-GCM-KeyWrap-V1`. - `AES-GCM-KeyWrap-V1`: randomized envelope encryption (default) for large, non-searchable values such as file contents, clobs, blobs, etc. - `AES-GCM-Direct-V1`: randomized direct encryption, for small, non-searchable values such as encryption keys, signing keys, deriving keys, etc. - `AES-GCM-SIV-Direct-V1`: deterministic direct encryption (aka convergent) for small, searchable values such as IDs or attributes, including usernames, names, numbers, and PII (Personally Identifiable Information).
type SymmetricCipherAlgorithm string

// SymmetricCipherInitializationVector Base64URL-encoded Nonce (e.g. 12-bytes AES-GCM or AES-GCM-SIV) or Initialization Vector (e.g. 16-bytes AES-CBC). This is non-secret data used for encryption/decryption, as well as authentication and integrity checking during decryption (e.g. namespace, context).
type SymmetricCipherInitializationVector = string

// SymmetricDecryptRequest Base64Url-encoded JSON Web Encryption (JWE) of the encrypted bytes (and non-secret cipher parameters) in compact serialized format. See RFC 7516 JSON Web Encryption (JWE) for more details. Compact serialized format is 'Header.EncryptedKey.IV.Ciphertext.AuthenticationTag'. There are five Base64Url-encoded parts and separated by '.'. Some parts can be empty depending on the 'alg' and 'enc' headers parameters. - Header: Required base64Url-encoded JSON key/values for the JWE. - EncryptedKey: Optional base64Url-encoded JWE of an encrypted symmetric key used to encrypt the payload. This is non-empty for envelope encryption (e.g. alg=a256gcmkw), or empty for direct encryption (e.g. alg=dir). - IV: Required base64Url-encoded Initialization Vector (IV) used for encryption. For AES-GCM or AES-GCM-SIV it contains a 12-bytes nonce. - Ciphertext: Required base64Url-encoded encrypted secret bytes. It is always non-empty. For AES-GCM or AES-GCM-SIV it contains same number of bytes as the plaintext. - AuthenticationTag: Required base64Url-encoded authentication tag used for encryption. For AES-GCM or AES-GCM-SIV it contains a 16-bytes authentication tag.
type SymmetricDecryptRequest = string

// SymmetricDecryptResponse Encrypted text to be decrypted. If you pre-encoded bytes to text before submitting them for encryption, remember to decode to bytes; ese the same encoding scheme you chose before submission (e.g. Hexadecimal, Base64, Base64-URL, Base64-MIME, etc).
type SymmetricDecryptResponse = string

// SymmetricEncryptParams defines model for SymmetricEncryptParams.
type SymmetricEncryptParams struct {
	// Aad Base64URL-encoded Additional Authenticated Data (AAD). This is non-secret data used for authentication and integrity checking during decryption (e.g. namespace, context).
	Aad *SymmetricCipherAdditionalAuthenticatedData `json:"aad,omitempty"`

	// Alg Optional encryption algorithm. Defaults to `AES-GCM-KeyWrap-V1`. - `AES-GCM-KeyWrap-V1`: randomized envelope encryption (default) for large, non-searchable values such as file contents, clobs, blobs, etc. - `AES-GCM-Direct-V1`: randomized direct encryption, for small, non-searchable values such as encryption keys, signing keys, deriving keys, etc. - `AES-GCM-SIV-Direct-V1`: deterministic direct encryption (aka convergent) for small, searchable values such as IDs or attributes, including usernames, names, numbers, and PII (Personally Identifiable Information).
	Alg *SymmetricCipherAlgorithm `json:"alg,omitempty"`

	// Iv Base64URL-encoded Nonce (e.g. 12-bytes AES-GCM or AES-GCM-SIV) or Initialization Vector (e.g. 16-bytes AES-CBC). This is non-secret data used for encryption/decryption, as well as authentication and integrity checking during decryption (e.g. namespace, context).
	Iv *SymmetricCipherInitializationVector `json:"iv,omitempty"`
}

// SymmetricEncryptRequest Clear text to be encrypted. If you need to encrypt bytes, encode them first as text (e.g. Hexadecimal, Base64, Base64-URL, Base64-MIME, etc).
type SymmetricEncryptRequest = string

// SymmetricEncryptResponse Base64Url-encoded JSON Web Encryption (JWE) of the encrypted bytes (and non-secret cipher parameters) in compact serialized format. See RFC 7516 JSON Web Encryption (JWE) for more details. Compact serialized format is 'Header.EncryptedKey.IV.Ciphertext.AuthenticationTag'. There are five Base64Url-encoded parts and separated by '.'. Some parts can be empty depending on the 'alg' and 'enc' headers parameters. - Header: Required base64Url-encoded JSON key/values for the JWE. - EncryptedKey: Optional base64Url-encoded JWE of an encrypted symmetric key used to encrypt the payload. This is non-empty for envelope encryption (e.g. alg=a256gcmkw), or empty for direct encryption (e.g. alg=dir). - IV: Required base64Url-encoded Initialization Vector (IV) used for encryption. For AES-GCM or AES-GCM-SIV it contains a 12-bytes nonce. - Ciphertext: Required base64Url-encoded encrypted secret bytes. It is always non-empty. For AES-GCM or AES-GCM-SIV it contains same number of bytes as the plaintext. - AuthenticationTag: Required base64Url-encoded authentication tag used for encryption. For AES-GCM or AES-GCM-SIV it contains a 16-bytes authentication tag.
type SymmetricEncryptResponse = string

// KeyPoolQueryParamAlgorithms defines model for KeyPoolQueryParamAlgorithms.
type KeyPoolQueryParamAlgorithms = []KeyPoolAlgorithm

// KeyPoolQueryParamExportAllowed Indicates if the Key Pool supports export.
type KeyPoolQueryParamExportAllowed = KeyPoolExportAllowed

// KeyPoolQueryParamIds defines model for KeyPoolQueryParamIds.
type KeyPoolQueryParamIds = []KeyPoolId

// KeyPoolQueryParamImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolQueryParamImportAllowed = KeyPoolImportAllowed

// KeyPoolQueryParamNames defines model for KeyPoolQueryParamNames.
type KeyPoolQueryParamNames = []KeyPoolName

// KeyPoolQueryParamPageNumber Page number starting at 0.
type KeyPoolQueryParamPageNumber = PageNumber

// KeyPoolQueryParamPageSize Page number.
type KeyPoolQueryParamPageSize = PageSize

// KeyPoolQueryParamProviders defines model for KeyPoolQueryParamProviders.
type KeyPoolQueryParamProviders = []KeyPoolProvider

// KeyPoolQueryParamSorts defines model for KeyPoolQueryParamSorts.
type KeyPoolQueryParamSorts = []KeyPoolSort

// KeyPoolQueryParamStatuses defines model for KeyPoolQueryParamStatuses.
type KeyPoolQueryParamStatuses = []KeyPoolStatus

// KeyPoolQueryParamVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolQueryParamVersioningAllowed = KeyPoolVersioningAllowed

// KeyQueryParamIds defines model for KeyQueryParamIds.
type KeyQueryParamIds = []KeyId

// KeyQueryParamKeyPoolIds defines model for KeyQueryParamKeyPoolIds.
type KeyQueryParamKeyPoolIds = []KeyPoolId

// KeyQueryParamMaximumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyQueryParamMaximumGenerateDate = KeyGenerateDate

// KeyQueryParamMinimumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyQueryParamMinimumGenerateDate = KeyGenerateDate

// KeyQueryParamPageNumber Page number starting at 0.
type KeyQueryParamPageNumber = PageNumber

// KeyQueryParamPageSize Page number.
type KeyQueryParamPageSize = PageSize

// KeyQueryParamSorts defines model for KeyQueryParamSorts.
type KeyQueryParamSorts = []KeySort

// HTTP400BadRequest defines model for HTTP400BadRequest.
type HTTP400BadRequest struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP401Unauthorized defines model for HTTP401Unauthorized.
type HTTP401Unauthorized struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP403Forbidden defines model for HTTP403Forbidden.
type HTTP403Forbidden struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP404NotFound defines model for HTTP404NotFound.
type HTTP404NotFound struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP429TooManyRequests defines model for HTTP429TooManyRequests.
type HTTP429TooManyRequests struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP500InternalServerError defines model for HTTP500InternalServerError.
type HTTP500InternalServerError struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP502BadGateway defines model for HTTP502BadGateway.
type HTTP502BadGateway struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP503ServiceUnavailable defines model for HTTP503ServiceUnavailable.
type HTTP503ServiceUnavailable struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP504GatewayTimeout defines model for HTTP504GatewayTimeout.
type HTTP504GatewayTimeout struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//4SK2SGzRwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
