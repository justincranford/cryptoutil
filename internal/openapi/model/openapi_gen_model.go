// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package model

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for KEKPoolAlgorithm.
const (
	AES128 KEKPoolAlgorithm = "AES-128"
	AES192 KEKPoolAlgorithm = "AES-192"
	AES256 KEKPoolAlgorithm = "AES-256"
)

// Defines values for KEKPoolProvider.
const (
	Internal KEKPoolProvider = "Internal"
)

// Defines values for KEKPoolStatus.
const (
	Active          KEKPoolStatus = "active"
	Disabled        KEKPoolStatus = "disabled"
	PendingGenerate KEKPoolStatus = "pending_generate"
	PendingImport   KEKPoolStatus = "pending_import"
)

// HTTPError defines model for HTTPError.
type HTTPError struct {
	// Error HTTP status message
	Error string `json:"error"`

	// Message Detailed error message
	Message string `json:"message"`

	// Status HTTP status code
	Status int `json:"status"`
}

// KEK defines model for KEK.
type KEK struct {
	// GenerateDate ISO 8601 UTC timestamp of KEK generation.
	GenerateDate *KEKGenerateDate `json:"generateDate,omitempty"`

	// KekId Unique version of the KEK in a KEK Pool.
	KekId *KEKId `json:"kek_id,omitempty"`

	// KekPoolId Unique base64 url-encoded identifier for a KEK Pool.
	KekPoolId *KEKPoolId `json:"kek_pool_id,omitempty"`
}

// KEKGenerate defines model for KEKGenerate.
type KEKGenerate = map[string]interface{}

// KEKGenerateDate ISO 8601 UTC timestamp of KEK generation.
type KEKGenerateDate = time.Time

// KEKId Unique version of the KEK in a KEK Pool.
type KEKId = int

// KEKPool defines model for KEKPool.
type KEKPool struct {
	// Algorithm Cryptographic algorithm for the KEK Pool.
	Algorithm *KEKPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a KEK Pool.
	Description *KEKPoolDescription `json:"description,omitempty"`

	// Id Unique base64 url-encoded identifier for a KEK Pool.
	Id *KEKPoolId `json:"id,omitempty"`

	// IsExportAllowed Indicates if the KEK Pool supports export.
	IsExportAllowed *KEKPoolIsExportAllowed `json:"isExportAllowed,omitempty"`

	// IsImportAllowed Indicates if the KEK Pool supports import (BYOK).
	IsImportAllowed *KEKPoolIsImportAllowed `json:"isImportAllowed,omitempty"`

	// IsVersioningAllowed Indicates if the KEK Pool supports versioning.
	IsVersioningAllowed *KEKPoolIsVersioningAllowed `json:"isVersioningAllowed,omitempty"`

	// Name Friendly name for a KEK Pool.
	Name *KEKPoolName `json:"name,omitempty"`

	// Provider Provider of the KEK Pool management service.
	Provider *KEKPoolProvider `json:"provider,omitempty"`

	// Status Status of the KEK.
	Status *KEKPoolStatus `json:"status,omitempty"`
}

// KEKPoolAlgorithm Cryptographic algorithm for the KEK Pool.
type KEKPoolAlgorithm string

// KEKPoolCreate defines model for KEKPoolCreate.
type KEKPoolCreate struct {
	// Algorithm Cryptographic algorithm for the KEK Pool.
	Algorithm *KEKPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a KEK Pool.
	Description KEKPoolDescription `json:"description"`

	// IsExportAllowed Indicates if the KEK Pool supports export.
	IsExportAllowed *KEKPoolIsExportAllowed `json:"isExportAllowed,omitempty"`

	// IsImportAllowed Indicates if the KEK Pool supports import (BYOK).
	IsImportAllowed *KEKPoolIsImportAllowed `json:"isImportAllowed,omitempty"`

	// IsVersioningAllowed Indicates if the KEK Pool supports versioning.
	IsVersioningAllowed *KEKPoolIsVersioningAllowed `json:"isVersioningAllowed,omitempty"`

	// Name Friendly name for a KEK Pool.
	Name KEKPoolName `json:"name"`

	// Provider Provider of the KEK Pool management service.
	Provider *KEKPoolProvider `json:"provider,omitempty"`
}

// KEKPoolDescription Description for a KEK Pool.
type KEKPoolDescription = string

// KEKPoolId Unique base64 url-encoded identifier for a KEK Pool.
type KEKPoolId = string

// KEKPoolIsExportAllowed Indicates if the KEK Pool supports export.
type KEKPoolIsExportAllowed = bool

// KEKPoolIsImportAllowed Indicates if the KEK Pool supports import (BYOK).
type KEKPoolIsImportAllowed = bool

// KEKPoolIsVersioningAllowed Indicates if the KEK Pool supports versioning.
type KEKPoolIsVersioningAllowed = bool

// KEKPoolName Friendly name for a KEK Pool.
type KEKPoolName = string

// KEKPoolProvider Provider of the KEK Pool management service.
type KEKPoolProvider string

// KEKPoolStatus Status of the KEK.
type KEKPoolStatus string

// KEKPoolUpdate defines model for KEKPoolUpdate.
type KEKPoolUpdate struct {
	// Description Description for a KEK Pool.
	Description KEKPoolDescription `json:"description"`

	// Name Friendly name for a KEK Pool.
	Name KEKPoolName `json:"name"`
}

// KEKUpdate defines model for KEKUpdate.
type KEKUpdate struct {
	// KekPoolId Unique base64 url-encoded identifier for a KEK Pool.
	KekPoolId KEKPoolId `json:"kek_pool_id"`

	// KekVersion Unique version of the KEK in a KEK Pool.
	KekVersion KEKId `json:"kek_version"`
}

// QueryParamFilter Filter criteria in the format 'field=value'. Supported operators are '=', '!=', '>', '<', '>=', '<='
type QueryParamFilter = string

// QueryParamPage Paging criteria in the format 'pageNumber:pageSize' or 'pageNumber'; pageNumber is 0 offset.
type QueryParamPage = string

// QueryParamSort Sort criteria in the format 'field:direction' or 'field'. Values for direction are ASC or DESC. If omitted, it defaults to ASC.
type QueryParamSort = string

// HTTP400BadRequest defines model for HTTP400BadRequest.
type HTTP400BadRequest struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP401Unauthorized defines model for HTTP401Unauthorized.
type HTTP401Unauthorized struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP403Forbidden defines model for HTTP403Forbidden.
type HTTP403Forbidden struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP404NotFound defines model for HTTP404NotFound.
type HTTP404NotFound struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP429TooManyRequests defines model for HTTP429TooManyRequests.
type HTTP429TooManyRequests struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP500InternalServerError defines model for HTTP500InternalServerError.
type HTTP500InternalServerError struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP502BadGateway defines model for HTTP502BadGateway.
type HTTP502BadGateway struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP503ServiceUnavailable defines model for HTTP503ServiceUnavailable.
type HTTP503ServiceUnavailable struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP504GatewayTimeout defines model for HTTP504GatewayTimeout.
type HTTP504GatewayTimeout struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
