// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package model

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for KeyPoolAlgorithm.
const (
	AES128 KeyPoolAlgorithm = "AES-128"
	AES192 KeyPoolAlgorithm = "AES-192"
	AES256 KeyPoolAlgorithm = "AES-256"
)

// Defines values for KeyPoolProvider.
const (
	Internal KeyPoolProvider = "Internal"
)

// Defines values for KeyPoolSort.
const (
	KeyPoolSortAlgorithmASC          KeyPoolSort = "algorithm:ASC"
	KeyPoolSortAlgorithmDESC         KeyPoolSort = "algorithm:DESC"
	KeyPoolSortExportAllowedASC      KeyPoolSort = "export_allowed:ASC"
	KeyPoolSortExportAllowedDESC     KeyPoolSort = "export_allowed:DESC"
	KeyPoolSortIdASC                 KeyPoolSort = "id:ASC"
	KeyPoolSortIdDESC                KeyPoolSort = "id:DESC"
	KeyPoolSortImportAllowedASC      KeyPoolSort = "import_allowed:ASC"
	KeyPoolSortImportAllowedDESC     KeyPoolSort = "import_allowed:DESC"
	KeyPoolSortNameASC               KeyPoolSort = "name:ASC"
	KeyPoolSortNameDESC              KeyPoolSort = "name:DESC"
	KeyPoolSortProviderASC           KeyPoolSort = "provider:ASC"
	KeyPoolSortProviderDESC          KeyPoolSort = "provider:DESC"
	KeyPoolSortStatusASC             KeyPoolSort = "status:ASC"
	KeyPoolSortStatusDESC            KeyPoolSort = "status:DESC"
	KeyPoolSortVersioningAllowedASC  KeyPoolSort = "versioning_allowed:ASC"
	KeyPoolSortVersioningAllowedDESC KeyPoolSort = "versioning_allowed:DESC"
)

// Defines values for KeyPoolStatus.
const (
	Active                         KeyPoolStatus = "active"
	Creating                       KeyPoolStatus = "creating"
	Disabled                       KeyPoolStatus = "disabled"
	FinishedDelete                 KeyPoolStatus = "finished_delete"
	GenerateFailed                 KeyPoolStatus = "generate_failed"
	ImportFailed                   KeyPoolStatus = "import_failed"
	PendingDeleteWasActive         KeyPoolStatus = "pending_delete_was_active"
	PendingDeleteWasDisabled       KeyPoolStatus = "pending_delete_was_disabled"
	PendingDeleteWasGenerateFailed KeyPoolStatus = "pending_delete_was_generate_failed"
	PendingDeleteWasImportFailed   KeyPoolStatus = "pending_delete_was_import_failed"
	PendingDeleteWasPendingImport  KeyPoolStatus = "pending_delete_was_pending_import"
	PendingGenerate                KeyPoolStatus = "pending_generate"
	PendingImport                  KeyPoolStatus = "pending_import"
	StartedDelete                  KeyPoolStatus = "started_delete"
)

// Defines values for KeySort.
const (
	KeySortGenerateDate     KeySort = "generate_date"
	KeySortGenerateDateASC  KeySort = "generate_date:ASC"
	KeySortGenerateDateDESC KeySort = "generate_date:DESC"
	KeySortId               KeySort = "id"
	KeySortIdASC            KeySort = "id:ASC"
	KeySortIdDESC           KeySort = "id:DESC"
	KeySortPool             KeySort = "pool"
	KeySortPoolASC          KeySort = "pool:ASC"
	KeySortPoolDESC         KeySort = "pool:DESC"
)

// HTTPError defines model for HTTPError.
type HTTPError struct {
	// Error HTTP status message
	Error string `json:"error"`

	// Message Detailed error message
	Message string `json:"message"`

	// Status HTTP status code
	Status int `json:"status"`
}

// Key defines model for Key.
type Key struct {
	// GenerateDate ISO 8601 UTC timestamp of Key generation.
	GenerateDate *KeyGenerateDate `json:"generate_date,omitempty"`

	// Id Unique version of the Key in a Key Pool.
	Id *KeyId `json:"id,omitempty"`

	// Pool Unique UUID for a Key Pool.
	Pool *KeyPoolId `json:"pool,omitempty"`
}

// KeyGenerate defines model for KeyGenerate.
type KeyGenerate = map[string]interface{}

// KeyGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyGenerateDate = time.Time

// KeyId Unique version of the Key in a Key Pool.
type KeyId = int

// KeyPool defines model for KeyPool.
type KeyPool struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description *KeyPoolDescription `json:"description,omitempty"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`

	// Id Unique UUID for a Key Pool.
	Id *KeyPoolId `json:"id,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name *KeyPoolName `json:"name,omitempty"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// Status Status of the Key Pool.
	Status *KeyPoolStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolAlgorithm Cryptographic algorithm for the Key Pool.
type KeyPoolAlgorithm string

// KeyPoolCreate defines model for KeyPoolCreate.
type KeyPoolCreate struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolDescription Description for a Key Pool.
type KeyPoolDescription = string

// KeyPoolExportAllowed Indicates if the Key Pool supports export.
type KeyPoolExportAllowed = bool

// KeyPoolId Unique UUID for a Key Pool.
type KeyPoolId = openapi_types.UUID

// KeyPoolImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolImportAllowed = bool

// KeyPoolKeysQueryParams defines model for KeyPoolKeysQueryParams.
type KeyPoolKeysQueryParams struct {
	Id *[]KeyId `json:"id,omitempty"`

	// MaxGenerateDate ISO 8601 UTC timestamp of Key generation.
	MaxGenerateDate *KeyGenerateDate `json:"max_generate_date,omitempty"`

	// MinGenerateDate ISO 8601 UTC timestamp of Key generation.
	MinGenerateDate *KeyGenerateDate `json:"min_generate_date,omitempty"`

	// Page Page number starting at 0.
	Page *PageNumber `json:"page,omitempty"`

	// Size Page number.
	Size *PageSize  `json:"size,omitempty"`
	Sort *[]KeySort `json:"sort,omitempty"`
}

// KeyPoolName Friendly name for a Key Pool.
type KeyPoolName = string

// KeyPoolProvider Provider of the Key Pool management service.
type KeyPoolProvider string

// KeyPoolSort defines model for KeyPoolSort.
type KeyPoolSort string

// KeyPoolStatus Status of the Key Pool.
type KeyPoolStatus string

// KeyPoolUpdate defines model for KeyPoolUpdate.
type KeyPoolUpdate struct {
	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`
}

// KeyPoolVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolVersioningAllowed = bool

// KeyPoolsQueryParams defines model for KeyPoolsQueryParams.
type KeyPoolsQueryParams struct {
	Algorithm *[]KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`
	Id            *[]KeyPoolId          `json:"id,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`
	Name          *[]KeyPoolName        `json:"name,omitempty"`

	// Page Page number starting at 0.
	Page     *PageNumber        `json:"page,omitempty"`
	Provider *[]KeyPoolProvider `json:"provider,omitempty"`

	// Size Page number.
	Size   *PageSize        `json:"size,omitempty"`
	Sort   *[]KeyPoolSort   `json:"sort,omitempty"`
	Status *[]KeyPoolStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeySort defines model for KeySort.
type KeySort string

// KeyUpdate defines model for KeyUpdate.
type KeyUpdate struct {
	// Id Unique version of the Key in a Key Pool.
	Id KeyId `json:"id"`

	// Pool Unique UUID for a Key Pool.
	Pool KeyPoolId `json:"pool"`
}

// KeysQueryParams defines model for KeysQueryParams.
type KeysQueryParams struct {
	Id *[]KeyId `json:"id,omitempty"`

	// MaxGenerateDate ISO 8601 UTC timestamp of Key generation.
	MaxGenerateDate *KeyGenerateDate `json:"max_generate_date,omitempty"`

	// MinGenerateDate ISO 8601 UTC timestamp of Key generation.
	MinGenerateDate *KeyGenerateDate `json:"min_generate_date,omitempty"`

	// Page Page number starting at 0.
	Page *PageNumber  `json:"page,omitempty"`
	Pool *[]KeyPoolId `json:"pool,omitempty"`

	// Size Page number.
	Size *PageSize  `json:"size,omitempty"`
	Sort *[]KeySort `json:"sort,omitempty"`
}

// PageNumber Page number starting at 0.
type PageNumber = int

// PageSize Page number.
type PageSize = int

// KeyPoolQueryParamAlgorithms defines model for KeyPoolQueryParamAlgorithms.
type KeyPoolQueryParamAlgorithms = []KeyPoolAlgorithm

// KeyPoolQueryParamExportAllowed Indicates if the Key Pool supports export.
type KeyPoolQueryParamExportAllowed = KeyPoolExportAllowed

// KeyPoolQueryParamIds defines model for KeyPoolQueryParamIds.
type KeyPoolQueryParamIds = []KeyPoolId

// KeyPoolQueryParamImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolQueryParamImportAllowed = KeyPoolImportAllowed

// KeyPoolQueryParamNames defines model for KeyPoolQueryParamNames.
type KeyPoolQueryParamNames = []KeyPoolName

// KeyPoolQueryParamPageNumber Page number starting at 0.
type KeyPoolQueryParamPageNumber = PageNumber

// KeyPoolQueryParamPageSize Page number.
type KeyPoolQueryParamPageSize = PageSize

// KeyPoolQueryParamProviders defines model for KeyPoolQueryParamProviders.
type KeyPoolQueryParamProviders = []KeyPoolProvider

// KeyPoolQueryParamSorts defines model for KeyPoolQueryParamSorts.
type KeyPoolQueryParamSorts = []KeyPoolSort

// KeyPoolQueryParamStatuses defines model for KeyPoolQueryParamStatuses.
type KeyPoolQueryParamStatuses = []KeyPoolStatus

// KeyPoolQueryParamVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolQueryParamVersioningAllowed = KeyPoolVersioningAllowed

// KeyQueryParamIds defines model for KeyQueryParamIds.
type KeyQueryParamIds = []KeyId

// KeyQueryParamKeyPoolIds defines model for KeyQueryParamKeyPoolIds.
type KeyQueryParamKeyPoolIds = []KeyPoolId

// KeyQueryParamMaximumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyQueryParamMaximumGenerateDate = KeyGenerateDate

// KeyQueryParamMinimumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyQueryParamMinimumGenerateDate = KeyGenerateDate

// KeyQueryParamPageNumber Page number starting at 0.
type KeyQueryParamPageNumber = PageNumber

// KeyQueryParamPageSize Page number.
type KeyQueryParamPageSize = PageSize

// KeyQueryParamSorts defines model for KeyQueryParamSorts.
type KeyQueryParamSorts = []KeySort

// HTTP400BadRequest defines model for HTTP400BadRequest.
type HTTP400BadRequest struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP401Unauthorized defines model for HTTP401Unauthorized.
type HTTP401Unauthorized struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP403Forbidden defines model for HTTP403Forbidden.
type HTTP403Forbidden struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP404NotFound defines model for HTTP404NotFound.
type HTTP404NotFound struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP429TooManyRequests defines model for HTTP429TooManyRequests.
type HTTP429TooManyRequests struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP500InternalServerError defines model for HTTP500InternalServerError.
type HTTP500InternalServerError struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP502BadGateway defines model for HTTP502BadGateway.
type HTTP502BadGateway struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP503ServiceUnavailable defines model for HTTP503ServiceUnavailable.
type HTTP503ServiceUnavailable struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP504GatewayTimeout defines model for HTTP504GatewayTimeout.
type HTTP504GatewayTimeout struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"6Z6cGjdB9FLhEU/CcPOfAAAA//857KWoEjUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
