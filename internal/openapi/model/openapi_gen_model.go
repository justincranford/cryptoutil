// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package model

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for KeyPoolAlgorithm.
const (
	AES128 KeyPoolAlgorithm = "AES-128"
	AES192 KeyPoolAlgorithm = "AES-192"
	AES256 KeyPoolAlgorithm = "AES-256"
)

// Defines values for KeyPoolProvider.
const (
	Internal KeyPoolProvider = "Internal"
)

// Defines values for KeyPoolSort.
const (
	KeyPoolSortAlgorithmASC          KeyPoolSort = "algorithm:ASC"
	KeyPoolSortAlgorithmDESC         KeyPoolSort = "algorithm:DESC"
	KeyPoolSortExportAllowedASC      KeyPoolSort = "export_allowed:ASC"
	KeyPoolSortExportAllowedDESC     KeyPoolSort = "export_allowed:DESC"
	KeyPoolSortIdASC                 KeyPoolSort = "id:ASC"
	KeyPoolSortIdDESC                KeyPoolSort = "id:DESC"
	KeyPoolSortImportAllowedASC      KeyPoolSort = "import_allowed:ASC"
	KeyPoolSortImportAllowedDESC     KeyPoolSort = "import_allowed:DESC"
	KeyPoolSortNameASC               KeyPoolSort = "name:ASC"
	KeyPoolSortNameDESC              KeyPoolSort = "name:DESC"
	KeyPoolSortProviderASC           KeyPoolSort = "provider:ASC"
	KeyPoolSortProviderDESC          KeyPoolSort = "provider:DESC"
	KeyPoolSortStatusASC             KeyPoolSort = "status:ASC"
	KeyPoolSortStatusDESC            KeyPoolSort = "status:DESC"
	KeyPoolSortVersioningAllowedASC  KeyPoolSort = "versioning_allowed:ASC"
	KeyPoolSortVersioningAllowedDESC KeyPoolSort = "versioning_allowed:DESC"
)

// Defines values for KeyPoolStatus.
const (
	Active                         KeyPoolStatus = "active"
	Creating                       KeyPoolStatus = "creating"
	Disabled                       KeyPoolStatus = "disabled"
	FinishedDelete                 KeyPoolStatus = "finished_delete"
	GenerateFailed                 KeyPoolStatus = "generate_failed"
	ImportFailed                   KeyPoolStatus = "import_failed"
	PendingDeleteWasActive         KeyPoolStatus = "pending_delete_was_active"
	PendingDeleteWasDisabled       KeyPoolStatus = "pending_delete_was_disabled"
	PendingDeleteWasGenerateFailed KeyPoolStatus = "pending_delete_was_generate_failed"
	PendingDeleteWasImportFailed   KeyPoolStatus = "pending_delete_was_import_failed"
	PendingDeleteWasPendingImport  KeyPoolStatus = "pending_delete_was_pending_import"
	PendingGenerate                KeyPoolStatus = "pending_generate"
	PendingImport                  KeyPoolStatus = "pending_import"
	StartedDelete                  KeyPoolStatus = "started_delete"
)

// Defines values for KeySort.
const (
	KeySortGenerateDate     KeySort = "generate_date"
	KeySortGenerateDateASC  KeySort = "generate_date:ASC"
	KeySortGenerateDateDESC KeySort = "generate_date:DESC"
	KeySortId               KeySort = "id"
	KeySortIdASC            KeySort = "id:ASC"
	KeySortIdDESC           KeySort = "id:DESC"
	KeySortPool             KeySort = "pool"
	KeySortPoolASC          KeySort = "pool:ASC"
	KeySortPoolDESC         KeySort = "pool:DESC"
)

// Defines values for SymmetricCipherAlgorithm.
const (
	AESCBCHMACSHA2DirectV1  SymmetricCipherAlgorithm = "AES-CBC-HMAC-SHA2-Direct-V1"
	AESCBCHMACSHA2KeyWrapV1 SymmetricCipherAlgorithm = "AES-CBC-HMAC-SHA2-KeyWrap-V1"
	AESGCMDirectV1          SymmetricCipherAlgorithm = "AES-GCM-Direct-V1"
	AESGCMKeyWrapV1         SymmetricCipherAlgorithm = "AES-GCM-KeyWrap-V1"
	AESGCMSIVDirectV1       SymmetricCipherAlgorithm = "AES-GCM-SIV-Direct-V1"
)

// HTTPError defines model for HTTPError.
type HTTPError struct {
	// Error HTTP status message
	Error string `json:"error"`

	// Message Detailed error message
	Message string `json:"message"`

	// Status HTTP status code
	Status int `json:"status"`
}

// Key defines model for Key.
type Key struct {
	// GenerateDate ISO 8601 UTC timestamp of Key generation.
	GenerateDate *KeyGenerateDate `json:"generate_date,omitempty"`

	// Id Unique UUID for a Key.
	Id *KeyId `json:"id,omitempty"`

	// Pool Unique UUID for a Key Pool.
	Pool *KeyPoolId `json:"pool,omitempty"`
}

// KeyGenerate defines model for KeyGenerate.
type KeyGenerate = map[string]interface{}

// KeyGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyGenerateDate = time.Time

// KeyId Unique UUID for a Key.
type KeyId = openapi_types.UUID

// KeyPool defines model for KeyPool.
type KeyPool struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description *KeyPoolDescription `json:"description,omitempty"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`

	// Id Unique UUID for a Key Pool.
	Id *KeyPoolId `json:"id,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name *KeyPoolName `json:"name,omitempty"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// Status Status of the Key Pool.
	Status *KeyPoolStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolAlgorithm Cryptographic algorithm for the Key Pool.
type KeyPoolAlgorithm string

// KeyPoolCreate defines model for KeyPoolCreate.
type KeyPoolCreate struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolDescription Description for a Key Pool.
type KeyPoolDescription = string

// KeyPoolExportAllowed Indicates if the Key Pool supports export.
type KeyPoolExportAllowed = bool

// KeyPoolId Unique UUID for a Key Pool.
type KeyPoolId = openapi_types.UUID

// KeyPoolImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolImportAllowed = bool

// KeyPoolKeysQueryParams defines model for KeyPoolKeysQueryParams.
type KeyPoolKeysQueryParams struct {
	Id *[]KeyId `json:"id,omitempty"`

	// MaxGenerateDate ISO 8601 UTC timestamp of Key generation.
	MaxGenerateDate *KeyGenerateDate `json:"max_generate_date,omitempty"`

	// MinGenerateDate ISO 8601 UTC timestamp of Key generation.
	MinGenerateDate *KeyGenerateDate `json:"min_generate_date,omitempty"`

	// Page Page number starting at 0.
	Page *PageNumber `json:"page,omitempty"`

	// Size Page number.
	Size *PageSize  `json:"size,omitempty"`
	Sort *[]KeySort `json:"sort,omitempty"`
}

// KeyPoolName Friendly name for a Key Pool.
type KeyPoolName = string

// KeyPoolProvider Provider of the Key Pool management service.
type KeyPoolProvider string

// KeyPoolSort defines model for KeyPoolSort.
type KeyPoolSort string

// KeyPoolStatus Status of the Key Pool.
type KeyPoolStatus string

// KeyPoolUpdate defines model for KeyPoolUpdate.
type KeyPoolUpdate struct {
	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`
}

// KeyPoolVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolVersioningAllowed = bool

// KeyPoolsQueryParams defines model for KeyPoolsQueryParams.
type KeyPoolsQueryParams struct {
	Algorithm *[]KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`
	Id            *[]KeyPoolId          `json:"id,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`
	Name          *[]KeyPoolName        `json:"name,omitempty"`

	// Page Page number starting at 0.
	Page     *PageNumber        `json:"page,omitempty"`
	Provider *[]KeyPoolProvider `json:"provider,omitempty"`

	// Size Page number.
	Size   *PageSize        `json:"size,omitempty"`
	Sort   *[]KeyPoolSort   `json:"sort,omitempty"`
	Status *[]KeyPoolStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeySort defines model for KeySort.
type KeySort string

// KeyUpdate defines model for KeyUpdate.
type KeyUpdate struct {
	// Id Unique UUID for a Key.
	Id KeyId `json:"id"`

	// Pool Unique UUID for a Key Pool.
	Pool KeyPoolId `json:"pool"`
}

// KeysQueryParams defines model for KeysQueryParams.
type KeysQueryParams struct {
	Id *[]KeyId `json:"id,omitempty"`

	// MaxGenerateDate ISO 8601 UTC timestamp of Key generation.
	MaxGenerateDate *KeyGenerateDate `json:"max_generate_date,omitempty"`

	// MinGenerateDate ISO 8601 UTC timestamp of Key generation.
	MinGenerateDate *KeyGenerateDate `json:"min_generate_date,omitempty"`

	// Page Page number starting at 0.
	Page *PageNumber  `json:"page,omitempty"`
	Pool *[]KeyPoolId `json:"pool,omitempty"`

	// Size Page number.
	Size *PageSize  `json:"size,omitempty"`
	Sort *[]KeySort `json:"sort,omitempty"`
}

// PageNumber Page number starting at 0.
type PageNumber = int

// PageSize Page number.
type PageSize = int

// SymmetricCipherAdditionalAuthenticatedData Base64URL-encoded Additional Authenticated Data (AAD). This is non-secret data used for authentication and integrity checking during decryption (e.g. namespace, context).
type SymmetricCipherAdditionalAuthenticatedData = string

// SymmetricCipherAlgorithm Optional encryption algorithm. Defaults to `AES-GCM-KeyWrap-V1`. - `AES-GCM-KeyWrap-V1`: randomized envelope encryption (default) for large, non-searchable values such as file contents, clobs, blobs, etc. - `AES-GCM-Direct-V1`: randomized direct encryption, for small, non-searchable values such as encryption keys, signing keys, deriving keys, etc. - `AES-CBC-HMAC-SHA2-KeyWrap-V1`: randomized envelope encryption (default) for large, non-searchable values such as file contents, clobs, blobs, etc. - `AES-CBC-HMAC-SHA2-Direct-V1`: randomized direct encryption, for small, non-searchable values such as encryption keys, signing keys, deriving keys, etc. - `AES-GCM-SIV-Direct-V1`: deterministic direct encryption (aka convergent) for small, searchable values such as IDs or attributes, including usernames, names, numbers, and PII (Personally Identifiable Information).
type SymmetricCipherAlgorithm string

// SymmetricCipherInitializationVector Base64URL-encoded Nonce (e.g. 12-bytes AES-GCM or AES-GCM-SIV) or Initialization Vector (e.g. 16-bytes AES-CBC). This is non-secret data used for encryption/decryption, as well as authentication and integrity checking during decryption (e.g. namespace, context).
type SymmetricCipherInitializationVector = string

// SymmetricDecryptRequest Base64Url-encoded JSON Web Encryption (JWE) of the encrypted bytes (and non-secret cipher parameters) in compact serialized format. See RFC 7516 JSON Web Encryption (JWE) for more details. Compact serialized format is 'Header.EncryptedKey.IV.Ciphertext.AuthenticationTag'. There are five Base64Url-encoded parts and separated by '.'. Some parts can be empty depending on the 'alg' and 'enc' headers parameters. - Header: Required base64Url-encoded JSON key/values for the JWE. - EncryptedKey: Optional base64Url-encoded JWE of an encrypted symmetric key used to encrypt the payload. This is non-empty for envelope encryption (e.g. alg=a256gcmkw), or empty for direct encryption (e.g. alg=dir). - IV: Required base64Url-encoded Initialization Vector (IV) used for encryption. For AES-GCM or AES-GCM-SIV it contains a 12-bytes nonce. For AES-CBC it contains a 16-bytes IV. - Ciphertext: Required base64Url-encoded encrypted secret bytes. It is always non-empty. For AES-GCM or AES-GCM-SIV it contains same number of bytes as the plaintext. - AuthenticationTag: Required base64Url-encoded authentication tag used for encryption. For AES-GCM or AES-GCM-SIV it contains a 16-bytes authentication tag. For AES-CBC-HMAC it contains a N-bytes HMAC hash.
type SymmetricDecryptRequest = string

// SymmetricDecryptResponse Encrypted text to be decrypted. If you pre-encoded bytes to text before submitting them for encryption, remember to decode to bytes; ese the same encoding scheme you chose before submission (e.g. Hexadecimal, Base64, Base64-URL, Base64-MIME, etc).
type SymmetricDecryptResponse = string

// SymmetricEncryptParams defines model for SymmetricEncryptParams.
type SymmetricEncryptParams struct {
	// Aad Base64URL-encoded Additional Authenticated Data (AAD). This is non-secret data used for authentication and integrity checking during decryption (e.g. namespace, context).
	Aad *SymmetricCipherAdditionalAuthenticatedData `json:"aad,omitempty"`

	// Alg Optional encryption algorithm. Defaults to `AES-GCM-KeyWrap-V1`. - `AES-GCM-KeyWrap-V1`: randomized envelope encryption (default) for large, non-searchable values such as file contents, clobs, blobs, etc. - `AES-GCM-Direct-V1`: randomized direct encryption, for small, non-searchable values such as encryption keys, signing keys, deriving keys, etc. - `AES-CBC-HMAC-SHA2-KeyWrap-V1`: randomized envelope encryption (default) for large, non-searchable values such as file contents, clobs, blobs, etc. - `AES-CBC-HMAC-SHA2-Direct-V1`: randomized direct encryption, for small, non-searchable values such as encryption keys, signing keys, deriving keys, etc. - `AES-GCM-SIV-Direct-V1`: deterministic direct encryption (aka convergent) for small, searchable values such as IDs or attributes, including usernames, names, numbers, and PII (Personally Identifiable Information).
	Alg *SymmetricCipherAlgorithm `json:"alg,omitempty"`

	// Iv Base64URL-encoded Nonce (e.g. 12-bytes AES-GCM or AES-GCM-SIV) or Initialization Vector (e.g. 16-bytes AES-CBC). This is non-secret data used for encryption/decryption, as well as authentication and integrity checking during decryption (e.g. namespace, context).
	Iv *SymmetricCipherInitializationVector `json:"iv,omitempty"`
}

// SymmetricEncryptRequest Clear text to be encrypted. If you need to encrypt bytes, encode them first as text (e.g. Hexadecimal, Base64, Base64-URL, Base64-MIME, etc).
type SymmetricEncryptRequest = string

// SymmetricEncryptResponse Base64Url-encoded JSON Web Encryption (JWE) of the encrypted bytes (and non-secret cipher parameters) in compact serialized format. See RFC 7516 JSON Web Encryption (JWE) for more details. Compact serialized format is 'Header.EncryptedKey.IV.Ciphertext.AuthenticationTag'. There are five Base64Url-encoded parts and separated by '.'. Some parts can be empty depending on the 'alg' and 'enc' headers parameters. - Header: Required base64Url-encoded JSON key/values for the JWE. - EncryptedKey: Optional base64Url-encoded JWE of an encrypted symmetric key used to encrypt the payload. This is non-empty for envelope encryption (e.g. alg=a256gcmkw), or empty for direct encryption (e.g. alg=dir). - IV: Required base64Url-encoded Initialization Vector (IV) used for encryption. For AES-GCM or AES-GCM-SIV it contains a 12-bytes nonce. For AES-CBC it contains a 16-bytes IV. - Ciphertext: Required base64Url-encoded encrypted secret bytes. It is always non-empty. For AES-GCM or AES-GCM-SIV it contains same number of bytes as the plaintext. - AuthenticationTag: Required base64Url-encoded authentication tag used for encryption. For AES-GCM or AES-GCM-SIV it contains a 16-bytes authentication tag. For AES-CBC-HMAC it contains a N-bytes HMAC hash.
type SymmetricEncryptResponse = string

// KeyPoolQueryParamAlgorithms defines model for KeyPoolQueryParamAlgorithms.
type KeyPoolQueryParamAlgorithms = []KeyPoolAlgorithm

// KeyPoolQueryParamExportAllowed Indicates if the Key Pool supports export.
type KeyPoolQueryParamExportAllowed = KeyPoolExportAllowed

// KeyPoolQueryParamIds defines model for KeyPoolQueryParamIds.
type KeyPoolQueryParamIds = []KeyPoolId

// KeyPoolQueryParamImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolQueryParamImportAllowed = KeyPoolImportAllowed

// KeyPoolQueryParamNames defines model for KeyPoolQueryParamNames.
type KeyPoolQueryParamNames = []KeyPoolName

// KeyPoolQueryParamPageNumber Page number starting at 0.
type KeyPoolQueryParamPageNumber = PageNumber

// KeyPoolQueryParamPageSize Page number.
type KeyPoolQueryParamPageSize = PageSize

// KeyPoolQueryParamProviders defines model for KeyPoolQueryParamProviders.
type KeyPoolQueryParamProviders = []KeyPoolProvider

// KeyPoolQueryParamSorts defines model for KeyPoolQueryParamSorts.
type KeyPoolQueryParamSorts = []KeyPoolSort

// KeyPoolQueryParamStatuses defines model for KeyPoolQueryParamStatuses.
type KeyPoolQueryParamStatuses = []KeyPoolStatus

// KeyPoolQueryParamVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolQueryParamVersioningAllowed = KeyPoolVersioningAllowed

// KeyQueryParamIds defines model for KeyQueryParamIds.
type KeyQueryParamIds = []KeyId

// KeyQueryParamKeyPoolIds defines model for KeyQueryParamKeyPoolIds.
type KeyQueryParamKeyPoolIds = []KeyPoolId

// KeyQueryParamMaximumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyQueryParamMaximumGenerateDate = KeyGenerateDate

// KeyQueryParamMinimumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyQueryParamMinimumGenerateDate = KeyGenerateDate

// KeyQueryParamPageNumber Page number starting at 0.
type KeyQueryParamPageNumber = PageNumber

// KeyQueryParamPageSize Page number.
type KeyQueryParamPageSize = PageSize

// KeyQueryParamSorts defines model for KeyQueryParamSorts.
type KeyQueryParamSorts = []KeySort

// HTTP400BadRequest defines model for HTTP400BadRequest.
type HTTP400BadRequest struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP401Unauthorized defines model for HTTP401Unauthorized.
type HTTP401Unauthorized struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP403Forbidden defines model for HTTP403Forbidden.
type HTTP403Forbidden struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP404NotFound defines model for HTTP404NotFound.
type HTTP404NotFound struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP429TooManyRequests defines model for HTTP429TooManyRequests.
type HTTP429TooManyRequests struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP500InternalServerError defines model for HTTP500InternalServerError.
type HTTP500InternalServerError struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP502BadGateway defines model for HTTP502BadGateway.
type HTTP502BadGateway struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP503ServiceUnavailable defines model for HTTP503ServiceUnavailable.
type HTTP503ServiceUnavailable struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP504GatewayTimeout defines model for HTTP504GatewayTimeout.
type HTTP504GatewayTimeout struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//38FUFdNJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
