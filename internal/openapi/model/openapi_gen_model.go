// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1-0.20250618140738-aae687ce8fe9 DO NOT EDIT.
package model

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ElasticKeyAlgorithm.
const (
	A128CBCHS256A128GCMKW    ElasticKeyAlgorithm = "A128CBC-HS256/A128GCMKW"
	A128CBCHS256A128KW       ElasticKeyAlgorithm = "A128CBC-HS256/A128KW"
	A128CBCHS256A192GCMKW    ElasticKeyAlgorithm = "A128CBC-HS256/A192GCMKW"
	A128CBCHS256A192KW       ElasticKeyAlgorithm = "A128CBC-HS256/A192KW"
	A128CBCHS256A256GCMKW    ElasticKeyAlgorithm = "A128CBC-HS256/A256GCMKW"
	A128CBCHS256A256KW       ElasticKeyAlgorithm = "A128CBC-HS256/A256KW"
	A128CBCHS256Dir          ElasticKeyAlgorithm = "A128CBC-HS256/dir"
	A128CBCHS256ECDHES       ElasticKeyAlgorithm = "A128CBC-HS256/ECDH-ES"
	A128CBCHS256ECDHESA128KW ElasticKeyAlgorithm = "A128CBC-HS256/ECDH-ES+A128KW"
	A128CBCHS256ECDHESA192KW ElasticKeyAlgorithm = "A128CBC-HS256/ECDH-ES+A192KW"
	A128CBCHS256ECDHESA256KW ElasticKeyAlgorithm = "A128CBC-HS256/ECDH-ES+A256KW"
	A128CBCHS256RSA15        ElasticKeyAlgorithm = "A128CBC-HS256/RSA1_5"
	A128CBCHS256RSAOAEP      ElasticKeyAlgorithm = "A128CBC-HS256/RSA-OAEP"
	A128CBCHS256RSAOAEP256   ElasticKeyAlgorithm = "A128CBC-HS256/RSA-OAEP-256"
	A128CBCHS256RSAOAEP384   ElasticKeyAlgorithm = "A128CBC-HS256/RSA-OAEP-384"
	A128CBCHS256RSAOAEP512   ElasticKeyAlgorithm = "A128CBC-HS256/RSA-OAEP-512"
	A128GCMA128GCMKW         ElasticKeyAlgorithm = "A128GCM/A128GCMKW"
	A128GCMA128KW            ElasticKeyAlgorithm = "A128GCM/A128KW"
	A128GCMA192GCMKW         ElasticKeyAlgorithm = "A128GCM/A192GCMKW"
	A128GCMA192KW            ElasticKeyAlgorithm = "A128GCM/A192KW"
	A128GCMA256GCMKW         ElasticKeyAlgorithm = "A128GCM/A256GCMKW"
	A128GCMA256KW            ElasticKeyAlgorithm = "A128GCM/A256KW"
	A128GCMDir               ElasticKeyAlgorithm = "A128GCM/dir"
	A128GCMECDHES            ElasticKeyAlgorithm = "A128GCM/ECDH-ES"
	A128GCMECDHESA128KW      ElasticKeyAlgorithm = "A128GCM/ECDH-ES+A128KW"
	A128GCMECDHESA192KW      ElasticKeyAlgorithm = "A128GCM/ECDH-ES+A192KW"
	A128GCMECDHESA256KW      ElasticKeyAlgorithm = "A128GCM/ECDH-ES+A256KW"
	A128GCMRSA15             ElasticKeyAlgorithm = "A128GCM/RSA1_5"
	A128GCMRSAOAEP           ElasticKeyAlgorithm = "A128GCM/RSA-OAEP"
	A128GCMRSAOAEP256        ElasticKeyAlgorithm = "A128GCM/RSA-OAEP-256"
	A128GCMRSAOAEP384        ElasticKeyAlgorithm = "A128GCM/RSA-OAEP-384"
	A128GCMRSAOAEP512        ElasticKeyAlgorithm = "A128GCM/RSA-OAEP-512"
	A192CBCHS384A128GCMKW    ElasticKeyAlgorithm = "A192CBC-HS384/A128GCMKW"
	A192CBCHS384A128KW       ElasticKeyAlgorithm = "A192CBC-HS384/A128KW"
	A192CBCHS384A192GCMKW    ElasticKeyAlgorithm = "A192CBC-HS384/A192GCMKW"
	A192CBCHS384A192KW       ElasticKeyAlgorithm = "A192CBC-HS384/A192KW"
	A192CBCHS384A256GCMKW    ElasticKeyAlgorithm = "A192CBC-HS384/A256GCMKW"
	A192CBCHS384A256KW       ElasticKeyAlgorithm = "A192CBC-HS384/A256KW"
	A192CBCHS384Dir          ElasticKeyAlgorithm = "A192CBC-HS384/dir"
	A192CBCHS384ECDHES       ElasticKeyAlgorithm = "A192CBC-HS384/ECDH-ES"
	A192CBCHS384ECDHESA128KW ElasticKeyAlgorithm = "A192CBC-HS384/ECDH-ES+A128KW"
	A192CBCHS384ECDHESA192KW ElasticKeyAlgorithm = "A192CBC-HS384/ECDH-ES+A192KW"
	A192CBCHS384ECDHESA256KW ElasticKeyAlgorithm = "A192CBC-HS384/ECDH-ES+A256KW"
	A192CBCHS384RSA15        ElasticKeyAlgorithm = "A192CBC-HS384/RSA1_5"
	A192CBCHS384RSAOAEP      ElasticKeyAlgorithm = "A192CBC-HS384/RSA-OAEP"
	A192CBCHS384RSAOAEP256   ElasticKeyAlgorithm = "A192CBC-HS384/RSA-OAEP-256"
	A192CBCHS384RSAOAEP384   ElasticKeyAlgorithm = "A192CBC-HS384/RSA-OAEP-384"
	A192CBCHS384RSAOAEP512   ElasticKeyAlgorithm = "A192CBC-HS384/RSA-OAEP-512"
	A192GCMA128GCMKW         ElasticKeyAlgorithm = "A192GCM/A128GCMKW"
	A192GCMA128KW            ElasticKeyAlgorithm = "A192GCM/A128KW"
	A192GCMA192GCMKW         ElasticKeyAlgorithm = "A192GCM/A192GCMKW"
	A192GCMA192KW            ElasticKeyAlgorithm = "A192GCM/A192KW"
	A192GCMA256GCMKW         ElasticKeyAlgorithm = "A192GCM/A256GCMKW"
	A192GCMA256KW            ElasticKeyAlgorithm = "A192GCM/A256KW"
	A192GCMDir               ElasticKeyAlgorithm = "A192GCM/dir"
	A192GCMECDHES            ElasticKeyAlgorithm = "A192GCM/ECDH-ES"
	A192GCMECDHESA128KW      ElasticKeyAlgorithm = "A192GCM/ECDH-ES+A128KW"
	A192GCMECDHESA192KW      ElasticKeyAlgorithm = "A192GCM/ECDH-ES+A192KW"
	A192GCMECDHESA256KW      ElasticKeyAlgorithm = "A192GCM/ECDH-ES+A256KW"
	A192GCMRSA15             ElasticKeyAlgorithm = "A192GCM/RSA1_5"
	A192GCMRSAOAEP           ElasticKeyAlgorithm = "A192GCM/RSA-OAEP"
	A192GCMRSAOAEP256        ElasticKeyAlgorithm = "A192GCM/RSA-OAEP-256"
	A192GCMRSAOAEP384        ElasticKeyAlgorithm = "A192GCM/RSA-OAEP-384"
	A192GCMRSAOAEP512        ElasticKeyAlgorithm = "A192GCM/RSA-OAEP-512"
	A256CBCHS512A128GCMKW    ElasticKeyAlgorithm = "A256CBC-HS512/A128GCMKW"
	A256CBCHS512A128KW       ElasticKeyAlgorithm = "A256CBC-HS512/A128KW"
	A256CBCHS512A192GCMKW    ElasticKeyAlgorithm = "A256CBC-HS512/A192GCMKW"
	A256CBCHS512A192KW       ElasticKeyAlgorithm = "A256CBC-HS512/A192KW"
	A256CBCHS512A256GCMKW    ElasticKeyAlgorithm = "A256CBC-HS512/A256GCMKW"
	A256CBCHS512A256KW       ElasticKeyAlgorithm = "A256CBC-HS512/A256KW"
	A256CBCHS512Dir          ElasticKeyAlgorithm = "A256CBC-HS512/dir"
	A256CBCHS512ECDHES       ElasticKeyAlgorithm = "A256CBC-HS512/ECDH-ES"
	A256CBCHS512ECDHESA128KW ElasticKeyAlgorithm = "A256CBC-HS512/ECDH-ES+A128KW"
	A256CBCHS512ECDHESA192KW ElasticKeyAlgorithm = "A256CBC-HS512/ECDH-ES+A192KW"
	A256CBCHS512ECDHESA256KW ElasticKeyAlgorithm = "A256CBC-HS512/ECDH-ES+A256KW"
	A256CBCHS512RSA15        ElasticKeyAlgorithm = "A256CBC-HS512/RSA1_5"
	A256CBCHS512RSAOAEP      ElasticKeyAlgorithm = "A256CBC-HS512/RSA-OAEP"
	A256CBCHS512RSAOAEP256   ElasticKeyAlgorithm = "A256CBC-HS512/RSA-OAEP-256"
	A256CBCHS512RSAOAEP384   ElasticKeyAlgorithm = "A256CBC-HS512/RSA-OAEP-384"
	A256CBCHS512RSAOAEP512   ElasticKeyAlgorithm = "A256CBC-HS512/RSA-OAEP-512"
	A256GCMA128GCMKW         ElasticKeyAlgorithm = "A256GCM/A128GCMKW"
	A256GCMA128KW            ElasticKeyAlgorithm = "A256GCM/A128KW"
	A256GCMA192GCMKW         ElasticKeyAlgorithm = "A256GCM/A192GCMKW"
	A256GCMA192KW            ElasticKeyAlgorithm = "A256GCM/A192KW"
	A256GCMA256GCMKW         ElasticKeyAlgorithm = "A256GCM/A256GCMKW"
	A256GCMA256KW            ElasticKeyAlgorithm = "A256GCM/A256KW"
	A256GCMDir               ElasticKeyAlgorithm = "A256GCM/dir"
	A256GCMECDHES            ElasticKeyAlgorithm = "A256GCM/ECDH-ES"
	A256GCMECDHESA128KW      ElasticKeyAlgorithm = "A256GCM/ECDH-ES+A128KW"
	A256GCMECDHESA192KW      ElasticKeyAlgorithm = "A256GCM/ECDH-ES+A192KW"
	A256GCMECDHESA256KW      ElasticKeyAlgorithm = "A256GCM/ECDH-ES+A256KW"
	A256GCMRSA15             ElasticKeyAlgorithm = "A256GCM/RSA1_5"
	A256GCMRSAOAEP           ElasticKeyAlgorithm = "A256GCM/RSA-OAEP"
	A256GCMRSAOAEP256        ElasticKeyAlgorithm = "A256GCM/RSA-OAEP-256"
	A256GCMRSAOAEP384        ElasticKeyAlgorithm = "A256GCM/RSA-OAEP-384"
	A256GCMRSAOAEP512        ElasticKeyAlgorithm = "A256GCM/RSA-OAEP-512"
	ES256                    ElasticKeyAlgorithm = "ES256"
	ES384                    ElasticKeyAlgorithm = "ES384"
	ES512                    ElasticKeyAlgorithm = "ES512"
	EdDSA                    ElasticKeyAlgorithm = "EdDSA"
	HS256                    ElasticKeyAlgorithm = "HS256"
	HS384                    ElasticKeyAlgorithm = "HS384"
	HS512                    ElasticKeyAlgorithm = "HS512"
	PS256                    ElasticKeyAlgorithm = "PS256"
	PS384                    ElasticKeyAlgorithm = "PS384"
	PS512                    ElasticKeyAlgorithm = "PS512"
	RS256                    ElasticKeyAlgorithm = "RS256"
	RS384                    ElasticKeyAlgorithm = "RS384"
	RS512                    ElasticKeyAlgorithm = "RS512"
)

// Defines values for ElasticKeyProvider.
const (
	Internal ElasticKeyProvider = "Internal"
)

// Defines values for ElasticKeySort.
const (
	ElasticKeySortAlgorithmASC          ElasticKeySort = "algorithm:ASC"
	ElasticKeySortAlgorithmDESC         ElasticKeySort = "algorithm:DESC"
	ElasticKeySortElasticKeyIDASC       ElasticKeySort = "elastic_key_id:ASC"
	ElasticKeySortElasticKeyIDDESC      ElasticKeySort = "elastic_key_id:DESC"
	ElasticKeySortExportAllowedASC      ElasticKeySort = "export_allowed:ASC"
	ElasticKeySortExportAllowedDESC     ElasticKeySort = "export_allowed:DESC"
	ElasticKeySortImportAllowedASC      ElasticKeySort = "import_allowed:ASC"
	ElasticKeySortImportAllowedDESC     ElasticKeySort = "import_allowed:DESC"
	ElasticKeySortNameASC               ElasticKeySort = "name:ASC"
	ElasticKeySortNameDESC              ElasticKeySort = "name:DESC"
	ElasticKeySortProviderASC           ElasticKeySort = "provider:ASC"
	ElasticKeySortProviderDESC          ElasticKeySort = "provider:DESC"
	ElasticKeySortStatusASC             ElasticKeySort = "status:ASC"
	ElasticKeySortStatusDESC            ElasticKeySort = "status:DESC"
	ElasticKeySortVersioningAllowedASC  ElasticKeySort = "versioning_allowed:ASC"
	ElasticKeySortVersioningAllowedDESC ElasticKeySort = "versioning_allowed:DESC"
)

// Defines values for ElasticKeyStatus.
const (
	Active                         ElasticKeyStatus = "active"
	Creating                       ElasticKeyStatus = "creating"
	Disabled                       ElasticKeyStatus = "disabled"
	FinishedDelete                 ElasticKeyStatus = "finished_delete"
	GenerateFailed                 ElasticKeyStatus = "generate_failed"
	ImportFailed                   ElasticKeyStatus = "import_failed"
	PendingDeleteWasActive         ElasticKeyStatus = "pending_delete_was_active"
	PendingDeleteWasDisabled       ElasticKeyStatus = "pending_delete_was_disabled"
	PendingDeleteWasGenerateFailed ElasticKeyStatus = "pending_delete_was_generate_failed"
	PendingDeleteWasImportFailed   ElasticKeyStatus = "pending_delete_was_import_failed"
	PendingDeleteWasPendingImport  ElasticKeyStatus = "pending_delete_was_pending_import"
	PendingGenerate                ElasticKeyStatus = "pending_generate"
	PendingImport                  ElasticKeyStatus = "pending_import"
	StartedDelete                  ElasticKeyStatus = "started_delete"
)

// Defines values for MaterialKeySort.
const (
	MaterialKeySortElasticKeyID       MaterialKeySort = "elastic_key_id"
	MaterialKeySortElasticKeyIDASC    MaterialKeySort = "elastic_key_id:ASC"
	MaterialKeySortElasticKeyIDDESC   MaterialKeySort = "elastic_key_id:DESC"
	MaterialKeySortExpirationDate     MaterialKeySort = "expiration_date"
	MaterialKeySortExpirationDateASC  MaterialKeySort = "expiration_date:ASC"
	MaterialKeySortExpirationDateDESC MaterialKeySort = "expiration_date:DESC"
	MaterialKeySortGenerateDate       MaterialKeySort = "generate_date"
	MaterialKeySortGenerateDateASC    MaterialKeySort = "generate_date:ASC"
	MaterialKeySortGenerateDateDESC   MaterialKeySort = "generate_date:DESC"
	MaterialKeySortImportDate         MaterialKeySort = "import_date"
	MaterialKeySortImportDateASC      MaterialKeySort = "import_date:ASC"
	MaterialKeySortImportDateDESC     MaterialKeySort = "import_date:DESC"
	MaterialKeySortMaterialKeyID      MaterialKeySort = "material_key_id"
	MaterialKeySortMaterialKeyIDASC   MaterialKeySort = "material_key_id:ASC"
	MaterialKeySortMaterialKeyIDDESC  MaterialKeySort = "material_key_id:DESC"
	MaterialKeySortRevocationDate     MaterialKeySort = "revocation_date"
	MaterialKeySortRevocationDateASC  MaterialKeySort = "revocation_date:ASC"
	MaterialKeySortRevocationDateDESC MaterialKeySort = "revocation_date:DESC"
)

// DecryptRequest JSON Web Encryption (JWE) message in compact serialized format. See RFC 7516 JSON Web Encryption (JWE) for more details. Compact serialized format is 'Header.EncryptedKey.IV.Ciphertext.AuthenticationTag'. Each section is Base64Url-encoded; Some parts can be empty depending on 'alg' and 'enc' headers. - Header: Required base64Url-encoded JSON key/values for the JWE message. - EncryptedKey: Optional base64Url-encoded of an encrypted symmetric key used to encrypt the payload. Mon-empty for envelope encryption (e.g. alg=a256gcmkw), or empty for direct encryption (e.g. alg=dir). - IV: Required base64Url-encoded Initialization Vector (IV) used to encrypt the payload. For AES-GCM or AES-GCM-SIV it contains a 12-bytes nonce. For AES-CBC it contains a 16-bytes IV. - Ciphertext: Required base64Url-encoded encrypted bytes. - AuthenticationTag: Required base64Url-encoded authentication tag. For AES-GCM or AES-GCM-SIV it's a 16-bytes authentication tag. For AES-CBC-HMAC it contains an AEAD HMAC hash.
type DecryptRequest = string

// DecryptResponse Decrypted string. For bytes, decode from text (e.g. Hexadecimal, Base64, Base64-URL, Base64-MIME, etc) back to bytes.
type DecryptResponse = string

// ElasticKey defines model for ElasticKey.
type ElasticKey struct {
	// Algorithm Cryptographic algorithm(s) used for Material Keys in the Elastic Key. The first is the content encryption algorithm, and the second is the optional key encryption algorithm. If key encryption algorithm is 'dir', the Elastic Key Key is directly used on values. direct encryption is useful for small values. If key encryption algorithm is 'K*W', a random Content Encryption Key (CEK) is used directly on values, and the Elastic Key Key is used to encrypt the CEK. Key wrap is useful for large values (e.g. files, blobs, etc). If in doubt, it is safe to use 'A256GCM/A256KW' for all values; it is the default.
	Algorithm *ElasticKeyAlgorithm `json:"algorithm,omitempty"`

	// Description Description for an Elastic Key.
	Description *ElasticKeyDescription `json:"description,omitempty"`

	// ElasticKeyID Unique UUID for an Elastic Key.
	ElasticKeyID *ElasticKeyID `json:"elastic_key_id,omitempty"`

	// ExportAllowed Indicates if the Elastic Key supports export of Material Key. Always use default false for production. If true, the Elastic Key should only be used for testing or development.
	ExportAllowed *ElasticKeyExportAllowed `json:"export_allowed,omitempty"`

	// ImportAllowed Indicates if the Elastic Key supports import (BYOK).
	ImportAllowed *ElasticKeyImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for an Elastic Key.
	Name *ElasticKeyName `json:"name,omitempty"`

	// Provider Provider of the Elastic Key management service.
	Provider *ElasticKeyProvider `json:"provider,omitempty"`

	// Status Status of the Elastic Key.
	Status *ElasticKeyStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Elastic Key supports versioning.
	VersioningAllowed *ElasticKeyVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// ElasticKeyAlgorithm Cryptographic algorithm(s) used for Material Keys in the Elastic Key. The first is the content encryption algorithm, and the second is the optional key encryption algorithm. If key encryption algorithm is 'dir', the Elastic Key Key is directly used on values. direct encryption is useful for small values. If key encryption algorithm is 'K*W', a random Content Encryption Key (CEK) is used directly on values, and the Elastic Key Key is used to encrypt the CEK. Key wrap is useful for large values (e.g. files, blobs, etc). If in doubt, it is safe to use 'A256GCM/A256KW' for all values; it is the default.
type ElasticKeyAlgorithm string

// ElasticKeyCreate defines model for ElasticKeyCreate.
type ElasticKeyCreate struct {
	// Algorithm Cryptographic algorithm(s) used for Material Keys in the Elastic Key. The first is the content encryption algorithm, and the second is the optional key encryption algorithm. If key encryption algorithm is 'dir', the Elastic Key Key is directly used on values. direct encryption is useful for small values. If key encryption algorithm is 'K*W', a random Content Encryption Key (CEK) is used directly on values, and the Elastic Key Key is used to encrypt the CEK. Key wrap is useful for large values (e.g. files, blobs, etc). If in doubt, it is safe to use 'A256GCM/A256KW' for all values; it is the default.
	Algorithm *ElasticKeyAlgorithm `json:"algorithm,omitempty"`

	// Description Description for an Elastic Key.
	Description ElasticKeyDescription `json:"description"`

	// ExportAllowed Indicates if the Elastic Key supports export of Material Key. Always use default false for production. If true, the Elastic Key should only be used for testing or development.
	ExportAllowed *ElasticKeyExportAllowed `json:"export_allowed,omitempty"`

	// ImportAllowed Indicates if the Elastic Key supports import (BYOK).
	ImportAllowed *ElasticKeyImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for an Elastic Key.
	Name ElasticKeyName `json:"name"`

	// Provider Provider of the Elastic Key management service.
	Provider *ElasticKeyProvider `json:"provider,omitempty"`

	// VersioningAllowed Indicates if the Elastic Key supports versioning.
	VersioningAllowed *ElasticKeyVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// ElasticKeyDescription Description for an Elastic Key.
type ElasticKeyDescription = string

// ElasticKeyExportAllowed Indicates if the Elastic Key supports export of Material Key. Always use default false for production. If true, the Elastic Key should only be used for testing or development.
type ElasticKeyExportAllowed = bool

// ElasticKeyID Unique UUID for an Elastic Key.
type ElasticKeyID = openapi_types.UUID

// ElasticKeyImportAllowed Indicates if the Elastic Key supports import (BYOK).
type ElasticKeyImportAllowed = bool

// ElasticKeyMaterialKeysQueryParams defines model for ElasticKeyMaterialKeysQueryParams.
type ElasticKeyMaterialKeysQueryParams struct {
	MaterialKeyID *[]MaterialKeyID `json:"material_key_id,omitempty"`

	// MaxExpirationDate ISO 8601 UTC timestamp of Material Key generation.
	MaxExpirationDate *MaterialKeyExpirationDate `json:"max_expiration_date,omitempty"`

	// MaxGenerateDate ISO 8601 UTC timestamp of Material Key generation.
	MaxGenerateDate *MaterialKeyGenerateDate `json:"max_generate_date,omitempty"`

	// MaxImportDate ISO 8601 UTC timestamp of Material Key generation.
	MaxImportDate *MaterialKeyImportDate `json:"max_import_date,omitempty"`

	// MaxRevocationDate ISO 8601 UTC timestamp of Material Key generation.
	MaxRevocationDate *MaterialKeyRevocationDate `json:"max_revocation_date,omitempty"`

	// MinExpirationDate ISO 8601 UTC timestamp of Material Key generation.
	MinExpirationDate *MaterialKeyExpirationDate `json:"min_expiration_date,omitempty"`

	// MinGenerateDate ISO 8601 UTC timestamp of Material Key generation.
	MinGenerateDate *MaterialKeyGenerateDate `json:"min_generate_date,omitempty"`

	// MinImportDate ISO 8601 UTC timestamp of Material Key generation.
	MinImportDate *MaterialKeyImportDate `json:"min_import_date,omitempty"`

	// MinRevocationDate ISO 8601 UTC timestamp of Material Key generation.
	MinRevocationDate *MaterialKeyRevocationDate `json:"min_revocation_date,omitempty"`

	// Page Page number starting at 0.
	Page *PageNumber `json:"page,omitempty"`

	// Size Page number.
	Size *PageSize          `json:"size,omitempty"`
	Sort *[]MaterialKeySort `json:"sort,omitempty"`
}

// ElasticKeyName Friendly name for an Elastic Key.
type ElasticKeyName = string

// ElasticKeyProvider Provider of the Elastic Key management service.
type ElasticKeyProvider string

// ElasticKeySort defines model for ElasticKeySort.
type ElasticKeySort string

// ElasticKeyStatus Status of the Elastic Key.
type ElasticKeyStatus string

// ElasticKeyUpdate defines model for ElasticKeyUpdate.
type ElasticKeyUpdate struct {
	// Description Description for an Elastic Key.
	Description ElasticKeyDescription `json:"description"`

	// Name Friendly name for an Elastic Key.
	Name ElasticKeyName `json:"name"`
}

// ElasticKeyVersioningAllowed Indicates if the Elastic Key supports versioning.
type ElasticKeyVersioningAllowed = bool

// ElasticKeysQueryParams defines model for ElasticKeysQueryParams.
type ElasticKeysQueryParams struct {
	Algorithm    *[]ElasticKeyAlgorithm `json:"algorithm,omitempty"`
	ElasticKeyID *[]ElasticKeyID        `json:"elastic_key_id,omitempty"`

	// ExportAllowed Indicates if the Elastic Key supports export of Material Key. Always use default false for production. If true, the Elastic Key should only be used for testing or development.
	ExportAllowed *ElasticKeyExportAllowed `json:"export_allowed,omitempty"`

	// ImportAllowed Indicates if the Elastic Key supports import (BYOK).
	ImportAllowed *ElasticKeyImportAllowed `json:"import_allowed,omitempty"`
	Name          *[]ElasticKeyName        `json:"name,omitempty"`

	// Page Page number starting at 0.
	Page     *PageNumber           `json:"page,omitempty"`
	Provider *[]ElasticKeyProvider `json:"provider,omitempty"`

	// Size Page number.
	Size   *PageSize           `json:"size,omitempty"`
	Sort   *[]ElasticKeySort   `json:"sort,omitempty"`
	Status *[]ElasticKeyStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Elastic Key supports versioning.
	VersioningAllowed *ElasticKeyVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// EncryptContext Base64URL-encoded context. This is clear data used for authentication and integrity checking during decryption (e.g. namespace, context).
type EncryptContext = string

// EncryptParams defines model for EncryptParams.
type EncryptParams struct {
	// Context Base64URL-encoded context. This is clear data used for authentication and integrity checking during decryption (e.g. namespace, context).
	Context *EncryptContext `json:"context,omitempty"`
}

// EncryptRequest Clear string to be encrypted. For bytes, pre-encode as text (e.g. Hexadecimal, Base64, Base64-URL, Base64-MIME, etc).
type EncryptRequest = string

// EncryptResponse JSON Web Encryption (JWE) message in compact serialized format. See RFC 7516 JSON Web Encryption (JWE) for more details. Compact serialized format is 'Header.EncryptedKey.IV.Ciphertext.AuthenticationTag'. Each section is Base64Url-encoded; Some parts can be empty depending on 'alg' and 'enc' headers. - Header: Required base64Url-encoded JSON key/values for the JWE. - EncryptedKey: Optional base64Url-encoded of an encrypted symmetric key used to encrypt the payload. Mon-empty for envelope encryption (e.g. alg=a256gcmkw), or empty for direct encryption (e.g. alg=dir). - IV: Required base64Url-encoded Initialization Vector (IV) used to encrypt the payload. For AES-GCM or AES-GCM-SIV it contains a 12-bytes nonce. For AES-CBC it contains a 16-bytes IV. - Ciphertext: Required base64Url-encoded encrypted bytes. - AuthenticationTag: Required base64Url-encoded authentication tag. For AES-GCM or AES-GCM-SIV it's a 16-bytes authentication tag. For AES-CBC-HMAC it contains an AEAD HMAC hash.
type EncryptResponse = string

// HTTPError defines model for HTTPError.
type HTTPError struct {
	// Error HTTP status message
	Error string `json:"error"`

	// Message Detailed error message
	Message string `json:"message"`

	// Status HTTP status code
	Status int `json:"status"`
}

// MaterialKey defines model for MaterialKey.
type MaterialKey struct {
	// Decrypted Clear private or secret key Material Key (if ElasticKey exportAllowed=true)
	Decrypted *MaterialKeyDecrypted `json:"decrypted,omitempty"`

	// ElasticKeyID Unique UUID for an Elastic Key.
	ElasticKeyID ElasticKeyID `json:"elastic_key_id"`

	// Encrypted Encrypted private or secret key Material Key (if ElasticKey exportAllowed=true)
	Encrypted *MaterialKeyEncrypted `json:"encrypted,omitempty"`

	// ExpirationDate ISO 8601 UTC timestamp of Material Key generation.
	ExpirationDate *MaterialKeyExpirationDate `json:"expiration_date,omitempty"`

	// GenerateDate ISO 8601 UTC timestamp of Material Key generation.
	GenerateDate *MaterialKeyGenerateDate `json:"generate_date,omitempty"`

	// ImportDate ISO 8601 UTC timestamp of Material Key generation.
	ImportDate *MaterialKeyImportDate `json:"import_date,omitempty"`

	// MaterialKeyID Unique UUID for a Material Key.
	MaterialKeyID MaterialKeyID `json:"material_key_id"`

	// Public Clear public key Material Key (if applicable)
	Public *MaterialKeyPublic `json:"public,omitempty"`

	// RevocationDate ISO 8601 UTC timestamp of Material Key generation.
	RevocationDate *MaterialKeyRevocationDate `json:"revocation_date,omitempty"`
}

// MaterialKeyDecrypted Clear private or secret key Material Key (if ElasticKey exportAllowed=true)
type MaterialKeyDecrypted = string

// MaterialKeyEncrypted Encrypted private or secret key Material Key (if ElasticKey exportAllowed=true)
type MaterialKeyEncrypted = string

// MaterialKeyExpirationDate ISO 8601 UTC timestamp of Material Key generation.
type MaterialKeyExpirationDate = time.Time

// MaterialKeyGenerate defines model for MaterialKeyGenerate.
type MaterialKeyGenerate = map[string]interface{}

// MaterialKeyGenerateDate ISO 8601 UTC timestamp of Material Key generation.
type MaterialKeyGenerateDate = time.Time

// MaterialKeyID Unique UUID for a Material Key.
type MaterialKeyID = openapi_types.UUID

// MaterialKeyImportDate ISO 8601 UTC timestamp of Material Key generation.
type MaterialKeyImportDate = time.Time

// MaterialKeyPublic Clear public key Material Key (if applicable)
type MaterialKeyPublic = string

// MaterialKeyRevocationDate ISO 8601 UTC timestamp of Material Key generation.
type MaterialKeyRevocationDate = time.Time

// MaterialKeySort defines model for MaterialKeySort.
type MaterialKeySort string

// MaterialKeyUpdate defines model for MaterialKeyUpdate.
type MaterialKeyUpdate struct {
	// ElasticKeyID Unique UUID for an Elastic Key.
	ElasticKeyID ElasticKeyID `json:"elastic_key_id"`

	// MaterialKeyID Unique UUID for a Material Key.
	MaterialKeyID MaterialKeyID `json:"material_key_id"`
}

// MaterialKeysQueryParams defines model for MaterialKeysQueryParams.
type MaterialKeysQueryParams struct {
	ElasticKeyID  *[]ElasticKeyID  `json:"elastic_key_id,omitempty"`
	MaterialKeyID *[]MaterialKeyID `json:"material_key_id,omitempty"`

	// MaxExpirationDate ISO 8601 UTC timestamp of Material Key generation.
	MaxExpirationDate *MaterialKeyExpirationDate `json:"max_expiration_date,omitempty"`

	// MaxGenerateDate ISO 8601 UTC timestamp of Material Key generation.
	MaxGenerateDate *MaterialKeyGenerateDate `json:"max_generate_date,omitempty"`

	// MaxImportDate ISO 8601 UTC timestamp of Material Key generation.
	MaxImportDate *MaterialKeyImportDate `json:"max_import_date,omitempty"`

	// MaxRevocationDate ISO 8601 UTC timestamp of Material Key generation.
	MaxRevocationDate *MaterialKeyRevocationDate `json:"max_revocation_date,omitempty"`

	// MinExpirationDate ISO 8601 UTC timestamp of Material Key generation.
	MinExpirationDate *MaterialKeyExpirationDate `json:"min_expiration_date,omitempty"`

	// MinGenerateDate ISO 8601 UTC timestamp of Material Key generation.
	MinGenerateDate *MaterialKeyGenerateDate `json:"min_generate_date,omitempty"`

	// MinImportDate ISO 8601 UTC timestamp of Material Key generation.
	MinImportDate *MaterialKeyImportDate `json:"min_import_date,omitempty"`

	// MinRevocationDate ISO 8601 UTC timestamp of Material Key generation.
	MinRevocationDate *MaterialKeyRevocationDate `json:"min_revocation_date,omitempty"`

	// Page Page number starting at 0.
	Page *PageNumber `json:"page,omitempty"`

	// Size Page number.
	Size *PageSize          `json:"size,omitempty"`
	Sort *[]MaterialKeySort `json:"sort,omitempty"`
}

// PageNumber Page number starting at 0.
type PageNumber = int

// PageSize Page number.
type PageSize = int

// SignContext Base64URL-encoded context. This is clear data used for integrity checking during verify (e.g. namespace, context).
type SignContext = string

// SignParams defines model for SignParams.
type SignParams struct {
	// Context Base64URL-encoded context. This is clear data used for integrity checking during verify (e.g. namespace, context).
	Context *SignContext `json:"context,omitempty"`
}

// SignRequest Clear text to be signed. Can be JSON-encoded to create a JWT, or freeform to create a JWS. If you need freeform, encode as text (e.g. Base64-URL, Base64-MIME, Base64, Hexadecimal, etc).
type SignRequest = string

// SignResponse JSON Web Signature (JWS) message in compact serialized format. See RFC 7515 JSON Web Signature (JWS) for more details. Compact serialized format is 'Header.Payload.Signature'. Each section is Base64Url-encoded. All parts are non-empty. - Header: Required base64Url-encoded JSON key/values for the JWS message. - Plaintext: Required base64Url-encoded clear text. Payload can be freeform (JWS), or in a special case it can be JSON (JWT). - Signature: Required base64Url-encoded signature.
type SignResponse = string

// VerifyRequest JSON Web Signature (JWS) message in compact serialized format. See RFC 7515 JSON Web Signature (JWS) for more details. Compact serialized format is 'Header.Payload.Signature'. Each section is Base64Url-encoded. All parts are non-empty. - Header: Required base64Url-encoded JSON key/values for the JWS message. - Plaintext: Required base64Url-encoded clear text. Payload can be freeform (JWS), or in a special case it can be JSON (JWT). - Signature: Required base64Url-encoded signature.
type VerifyRequest = string

// VerifyResponse Optional message about verification result
type VerifyResponse = string

// ElasticKeyQueryParamAlgorithms defines model for ElasticKeyQueryParamAlgorithms.
type ElasticKeyQueryParamAlgorithms = []ElasticKeyAlgorithm

// ElasticKeyQueryParamElasticKeyIDS defines model for ElasticKeyQueryParamElasticKeyIDS.
type ElasticKeyQueryParamElasticKeyIDS = []ElasticKeyID

// ElasticKeyQueryParamExportAllowed Indicates if the Elastic Key supports export of Material Key. Always use default false for production. If true, the Elastic Key should only be used for testing or development.
type ElasticKeyQueryParamExportAllowed = ElasticKeyExportAllowed

// ElasticKeyQueryParamImportAllowed Indicates if the Elastic Key supports import (BYOK).
type ElasticKeyQueryParamImportAllowed = ElasticKeyImportAllowed

// ElasticKeyQueryParamNames defines model for ElasticKeyQueryParamNames.
type ElasticKeyQueryParamNames = []ElasticKeyName

// ElasticKeyQueryParamPageNumber Page number starting at 0.
type ElasticKeyQueryParamPageNumber = PageNumber

// ElasticKeyQueryParamPageSize Page number.
type ElasticKeyQueryParamPageSize = PageSize

// ElasticKeyQueryParamProviders defines model for ElasticKeyQueryParamProviders.
type ElasticKeyQueryParamProviders = []ElasticKeyProvider

// ElasticKeyQueryParamSorts defines model for ElasticKeyQueryParamSorts.
type ElasticKeyQueryParamSorts = []ElasticKeySort

// ElasticKeyQueryParamStatuses defines model for ElasticKeyQueryParamStatuses.
type ElasticKeyQueryParamStatuses = []ElasticKeyStatus

// ElasticKeyQueryParamVersioningAllowed Indicates if the Elastic Key supports versioning.
type ElasticKeyQueryParamVersioningAllowed = ElasticKeyVersioningAllowed

// MaterialKeyQueryParamElasticKeyIDS defines model for MaterialKeyQueryParamElasticKeyIDS.
type MaterialKeyQueryParamElasticKeyIDS = []ElasticKeyID

// MaterialKeyQueryParamMaterialKeyIDS defines model for MaterialKeyQueryParamMaterialKeyIDS.
type MaterialKeyQueryParamMaterialKeyIDS = []MaterialKeyID

// MaterialKeyQueryParamMaximumExpirationDate ISO 8601 UTC timestamp of Material Key generation.
type MaterialKeyQueryParamMaximumExpirationDate = MaterialKeyExpirationDate

// MaterialKeyQueryParamMaximumGenerateDate ISO 8601 UTC timestamp of Material Key generation.
type MaterialKeyQueryParamMaximumGenerateDate = MaterialKeyGenerateDate

// MaterialKeyQueryParamMaximumImportDate ISO 8601 UTC timestamp of Material Key generation.
type MaterialKeyQueryParamMaximumImportDate = MaterialKeyImportDate

// MaterialKeyQueryParamMaximumRevocationDate ISO 8601 UTC timestamp of Material Key generation.
type MaterialKeyQueryParamMaximumRevocationDate = MaterialKeyRevocationDate

// MaterialKeyQueryParamMinimumExpirationDate ISO 8601 UTC timestamp of Material Key generation.
type MaterialKeyQueryParamMinimumExpirationDate = MaterialKeyExpirationDate

// MaterialKeyQueryParamMinimumGenerateDate ISO 8601 UTC timestamp of Material Key generation.
type MaterialKeyQueryParamMinimumGenerateDate = MaterialKeyGenerateDate

// MaterialKeyQueryParamMinimumImportDate ISO 8601 UTC timestamp of Material Key generation.
type MaterialKeyQueryParamMinimumImportDate = MaterialKeyImportDate

// MaterialKeyQueryParamMinimumRevocationDate ISO 8601 UTC timestamp of Material Key generation.
type MaterialKeyQueryParamMinimumRevocationDate = MaterialKeyRevocationDate

// MaterialKeyQueryParamPageNumber Page number starting at 0.
type MaterialKeyQueryParamPageNumber = PageNumber

// MaterialKeyQueryParamPageSize Page number.
type MaterialKeyQueryParamPageSize = PageSize

// MaterialKeyQueryParamSorts defines model for MaterialKeyQueryParamSorts.
type MaterialKeyQueryParamSorts = []MaterialKeySort

// HTTP400BadRequest defines model for HTTP400BadRequest.
type HTTP400BadRequest struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP401Unauthorized defines model for HTTP401Unauthorized.
type HTTP401Unauthorized struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP403Forbidden defines model for HTTP403Forbidden.
type HTTP403Forbidden struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP404NotFound defines model for HTTP404NotFound.
type HTTP404NotFound struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP429TooManyRequests defines model for HTTP429TooManyRequests.
type HTTP429TooManyRequests struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP500InternalServerError defines model for HTTP500InternalServerError.
type HTTP500InternalServerError struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP502BadGateway defines model for HTTP502BadGateway.
type HTTP502BadGateway struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP503ServiceUnavailable defines model for HTTP503ServiceUnavailable.
type HTTP503ServiceUnavailable struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP504GatewayTimeout defines model for HTTP504GatewayTimeout.
type HTTP504GatewayTimeout struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"l2UAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
