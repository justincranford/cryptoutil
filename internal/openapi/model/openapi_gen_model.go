// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package model

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for KeyPoolAlgorithm.
const (
	AES128 KeyPoolAlgorithm = "AES-128"
	AES192 KeyPoolAlgorithm = "AES-192"
	AES256 KeyPoolAlgorithm = "AES-256"
)

// Defines values for KeyPoolProvider.
const (
	Internal KeyPoolProvider = "Internal"
)

// Defines values for KeyPoolStatus.
const (
	Active                         KeyPoolStatus = "active"
	Creating                       KeyPoolStatus = "creating"
	Disabled                       KeyPoolStatus = "disabled"
	FinishedDelete                 KeyPoolStatus = "finished_delete"
	GenerateFailed                 KeyPoolStatus = "generate_failed"
	ImportFailed                   KeyPoolStatus = "import_failed"
	PendingDeleteWasActive         KeyPoolStatus = "pending_delete_was_active"
	PendingDeleteWasDisabled       KeyPoolStatus = "pending_delete_was_disabled"
	PendingDeleteWasGenerateFailed KeyPoolStatus = "pending_delete_was_generate_failed"
	PendingDeleteWasImportFailed   KeyPoolStatus = "pending_delete_was_import_failed"
	PendingDeleteWasPendingImport  KeyPoolStatus = "pending_delete_was_pending_import"
	PendingGenerate                KeyPoolStatus = "pending_generate"
	PendingImport                  KeyPoolStatus = "pending_import"
	StartedDelete                  KeyPoolStatus = "started_delete"
)

// HTTPError defines model for HTTPError.
type HTTPError struct {
	// Error HTTP status message
	Error string `json:"error"`

	// Message Detailed error message
	Message string `json:"message"`

	// Status HTTP status code
	Status int `json:"status"`
}

// Key defines model for Key.
type Key struct {
	// GenerateDate ISO 8601 UTC timestamp of Key generation.
	GenerateDate *KeyGenerateDate `json:"generate_date,omitempty"`

	// Id Unique version of the Key in a Key Pool.
	Id *KeyId `json:"id,omitempty"`

	// Pool Unique UUID for a Key Pool.
	Pool *KeyPoolId `json:"pool,omitempty"`
}

// KeyGenerate defines model for KeyGenerate.
type KeyGenerate = map[string]interface{}

// KeyGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyGenerateDate = time.Time

// KeyId Unique version of the Key in a Key Pool.
type KeyId = int

// KeyPool defines model for KeyPool.
type KeyPool struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description *KeyPoolDescription `json:"description,omitempty"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolIsExportAllowed `json:"export_allowed,omitempty"`

	// Id Unique UUID for a Key Pool.
	Id *KeyPoolId `json:"id,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolIsImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name *KeyPoolName `json:"name,omitempty"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// Status Status of the Key Pool.
	Status *KeyPoolStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolIsVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolAlgorithm Cryptographic algorithm for the Key Pool.
type KeyPoolAlgorithm string

// KeyPoolCreate defines model for KeyPoolCreate.
type KeyPoolCreate struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolIsExportAllowed `json:"export_allowed,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolIsImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolIsVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolDescription Description for a Key Pool.
type KeyPoolDescription = string

// KeyPoolId Unique UUID for a Key Pool.
type KeyPoolId = openapi_types.UUID

// KeyPoolIsExportAllowed Indicates if the Key Pool supports export.
type KeyPoolIsExportAllowed = bool

// KeyPoolIsImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolIsImportAllowed = bool

// KeyPoolIsVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolIsVersioningAllowed = bool

// KeyPoolName Friendly name for a Key Pool.
type KeyPoolName = string

// KeyPoolProvider Provider of the Key Pool management service.
type KeyPoolProvider string

// KeyPoolStatus Status of the Key Pool.
type KeyPoolStatus string

// KeyPoolUpdate defines model for KeyPoolUpdate.
type KeyPoolUpdate struct {
	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`
}

// KeyUpdate defines model for KeyUpdate.
type KeyUpdate struct {
	// Id Unique version of the Key in a Key Pool.
	Id KeyId `json:"id"`

	// Pool Unique UUID for a Key Pool.
	Pool KeyPoolId `json:"pool"`
}

// PageNumber Page number starting at 0.
type PageNumber = int

// PageSize Page number.
type PageSize = int

// KeyFilterId defines model for KeyFilterId.
type KeyFilterId = []KeyId

// KeyFilterKeyPoolId defines model for KeyFilterKeyPoolId.
type KeyFilterKeyPoolId = []KeyPoolId

// KeyFilterMaximumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyFilterMaximumGenerateDate = KeyGenerateDate

// KeyFilterMinimumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyFilterMinimumGenerateDate = KeyGenerateDate

// KeyFilterPageNumber Page number starting at 0.
type KeyFilterPageNumber = PageNumber

// KeyFilterPageSize Page number.
type KeyFilterPageSize = PageSize

// KeyFilterSorts defines model for KeyFilterSorts.
type KeyFilterSorts = []interface{}

// KeyPoolFilterAlgorithms defines model for KeyPoolFilterAlgorithms.
type KeyPoolFilterAlgorithms = []KeyPoolAlgorithm

// KeyPoolFilterIds defines model for KeyPoolFilterIds.
type KeyPoolFilterIds = []KeyPoolId

// KeyPoolFilterIsExportAllowed Indicates if the Key Pool supports export.
type KeyPoolFilterIsExportAllowed = KeyPoolIsExportAllowed

// KeyPoolFilterIsImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolFilterIsImportAllowed = KeyPoolIsImportAllowed

// KeyPoolFilterIsVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolFilterIsVersioningAllowed = KeyPoolIsVersioningAllowed

// KeyPoolFilterNames defines model for KeyPoolFilterNames.
type KeyPoolFilterNames = []KeyPoolName

// KeyPoolFilterPageNumber Page number starting at 0.
type KeyPoolFilterPageNumber = PageNumber

// KeyPoolFilterPageSize Page number.
type KeyPoolFilterPageSize = PageSize

// KeyPoolFilterProviders defines model for KeyPoolFilterProviders.
type KeyPoolFilterProviders = []KeyPoolProvider

// KeyPoolFilterSorts defines model for KeyPoolFilterSorts.
type KeyPoolFilterSorts = []string

// KeyPoolFilterStatuses defines model for KeyPoolFilterStatuses.
type KeyPoolFilterStatuses = []KeyPoolStatus

// HTTP400BadRequest defines model for HTTP400BadRequest.
type HTTP400BadRequest struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP401Unauthorized defines model for HTTP401Unauthorized.
type HTTP401Unauthorized struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP403Forbidden defines model for HTTP403Forbidden.
type HTTP403Forbidden struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP404NotFound defines model for HTTP404NotFound.
type HTTP404NotFound struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP429TooManyRequests defines model for HTTP429TooManyRequests.
type HTTP429TooManyRequests struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP500InternalServerError defines model for HTTP500InternalServerError.
type HTTP500InternalServerError struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP502BadGateway defines model for HTTP502BadGateway.
type HTTP502BadGateway struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP503ServiceUnavailable defines model for HTTP503ServiceUnavailable.
type HTTP503ServiceUnavailable struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP504GatewayTimeout defines model for HTTP504GatewayTimeout.
type HTTP504GatewayTimeout struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
