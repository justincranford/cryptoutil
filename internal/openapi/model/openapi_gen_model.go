// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package model

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for KeyPoolAlgorithm.
const (
	AES128 KeyPoolAlgorithm = "AES-128"
	AES192 KeyPoolAlgorithm = "AES-192"
	AES256 KeyPoolAlgorithm = "AES-256"
)

// Defines values for KeyPoolProvider.
const (
	Internal KeyPoolProvider = "Internal"
)

// Defines values for KeyPoolSort.
const (
	KeyPoolSortAlgorithmASC          KeyPoolSort = "algorithm:ASC"
	KeyPoolSortAlgorithmDESC         KeyPoolSort = "algorithm:DESC"
	KeyPoolSortExportAllowedASC      KeyPoolSort = "export_allowed:ASC"
	KeyPoolSortExportAllowedDESC     KeyPoolSort = "export_allowed:DESC"
	KeyPoolSortIdASC                 KeyPoolSort = "id:ASC"
	KeyPoolSortIdDESC                KeyPoolSort = "id:DESC"
	KeyPoolSortImportAllowedASC      KeyPoolSort = "import_allowed:ASC"
	KeyPoolSortImportAllowedDESC     KeyPoolSort = "import_allowed:DESC"
	KeyPoolSortNameASC               KeyPoolSort = "name:ASC"
	KeyPoolSortNameDESC              KeyPoolSort = "name:DESC"
	KeyPoolSortProviderASC           KeyPoolSort = "provider:ASC"
	KeyPoolSortProviderDESC          KeyPoolSort = "provider:DESC"
	KeyPoolSortStatusASC             KeyPoolSort = "status:ASC"
	KeyPoolSortStatusDESC            KeyPoolSort = "status:DESC"
	KeyPoolSortVersioningAllowedASC  KeyPoolSort = "versioning_allowed:ASC"
	KeyPoolSortVersioningAllowedDESC KeyPoolSort = "versioning_allowed:DESC"
)

// Defines values for KeyPoolStatus.
const (
	Active                         KeyPoolStatus = "active"
	Creating                       KeyPoolStatus = "creating"
	Disabled                       KeyPoolStatus = "disabled"
	FinishedDelete                 KeyPoolStatus = "finished_delete"
	GenerateFailed                 KeyPoolStatus = "generate_failed"
	ImportFailed                   KeyPoolStatus = "import_failed"
	PendingDeleteWasActive         KeyPoolStatus = "pending_delete_was_active"
	PendingDeleteWasDisabled       KeyPoolStatus = "pending_delete_was_disabled"
	PendingDeleteWasGenerateFailed KeyPoolStatus = "pending_delete_was_generate_failed"
	PendingDeleteWasImportFailed   KeyPoolStatus = "pending_delete_was_import_failed"
	PendingDeleteWasPendingImport  KeyPoolStatus = "pending_delete_was_pending_import"
	PendingGenerate                KeyPoolStatus = "pending_generate"
	PendingImport                  KeyPoolStatus = "pending_import"
	StartedDelete                  KeyPoolStatus = "started_delete"
)

// Defines values for KeySort.
const (
	KeySortGenerateDate     KeySort = "generate_date"
	KeySortGenerateDateASC  KeySort = "generate_date:ASC"
	KeySortGenerateDateDESC KeySort = "generate_date:DESC"
	KeySortId               KeySort = "id"
	KeySortIdASC            KeySort = "id:ASC"
	KeySortIdDESC           KeySort = "id:DESC"
	KeySortPool             KeySort = "pool"
	KeySortPoolASC          KeySort = "pool:ASC"
	KeySortPoolDESC         KeySort = "pool:DESC"
)

// Defines values for SymmetricCipherAlgorithm.
const (
	AESGCMDirectV1    SymmetricCipherAlgorithm = "AES-GCM-Direct-V1"
	AESGCMKeyWrapV1   SymmetricCipherAlgorithm = "AES-GCM-KeyWrap-V1"
	AESGCMSIVDirectV1 SymmetricCipherAlgorithm = "AES-GCM-SIV-Direct-V1"
)

// HTTPError defines model for HTTPError.
type HTTPError struct {
	// Error HTTP status message
	Error string `json:"error"`

	// Message Detailed error message
	Message string `json:"message"`

	// Status HTTP status code
	Status int `json:"status"`
}

// Key defines model for Key.
type Key struct {
	// GenerateDate ISO 8601 UTC timestamp of Key generation.
	GenerateDate *KeyGenerateDate `json:"generate_date,omitempty"`

	// Id Unique UUID for a Key.
	Id *KeyId `json:"id,omitempty"`

	// Pool Unique UUID for a Key Pool.
	Pool *KeyPoolId `json:"pool,omitempty"`
}

// KeyGenerate defines model for KeyGenerate.
type KeyGenerate = map[string]interface{}

// KeyGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyGenerateDate = time.Time

// KeyId Unique UUID for a Key.
type KeyId = openapi_types.UUID

// KeyPool defines model for KeyPool.
type KeyPool struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description *KeyPoolDescription `json:"description,omitempty"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`

	// Id Unique UUID for a Key Pool.
	Id *KeyPoolId `json:"id,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name *KeyPoolName `json:"name,omitempty"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// Status Status of the Key Pool.
	Status *KeyPoolStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolAlgorithm Cryptographic algorithm for the Key Pool.
type KeyPoolAlgorithm string

// KeyPoolCreate defines model for KeyPoolCreate.
type KeyPoolCreate struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeyPoolDescription Description for a Key Pool.
type KeyPoolDescription = string

// KeyPoolExportAllowed Indicates if the Key Pool supports export.
type KeyPoolExportAllowed = bool

// KeyPoolId Unique UUID for a Key Pool.
type KeyPoolId = openapi_types.UUID

// KeyPoolImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolImportAllowed = bool

// KeyPoolKeysQueryParams defines model for KeyPoolKeysQueryParams.
type KeyPoolKeysQueryParams struct {
	Id *[]KeyId `json:"id,omitempty"`

	// MaxGenerateDate ISO 8601 UTC timestamp of Key generation.
	MaxGenerateDate *KeyGenerateDate `json:"max_generate_date,omitempty"`

	// MinGenerateDate ISO 8601 UTC timestamp of Key generation.
	MinGenerateDate *KeyGenerateDate `json:"min_generate_date,omitempty"`

	// Page Page number starting at 0.
	Page *PageNumber `json:"page,omitempty"`

	// Size Page number.
	Size *PageSize  `json:"size,omitempty"`
	Sort *[]KeySort `json:"sort,omitempty"`
}

// KeyPoolName Friendly name for a Key Pool.
type KeyPoolName = string

// KeyPoolProvider Provider of the Key Pool management service.
type KeyPoolProvider string

// KeyPoolSort defines model for KeyPoolSort.
type KeyPoolSort string

// KeyPoolStatus Status of the Key Pool.
type KeyPoolStatus string

// KeyPoolUpdate defines model for KeyPoolUpdate.
type KeyPoolUpdate struct {
	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`
}

// KeyPoolVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolVersioningAllowed = bool

// KeyPoolsQueryParams defines model for KeyPoolsQueryParams.
type KeyPoolsQueryParams struct {
	Algorithm *[]KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// ExportAllowed Indicates if the Key Pool supports export.
	ExportAllowed *KeyPoolExportAllowed `json:"export_allowed,omitempty"`
	Id            *[]KeyPoolId          `json:"id,omitempty"`

	// ImportAllowed Indicates if the Key Pool supports import (BYOK).
	ImportAllowed *KeyPoolImportAllowed `json:"import_allowed,omitempty"`
	Name          *[]KeyPoolName        `json:"name,omitempty"`

	// Page Page number starting at 0.
	Page     *PageNumber        `json:"page,omitempty"`
	Provider *[]KeyPoolProvider `json:"provider,omitempty"`

	// Size Page number.
	Size   *PageSize        `json:"size,omitempty"`
	Sort   *[]KeyPoolSort   `json:"sort,omitempty"`
	Status *[]KeyPoolStatus `json:"status,omitempty"`

	// VersioningAllowed Indicates if the Key Pool supports versioning.
	VersioningAllowed *KeyPoolVersioningAllowed `json:"versioning_allowed,omitempty"`
}

// KeySort defines model for KeySort.
type KeySort string

// KeyUpdate defines model for KeyUpdate.
type KeyUpdate struct {
	// Id Unique UUID for a Key.
	Id KeyId `json:"id"`

	// Pool Unique UUID for a Key Pool.
	Pool KeyPoolId `json:"pool"`
}

// KeysQueryParams defines model for KeysQueryParams.
type KeysQueryParams struct {
	Id *[]KeyId `json:"id,omitempty"`

	// MaxGenerateDate ISO 8601 UTC timestamp of Key generation.
	MaxGenerateDate *KeyGenerateDate `json:"max_generate_date,omitempty"`

	// MinGenerateDate ISO 8601 UTC timestamp of Key generation.
	MinGenerateDate *KeyGenerateDate `json:"min_generate_date,omitempty"`

	// Page Page number starting at 0.
	Page *PageNumber  `json:"page,omitempty"`
	Pool *[]KeyPoolId `json:"pool,omitempty"`

	// Size Page number.
	Size *PageSize  `json:"size,omitempty"`
	Sort *[]KeySort `json:"sort,omitempty"`
}

// PageNumber Page number starting at 0.
type PageNumber = int

// PageSize Page number.
type PageSize = int

// SymmetricCipherAdditionalAuthenticatedData Base64URL-encoded Additional Authenticated Data (AAD). This is non-secret data used for authentication and integrity checking during decryption (e.g. namespace, context).
type SymmetricCipherAdditionalAuthenticatedData = string

// SymmetricCipherAlgorithm Optional encryption algorithm. Defaults to `AES-GCM-KeyWrap-V1`. - `AES-GCM-KeyWrap-V1`: randomized envelope encryption (default) for large, non-searchable values such as file contents, clobs, blobs, etc. - `AES-GCM-Direct-V1`: randomized direct encryption, for small, non-searchable values such as encryption keys, signing keys, deriving keys, etc. - `AES-GCM-SIV-Direct-V1`: deterministic direct encryption (aka convergent) for small, searchable values such as IDs or attributes, including usernames, names, numbers, and PII (Personally Identifiable Information).
type SymmetricCipherAlgorithm string

// SymmetricCipherInitializationVector Base64URL-encoded Nonce (e.g. 12-bytes AES-GCM or AES-GCM-SIV) or Initialization Vector (e.g. 16-bytes AES-CBC). This is non-secret data used for encryption/decryption, as well as authentication and integrity checking during decryption (e.g. namespace, context).
type SymmetricCipherInitializationVector = string

// SymmetricDecryptRequest Base64Url-encoded JSON Web Encryption (JWE) of the encrypted bytes (and non-secret cipher parameters) in compact serialized format. See RFC 7516 JSON Web Encryption (JWE) for more details. Compact serialized format is 'Header.EncryptedKey.IV.Ciphertext.AuthenticationTag'. There are five Base64Url-encoded parts and separated by '.'. Some parts can be empty depending on the 'alg' and 'enc' headers parameters. - Header: Required base64Url-encoded JSON key/values for the JWE. - EncryptedKey: Optional base64Url-encoded JWE of an encrypted symmetric key used to encrypt the payload. This is non-empty for envelope encryption (e.g. alg=a256gcmkw), or empty for direct encryption (e.g. alg=dir). - IV: Required base64Url-encoded Initialization Vector (IV) used for encryption. For AES-GCM or AES-GCM-SIV it contains a 12-bytes nonce. - Ciphertext: Required base64Url-encoded encrypted secret bytes. It is always non-empty. For AES-GCM or AES-GCM-SIV it contains same number of bytes as the plaintext. - AuthenticationTag: Required base64Url-encoded authentication tag used for encryption. For AES-GCM or AES-GCM-SIV it contains a 16-bytes authentication tag.
type SymmetricDecryptRequest = string

// SymmetricDecryptResponse Base64Url-encoded clear secret bytes that were decrypted.
type SymmetricDecryptResponse = string

// SymmetricEncryptParams defines model for SymmetricEncryptParams.
type SymmetricEncryptParams struct {
	// Aad Base64URL-encoded Additional Authenticated Data (AAD). This is non-secret data used for authentication and integrity checking during decryption (e.g. namespace, context).
	Aad *SymmetricCipherAdditionalAuthenticatedData `json:"aad,omitempty"`

	// Alg Optional encryption algorithm. Defaults to `AES-GCM-KeyWrap-V1`. - `AES-GCM-KeyWrap-V1`: randomized envelope encryption (default) for large, non-searchable values such as file contents, clobs, blobs, etc. - `AES-GCM-Direct-V1`: randomized direct encryption, for small, non-searchable values such as encryption keys, signing keys, deriving keys, etc. - `AES-GCM-SIV-Direct-V1`: deterministic direct encryption (aka convergent) for small, searchable values such as IDs or attributes, including usernames, names, numbers, and PII (Personally Identifiable Information).
	Alg *SymmetricCipherAlgorithm `json:"alg,omitempty"`

	// Iv Base64URL-encoded Nonce (e.g. 12-bytes AES-GCM or AES-GCM-SIV) or Initialization Vector (e.g. 16-bytes AES-CBC). This is non-secret data used for encryption/decryption, as well as authentication and integrity checking during decryption (e.g. namespace, context).
	Iv *SymmetricCipherInitializationVector `json:"iv,omitempty"`
}

// SymmetricEncryptRequest Base64Url-encoded clear secret bytes to be encrypted.
type SymmetricEncryptRequest = string

// SymmetricEncryptResponse Base64Url-encoded JSON Web Encryption (JWE) of the encrypted bytes (and non-secret cipher parameters) in compact serialized format. See RFC 7516 JSON Web Encryption (JWE) for more details. Compact serialized format is 'Header.EncryptedKey.IV.Ciphertext.AuthenticationTag'. There are five Base64Url-encoded parts and separated by '.'. Some parts can be empty depending on the 'alg' and 'enc' headers parameters. - Header: Required base64Url-encoded JSON key/values for the JWE. - EncryptedKey: Optional base64Url-encoded JWE of an encrypted symmetric key used to encrypt the payload. This is non-empty for envelope encryption (e.g. alg=a256gcmkw), or empty for direct encryption (e.g. alg=dir). - IV: Required base64Url-encoded Initialization Vector (IV) used for encryption. For AES-GCM or AES-GCM-SIV it contains a 12-bytes nonce. - Ciphertext: Required base64Url-encoded encrypted secret bytes. It is always non-empty. For AES-GCM or AES-GCM-SIV it contains same number of bytes as the plaintext. - AuthenticationTag: Required base64Url-encoded authentication tag used for encryption. For AES-GCM or AES-GCM-SIV it contains a 16-bytes authentication tag.
type SymmetricEncryptResponse = string

// KeyPoolQueryParamAlgorithms defines model for KeyPoolQueryParamAlgorithms.
type KeyPoolQueryParamAlgorithms = []KeyPoolAlgorithm

// KeyPoolQueryParamExportAllowed Indicates if the Key Pool supports export.
type KeyPoolQueryParamExportAllowed = KeyPoolExportAllowed

// KeyPoolQueryParamIds defines model for KeyPoolQueryParamIds.
type KeyPoolQueryParamIds = []KeyPoolId

// KeyPoolQueryParamImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolQueryParamImportAllowed = KeyPoolImportAllowed

// KeyPoolQueryParamNames defines model for KeyPoolQueryParamNames.
type KeyPoolQueryParamNames = []KeyPoolName

// KeyPoolQueryParamPageNumber Page number starting at 0.
type KeyPoolQueryParamPageNumber = PageNumber

// KeyPoolQueryParamPageSize Page number.
type KeyPoolQueryParamPageSize = PageSize

// KeyPoolQueryParamProviders defines model for KeyPoolQueryParamProviders.
type KeyPoolQueryParamProviders = []KeyPoolProvider

// KeyPoolQueryParamSorts defines model for KeyPoolQueryParamSorts.
type KeyPoolQueryParamSorts = []KeyPoolSort

// KeyPoolQueryParamStatuses defines model for KeyPoolQueryParamStatuses.
type KeyPoolQueryParamStatuses = []KeyPoolStatus

// KeyPoolQueryParamVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolQueryParamVersioningAllowed = KeyPoolVersioningAllowed

// KeyQueryParamIds defines model for KeyQueryParamIds.
type KeyQueryParamIds = []KeyId

// KeyQueryParamKeyPoolIds defines model for KeyQueryParamKeyPoolIds.
type KeyQueryParamKeyPoolIds = []KeyPoolId

// KeyQueryParamMaximumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyQueryParamMaximumGenerateDate = KeyGenerateDate

// KeyQueryParamMinimumGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyQueryParamMinimumGenerateDate = KeyGenerateDate

// KeyQueryParamPageNumber Page number starting at 0.
type KeyQueryParamPageNumber = PageNumber

// KeyQueryParamPageSize Page number.
type KeyQueryParamPageSize = PageSize

// KeyQueryParamSorts defines model for KeyQueryParamSorts.
type KeyQueryParamSorts = []KeySort

// HTTP400BadRequest defines model for HTTP400BadRequest.
type HTTP400BadRequest struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP401Unauthorized defines model for HTTP401Unauthorized.
type HTTP401Unauthorized struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP403Forbidden defines model for HTTP403Forbidden.
type HTTP403Forbidden struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP404NotFound defines model for HTTP404NotFound.
type HTTP404NotFound struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP429TooManyRequests defines model for HTTP429TooManyRequests.
type HTTP429TooManyRequests struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP500InternalServerError defines model for HTTP500InternalServerError.
type HTTP500InternalServerError struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP502BadGateway defines model for HTTP502BadGateway.
type HTTP502BadGateway struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP503ServiceUnavailable defines model for HTTP503ServiceUnavailable.
type HTTP503ServiceUnavailable struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP504GatewayTimeout defines model for HTTP504GatewayTimeout.
type HTTP504GatewayTimeout struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//86cO8310YAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
