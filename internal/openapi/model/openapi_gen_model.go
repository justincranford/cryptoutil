// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package model

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for KeyPoolAlgorithm.
const (
	AES128 KeyPoolAlgorithm = "AES-128"
	AES192 KeyPoolAlgorithm = "AES-192"
	AES256 KeyPoolAlgorithm = "AES-256"
)

// Defines values for KeyPoolProvider.
const (
	Internal KeyPoolProvider = "Internal"
)

// Defines values for KeyPoolStatus.
const (
	Active          KeyPoolStatus = "active"
	Disabled        KeyPoolStatus = "disabled"
	PendingGenerate KeyPoolStatus = "pending_generate"
	PendingImport   KeyPoolStatus = "pending_import"
)

// HTTPError defines model for HTTPError.
type HTTPError struct {
	// Error HTTP status message
	Error string `json:"error"`

	// Message Detailed error message
	Message string `json:"message"`

	// Status HTTP status code
	Status int `json:"status"`
}

// Key defines model for Key.
type Key struct {
	// GenerateDate ISO 8601 UTC timestamp of Key generation.
	GenerateDate *KeyGenerateDate `json:"generateDate,omitempty"`

	// KeyId Unique version of the Key in a Key Pool.
	KeyId *KeyId `json:"key_id,omitempty"`

	// KeyPoolId Unique UUID for a Key Pool.
	KeyPoolId *KeyPoolId `json:"key_pool_id,omitempty"`
}

// KeyGenerate defines model for KeyGenerate.
type KeyGenerate = map[string]interface{}

// KeyGenerateDate ISO 8601 UTC timestamp of Key generation.
type KeyGenerateDate = time.Time

// KeyId Unique version of the Key in a Key Pool.
type KeyId = int

// KeyPool defines model for KeyPool.
type KeyPool struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description *KeyPoolDescription `json:"description,omitempty"`

	// Id Unique UUID for a Key Pool.
	Id *KeyPoolId `json:"id,omitempty"`

	// IsExportAllowed Indicates if the Key Pool supports export.
	IsExportAllowed *KeyPoolIsExportAllowed `json:"isExportAllowed,omitempty"`

	// IsImportAllowed Indicates if the Key Pool supports import (BYOK).
	IsImportAllowed *KeyPoolIsImportAllowed `json:"isImportAllowed,omitempty"`

	// IsVersioningAllowed Indicates if the Key Pool supports versioning.
	IsVersioningAllowed *KeyPoolIsVersioningAllowed `json:"isVersioningAllowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name *KeyPoolName `json:"name,omitempty"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`

	// Status Status of the Key.
	Status *KeyPoolStatus `json:"status,omitempty"`
}

// KeyPoolAlgorithm Cryptographic algorithm for the Key Pool.
type KeyPoolAlgorithm string

// KeyPoolCreate defines model for KeyPoolCreate.
type KeyPoolCreate struct {
	// Algorithm Cryptographic algorithm for the Key Pool.
	Algorithm *KeyPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// IsExportAllowed Indicates if the Key Pool supports export.
	IsExportAllowed *KeyPoolIsExportAllowed `json:"isExportAllowed,omitempty"`

	// IsImportAllowed Indicates if the Key Pool supports import (BYOK).
	IsImportAllowed *KeyPoolIsImportAllowed `json:"isImportAllowed,omitempty"`

	// IsVersioningAllowed Indicates if the Key Pool supports versioning.
	IsVersioningAllowed *KeyPoolIsVersioningAllowed `json:"isVersioningAllowed,omitempty"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`

	// Provider Provider of the Key Pool management service.
	Provider *KeyPoolProvider `json:"provider,omitempty"`
}

// KeyPoolDescription Description for a Key Pool.
type KeyPoolDescription = string

// KeyPoolId Unique UUID for a Key Pool.
type KeyPoolId = openapi_types.UUID

// KeyPoolIsExportAllowed Indicates if the Key Pool supports export.
type KeyPoolIsExportAllowed = bool

// KeyPoolIsImportAllowed Indicates if the Key Pool supports import (BYOK).
type KeyPoolIsImportAllowed = bool

// KeyPoolIsVersioningAllowed Indicates if the Key Pool supports versioning.
type KeyPoolIsVersioningAllowed = bool

// KeyPoolName Friendly name for a Key Pool.
type KeyPoolName = string

// KeyPoolProvider Provider of the Key Pool management service.
type KeyPoolProvider string

// KeyPoolStatus Status of the Key.
type KeyPoolStatus string

// KeyPoolUpdate defines model for KeyPoolUpdate.
type KeyPoolUpdate struct {
	// Description Description for a Key Pool.
	Description KeyPoolDescription `json:"description"`

	// Name Friendly name for a Key Pool.
	Name KeyPoolName `json:"name"`
}

// KeyUpdate defines model for KeyUpdate.
type KeyUpdate struct {
	// KeyPoolId Unique UUID for a Key Pool.
	KeyPoolId KeyPoolId `json:"key_pool_id"`

	// KeyVersion Unique version of the Key in a Key Pool.
	KeyVersion KeyId `json:"key_version"`
}

// QueryParamFilter Filter criteria in the format 'field=value'. Supported operators are '=', '!=', '>', '<', '>=', '<='
type QueryParamFilter = string

// QueryParamPage Paging criteria in the format 'pageNumber:pageSize' or 'pageNumber'; pageNumber is 0 offset.
type QueryParamPage = string

// QueryParamSort Sort criteria in the format 'field:direction' or 'field'. Values for direction are ASC or DESC. If omitted, it defaults to ASC.
type QueryParamSort = string

// HTTP400BadRequest defines model for HTTP400BadRequest.
type HTTP400BadRequest struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP401Unauthorized defines model for HTTP401Unauthorized.
type HTTP401Unauthorized struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP403Forbidden defines model for HTTP403Forbidden.
type HTTP403Forbidden struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP404NotFound defines model for HTTP404NotFound.
type HTTP404NotFound struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP429TooManyRequests defines model for HTTP429TooManyRequests.
type HTTP429TooManyRequests struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP500InternalServerError defines model for HTTP500InternalServerError.
type HTTP500InternalServerError struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP502BadGateway defines model for HTTP502BadGateway.
type HTTP502BadGateway struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP503ServiceUnavailable defines model for HTTP503ServiceUnavailable.
type HTTP503ServiceUnavailable struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// HTTP504GatewayTimeout defines model for HTTP504GatewayTimeout.
type HTTP504GatewayTimeout struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"gS021Cw1GYs8STb/CwAA//+Emj8c0SAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
