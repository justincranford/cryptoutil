# https://raw.githubusercontent.com/OAI/OpenAPI-Specification/refs/heads/main/schemas/v3.1/schema.yaml
openapi: 3.0.3
info:
  title: API
  version: "0.0.1"
  description: >
    Crypto REST API

components:
  parameters:
    KeyPoolQueryParamIds:
      name: id
      in: query
      description: Filter by the Key Pool ID (UUID).
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/KeyPoolId'
      style: form
      explode: true
    KeyPoolQueryParamNames:
      name: name
      in: query
      description: Filter by the Key Pool name.
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/KeyPoolName'
      style: form
      explode: true
    KeyPoolQueryParamProviders:
      name: provider
      in: query
      description: Filter by Key Pool provider.
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/KeyPoolProvider'
      style: form
      explode: true
    KeyPoolQueryParamAlgorithms:
      name: algorithm
      in: query
      description: Filter by cryptographic algorithm.
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/KeyPoolAlgorithm'
      style: form
      explode: true
    KeyPoolQueryParamVersioningAllowed:
      name: versioning_allowed
      in: query
      description: Filter by whether versioning is allowed.
      required: false
      schema:
        $ref: '#/components/schemas/KeyPoolVersioningAllowed'
    KeyPoolQueryParamImportAllowed:
      name: import_allowed
      in: query
      description: Filter by whether import is allowed.
      required: false
      schema:
        $ref: '#/components/schemas/KeyPoolImportAllowed'
    KeyPoolQueryParamExportAllowed:
      name: export_allowed
      in: query
      description: Filter by whether export is allowed.
      required: false
      schema:
        $ref: '#/components/schemas/KeyPoolExportAllowed'
    KeyPoolQueryParamStatuses:
      name: status
      in: query
      description: Filter by the Key Pool status.
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/KeyPoolStatus'
      style: form
      explode: true
    KeyPoolQueryParamSorts:
      name: sort
      in: query
      description: Specify sorting as `fieldName:direction` (e.g., `name:asc`). Repeat parameter for multiple sort fields.
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/KeyPoolSort'
      style: form
      explode: true
    KeyPoolQueryParamPageNumber:
      name: page
      in: query
      schema:
        $ref: '#/components/schemas/PageNumber'
    KeyPoolQueryParamPageSize:
      name: size
      in: query
      schema:
        $ref: '#/components/schemas/PageSize'

    KeyQueryParamKeyPoolIds:
      name: pool
      in: query
      description: Filter by the Key Pool ID (uuid).
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/KeyPoolId'
      style: form
      explode: true
    KeyQueryParamIds:
      name: id
      in: query
      description: Filter by the Key ID.
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/KeyId'
      style: form
      explode: true
    KeyQueryParamMinimumGenerateDate:
      name: min_generate_date
      in: query
      description: Filter by the Key minimum generate date (inclusive).
      required: false
      schema:
        $ref: '#/components/schemas/KeyGenerateDate'
    KeyQueryParamMaximumGenerateDate:
      name: max_generate_date
      in: query
      description: Filter by the Key maximum generate date (inclusive).
      required: false
      schema:
        $ref: '#/components/schemas/KeyGenerateDate'
    KeyQueryParamSorts:
      name: sort
      in: query
      description: Specify sorting as `fieldName:direction` (e.g., `id:asc`). Repeat parameter for multiple sort fields.
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/KeySort'
      style: form
      explode: true
    KeyQueryParamPageNumber:
      name: page
      in: query
      schema:
        $ref: '#/components/schemas/PageNumber'
    KeyQueryParamPageSize:
      name: size
      in: query
      schema:
        $ref: '#/components/schemas/PageSize'

  schemas:
    PageNumber:
      type: integer
      description: Page number starting at 0.
      minimum: 0
      example: 0
    PageSize:
      type: integer
      description: Page number.
      minimum: 2
      maximum: 50
      example: 25

    KeyPoolCreate:
      type: object
      required: [ name, description ]
      properties:
        name:
          $ref: '#/components/schemas/KeyPoolName'
        description:
          $ref: '#/components/schemas/KeyPoolDescription'
        algorithm:
          $ref: '#/components/schemas/KeyPoolAlgorithm'
        provider:
          $ref: '#/components/schemas/KeyPoolProvider'
        versioning_allowed:
          $ref: '#/components/schemas/KeyPoolVersioningAllowed'
        import_allowed:
          $ref: '#/components/schemas/KeyPoolImportAllowed'
        export_allowed:
          $ref: '#/components/schemas/KeyPoolExportAllowed'

    KeyPool:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/KeyPoolId'
        name:
          $ref: '#/components/schemas/KeyPoolName'
        description:
          $ref: '#/components/schemas/KeyPoolDescription'
        provider:
          $ref: '#/components/schemas/KeyPoolProvider'
        algorithm:
          $ref: '#/components/schemas/KeyPoolAlgorithm'
        versioning_allowed:
          $ref: '#/components/schemas/KeyPoolVersioningAllowed'
        import_allowed:
          $ref: '#/components/schemas/KeyPoolImportAllowed'
        export_allowed:
          $ref: '#/components/schemas/KeyPoolExportAllowed'
        status:
          $ref: '#/components/schemas/KeyPoolStatus'

    KeyPoolUpdate:
      type: object
      required: [ name, description ]
      properties:
        name:
          $ref: '#/components/schemas/KeyPoolName'
        description:
          $ref: '#/components/schemas/KeyPoolDescription'

    KeyGenerate:
      type: object
      additionalProperties: false

    KeyUpdate:
      type: object
      required: [ pool, id ]
      properties:
        pool:
          $ref: '#/components/schemas/KeyPoolId'
        id:
          $ref: '#/components/schemas/KeyId'

    Key:
      type: object
      properties:
        pool:
          $ref: '#/components/schemas/KeyPoolId'
        id:
          $ref: '#/components/schemas/KeyId'
        generate_date:
          $ref: '#/components/schemas/KeyGenerateDate'

    KeyPoolId:
      type: string
      format: uuid
      description: Unique UUID for a Key Pool.
    KeyPoolName:
      type: string
      description: Friendly name for a Key Pool.
      example: Payroll Database
      minLength: 1
      maxLength: 63
    KeyPoolDescription:
      type: string
      description: Description for a Key Pool.
      example: This Key Pool is used to encrypt the Payroll Database
      minLength: 1
      maxLength: 255
    KeyPoolAlgorithm:
      type: string
      enum: [ AES-256, AES-192, AES-128 ]
      example: "AES-256"
      description: Cryptographic algorithm for the Key Pool.
    KeyPoolProvider:
      type: string
      enum: [ Internal ]
      example: "Internal"
      description: Provider of the Key Pool management service.
    KeyPoolVersioningAllowed:
      type: boolean
      example: true
      description: Indicates if the Key Pool supports versioning.
    KeyPoolImportAllowed:
      type: boolean
      example: false
      description: Indicates if the Key Pool supports import (BYOK).
    KeyPoolExportAllowed:
      type: boolean
      example: false
      description: Indicates if the Key Pool supports export.
    KeyPoolStatus:
      type: string
      enum:
        - creating
        - import_failed
        - pending_import
        - pending_generate
        - generate_failed
        - active
        - disabled
        - pending_delete_was_import_failed
        - pending_delete_was_pending_import
        - pending_delete_was_active
        - pending_delete_was_disabled
        - pending_delete_was_generate_failed
        - started_delete
        - finished_delete
      example: "creating"
      description: Status of the Key Pool.
    KeyPoolSort:
      type: string
      enum:
        - id:ASC
        - id:DESC
        - name:ASC
        - name:DESC
        - provider:ASC
        - provider:DESC
        - algorithm:ASC
        - algorithm:DESC
        - versioning_allowed:ASC
        - versioning_allowed:DESC
        - import_allowed:ASC
        - import_allowed:DESC
        - export_allowed:ASC
        - export_allowed:DESC
        - status:ASC
        - status:DESC

    KeyId:
      type: string
      format: uuid
      description: Unique UUID for a Key.
    KeyGenerateDate:
      type: string
      format: date-time
      example: "2025-03-14T12:00:00Z"
      description: ISO 8601 UTC timestamp of Key generation.
    KeySort:
      type: string
      enum:
        - pool
        - pool:ASC
        - pool:DESC
        - id
        - id:ASC
        - id:DESC
        - generate_date
        - generate_date:ASC
        - generate_date:DESC

    SymmetricCipherInitializationVector:
      type: string
      pattern: '^[A-Za-z0-9_-]+$'
      description: Base64URL-encoded Nonce (e.g. 12-bytes AES-GCM or AES-GCM-SIV) or Initialization Vector (e.g. 16-bytes AES-CBC). This is non-secret data used for encryption/decryption, as well as authentication and integrity checking during decryption (e.g. namespace, context).
    SymmetricCipherAdditionalAuthenticatedData:
      type: string
      pattern: '^[A-Za-z0-9_-]+$'
      description: Base64URL-encoded Additional Authenticated Data (AAD). This is non-secret data used for authentication and integrity checking during decryption (e.g. namespace, context).
    SymmetricCipherAlgorithm:
      type: string
      enum: [ AES-GCM-KeyWrap-V1, AES-GCM-Direct-V1, AES-GCM-SIV-Direct-V1 ]
      default:  AES-GCM-KeyWrap-V1
      description: >
        Optional encryption algorithm. Defaults to `AES-GCM-KeyWrap-V1`.
        - `AES-GCM-KeyWrap-V1`: randomized envelope encryption (default) for large, non-searchable values such as file contents, clobs, blobs, etc.
        - `AES-GCM-Direct-V1`: randomized direct encryption, for small, non-searchable values such as encryption keys, signing keys, deriving keys, etc.
        - `AES-GCM-SIV-Direct-V1`: deterministic direct encryption (aka convergent) for small, searchable values such as IDs or attributes, including usernames, names, numbers, and PII (Personally Identifiable Information).

    KeyPoolsQueryParams:
      type: object
      properties:
        id:
          type: array
          items:
            $ref: '#/components/schemas/KeyPoolId'
        name:
          type: array
          items:
            $ref: '#/components/schemas/KeyPoolName'
        provider:
          type: array
          items:
            $ref: '#/components/schemas/KeyPoolProvider'
        algorithm:
          type: array
          items:
            $ref: '#/components/schemas/KeyPoolAlgorithm'
        versioning_allowed:
          $ref: '#/components/schemas/KeyPoolVersioningAllowed'
        import_allowed:
          $ref: '#/components/schemas/KeyPoolImportAllowed'
        export_allowed:
          $ref: '#/components/schemas/KeyPoolExportAllowed'
        status:
          type: array
          items:
            $ref: '#/components/schemas/KeyPoolStatus'
        sort:
          type: array
          items:
            $ref: '#/components/schemas/KeyPoolSort'
        page:
          $ref: '#/components/schemas/PageNumber'
        size:
          $ref: '#/components/schemas/PageSize'

    KeyPoolKeysQueryParams:
      type: object
      properties:
        id:
          type: array
          items:
            $ref: '#/components/schemas/KeyId'
        min_generate_date:
          $ref: '#/components/schemas/KeyGenerateDate'
        max_generate_date:
          $ref: '#/components/schemas/KeyGenerateDate'
        sort:
          type: array
          items:
            $ref: '#/components/schemas/KeySort'
        page:
          $ref: '#/components/schemas/PageNumber'
        size:
          $ref: '#/components/schemas/PageSize'

    KeysQueryParams:
      type: object
      properties:
        pool:
          type: array
          items:
            $ref: '#/components/schemas/KeyPoolId'
        id:
          type: array
          items:
            $ref: '#/components/schemas/KeyId'
        min_generate_date:
          $ref: '#/components/schemas/KeyGenerateDate'
        max_generate_date:
          $ref: '#/components/schemas/KeyGenerateDate'
        sort:
          type: array
          items:
            $ref: '#/components/schemas/KeySort'
        page:
          $ref: '#/components/schemas/PageNumber'
        size:
          $ref: '#/components/schemas/PageSize'

    SymmetricEncryptParams:
      type: object
      properties:
        iv:
          $ref: '#/components/schemas/SymmetricCipherInitializationVector'
        aad:
          $ref: '#/components/schemas/SymmetricCipherAdditionalAuthenticatedData'
        alg:
          $ref: '#/components/schemas/SymmetricCipherAlgorithm'

    SymmetricEncryptRequest:
      type: string
      pattern: '^[A-Za-z0-9_-]+$'
      description: Base64Url-encoded clear secret bytes to be encrypted.
    SymmetricEncryptResponse:
      type: string
      pattern: '^[A-Za-z0-9_-]+\.[A-Za-z0-9_-]*\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+$'
      description: >
        Base64Url-encoded JSON Web Encryption (JWE) of the encrypted bytes (and non-secret cipher parameters) in compact serialized format. See RFC 7516 JSON Web Encryption (JWE) for more details.
        Compact serialized format is 'Header.EncryptedKey.IV.Ciphertext.AuthenticationTag'. There are five Base64Url-encoded parts and separated by '.'. Some parts can be empty depending on the 'alg' and 'enc' headers parameters.
        - Header: Required base64Url-encoded JSON key/values for the JWE.
        - EncryptedKey: Optional base64Url-encoded JWE of an encrypted symmetric key used to encrypt the payload. This is non-empty for envelope encryption (e.g. alg=a256gcmkw), or empty for direct encryption (e.g. alg=dir).
        - IV: Required base64Url-encoded Initialization Vector (IV) used for encryption. For AES-GCM or AES-GCM-SIV it contains a 12-bytes nonce.
        - Ciphertext: Required base64Url-encoded encrypted secret bytes. It is always non-empty. For AES-GCM or AES-GCM-SIV it contains same number of bytes as the plaintext.
        - AuthenticationTag: Required base64Url-encoded authentication tag used for encryption. For AES-GCM or AES-GCM-SIV it contains a 16-bytes authentication tag.
    SymmetricDecryptRequest:
      type: string
      pattern: '^[A-Za-z0-9_-]+\.[A-Za-z0-9_-]*\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+$'
      description: >
        Base64Url-encoded JSON Web Encryption (JWE) of the encrypted bytes (and non-secret cipher parameters) in compact serialized format. See RFC 7516 JSON Web Encryption (JWE) for more details.
        Compact serialized format is 'Header.EncryptedKey.IV.Ciphertext.AuthenticationTag'. There are five Base64Url-encoded parts and separated by '.'. Some parts can be empty depending on the 'alg' and 'enc' headers parameters.
        - Header: Required base64Url-encoded JSON key/values for the JWE.
        - EncryptedKey: Optional base64Url-encoded JWE of an encrypted symmetric key used to encrypt the payload. This is non-empty for envelope encryption (e.g. alg=a256gcmkw), or empty for direct encryption (e.g. alg=dir).
        - IV: Required base64Url-encoded Initialization Vector (IV) used for encryption. For AES-GCM or AES-GCM-SIV it contains a 12-bytes nonce.
        - Ciphertext: Required base64Url-encoded encrypted secret bytes. It is always non-empty. For AES-GCM or AES-GCM-SIV it contains same number of bytes as the plaintext.
        - AuthenticationTag: Required base64Url-encoded authentication tag used for encryption. For AES-GCM or AES-GCM-SIV it contains a 16-bytes authentication tag.
    SymmetricDecryptResponse:
      type: string
      pattern: '^[A-Za-z0-9_-]+$'
      description: Base64Url-encoded clear secret bytes that were decrypted.

    HTTPError:
      type: object
      required: [ status, error, message ]
      properties:
        status:
          type: integer
          description: HTTP status code
          minimum: 400
          maximum: 599
        error:
          type: string
          description: HTTP status message
          minLength: 1
        message:
          type: string
          description: Detailed error message
          minLength: 1

  responses:
    HTTP400BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/HTTPError'
              - type: object
                properties:
                  status:
                    type: integer
                    example: 400
                    minimum: 400
                    maximum: 400
                  error:
                    type: string
                    example: "Bad Request"
                  message:
                    type: string
                    example: "The request could not be understood or was missing required parameters."

    HTTP401Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/HTTPError'
              - type: object
                properties:
                  status:
                    type: integer
                    example: 401
                    minimum: 401
                    maximum: 401
                  error:
                    type: string
                    example: "Unauthorized"
                  message:
                    type: string
                    example: "Authentication failed or user does not have permissions for the desired action."

    HTTP403Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/HTTPError'
              - type: object
                properties:
                  status:
                    type: integer
                    example: 403
                    minimum: 403
                    maximum: 403
                  error:
                    type: string
                    example: "Forbidden"
                  message:
                    type: string
                    example: "Authentication succeeded but the authenticated user does not have access to the resource."

    HTTP404NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/HTTPError'
              - type: object
                properties:
                  status:
                    type: integer
                    example: 404
                    minimum: 404
                    maximum: 404
                  error:
                    type: string
                    example: "Not Found"
                  message:
                    type: string
                    example: "The requested resource could not be found."

    HTTP429TooManyRequests:
      description: Too Many Requests
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/HTTPError'
              - type: object
                properties:
                  status:
                    type: integer
                    example: 429
                    minimum: 429
                    maximum: 429
                  error:
                    type: string
                    example: "Too Many Requests"
                  message:
                    type: string
                    example: "You have sent too many requests in a given amount of time."

    HTTP500InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/HTTPError'
              - type: object
                properties:
                  status:
                    type: integer
                    example: 500
                    minimum: 500
                    maximum: 500
                  error:
                    type: string
                    example: "Internal Server Error"
                  message:
                    type: string
                    example: "An unexpected error occurred on the server."

    HTTP502BadGateway:
      description: Bad Gateway
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/HTTPError'
              - type: object
                properties:
                  status:
                    type: integer
                    example: 502
                    minimum: 502
                    maximum: 502
                  error:
                    type: string
                    example: "Bad Gateway"
                  message:
                    type: string
                    example: "The server received an invalid response from the upstream server."

    HTTP503ServiceUnavailable:
      description: Service Unavailable
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/HTTPError'
              - type: object
                properties:
                  status:
                    type: integer
                    example: 503
                    minimum: 503
                    maximum: 503
                  error:
                    type: string
                    example: "Service Unavailable"
                  message:
                    type: string
                    example: "The server is currently unable to handle the request due to temporary overload or maintenance."

    HTTP504GatewayTimeout:
      description: Gateway Timeout
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/HTTPError'
              - type: object
                properties:
                  status:
                    type: integer
                    example: 504
                    minimum: 504
                    maximum: 504
                  error:
                    type: string
                    example: "Gateway Timeout"
                  message:
                    type: string
                    example: "The server did not receive a timely response from the upstream server."
