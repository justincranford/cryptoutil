// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// Defines values for KEKPoolAlgorithm.
const (
	AES128 KEKPoolAlgorithm = "AES-128"
	AES192 KEKPoolAlgorithm = "AES-192"
	AES256 KEKPoolAlgorithm = "AES-256"
)

// Defines values for KEKPoolProvider.
const (
	Internal KEKPoolProvider = "Internal"
)

// Defines values for KEKPoolStatus.
const (
	Active          KEKPoolStatus = "active"
	Disabled        KEKPoolStatus = "disabled"
	PendingGenerate KEKPoolStatus = "pending_generate"
	PendingImport   KEKPoolStatus = "pending_import"
)

// HTTPError defines model for HTTPError.
type HTTPError struct {
	// Error Error message
	Error *string `json:"error,omitempty"`
}

// KEK defines model for KEK.
type KEK struct {
	// GenerateDate ISO 8601 UTC timestamp of KEK generation.
	GenerateDate *KEKGenerateDate `json:"generateDate,omitempty"`

	// KekId Unique version of the KEK in a KEK Pool.
	KekId *KEKId `json:"kek_id,omitempty"`

	// KekPoolId Unique base64 url-encoded identifier for a KEK Pool.
	KekPoolId *KEKPoolId `json:"kek_pool_id,omitempty"`
}

// KEKGenerate defines model for KEKGenerate.
type KEKGenerate = map[string]interface{}

// KEKGenerateDate ISO 8601 UTC timestamp of KEK generation.
type KEKGenerateDate = time.Time

// KEKId Unique version of the KEK in a KEK Pool.
type KEKId = int

// KEKPool defines model for KEKPool.
type KEKPool struct {
	// Algorithm Cryptographic algorithm for the KEK Pool.
	Algorithm *KEKPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a KEK Pool.
	Description *KEKPoolDescription `json:"description,omitempty"`

	// Id Unique base64 url-encoded identifier for a KEK Pool.
	Id *KEKPoolId `json:"id,omitempty"`

	// IsExportAllowed Indicates if the KEK Pool supports export.
	IsExportAllowed *KEKPoolIsExportAllowed `json:"isExportAllowed,omitempty"`

	// IsImportAllowed Indicates if the KEK Pool supports import (BYOK).
	IsImportAllowed *KEKPoolIsImportAllowed `json:"isImportAllowed,omitempty"`

	// IsVersioningAllowed Indicates if the KEK Pool supports versioning.
	IsVersioningAllowed *KEKPoolIsVersioningAllowed `json:"isVersioningAllowed,omitempty"`

	// Name Friendly name for a KEK Pool.
	Name *KEKPoolName `json:"name,omitempty"`

	// Provider Provider of the KEK Pool management service.
	Provider *KEKPoolProvider `json:"provider,omitempty"`

	// Status Status of the KEK.
	Status *KEKPoolStatus `json:"status,omitempty"`
}

// KEKPoolAlgorithm Cryptographic algorithm for the KEK Pool.
type KEKPoolAlgorithm string

// KEKPoolCreate defines model for KEKPoolCreate.
type KEKPoolCreate struct {
	// Algorithm Cryptographic algorithm for the KEK Pool.
	Algorithm *KEKPoolAlgorithm `json:"algorithm,omitempty"`

	// Description Description for a KEK Pool.
	Description KEKPoolDescription `json:"description"`

	// IsExportAllowed Indicates if the KEK Pool supports export.
	IsExportAllowed *KEKPoolIsExportAllowed `json:"isExportAllowed,omitempty"`

	// IsImportAllowed Indicates if the KEK Pool supports import (BYOK).
	IsImportAllowed *KEKPoolIsImportAllowed `json:"isImportAllowed,omitempty"`

	// IsVersioningAllowed Indicates if the KEK Pool supports versioning.
	IsVersioningAllowed *KEKPoolIsVersioningAllowed `json:"isVersioningAllowed,omitempty"`

	// Name Friendly name for a KEK Pool.
	Name KEKPoolName `json:"name"`

	// Provider Provider of the KEK Pool management service.
	Provider *KEKPoolProvider `json:"provider,omitempty"`
}

// KEKPoolDescription Description for a KEK Pool.
type KEKPoolDescription = string

// KEKPoolId Unique base64 url-encoded identifier for a KEK Pool.
type KEKPoolId = string

// KEKPoolIsExportAllowed Indicates if the KEK Pool supports export.
type KEKPoolIsExportAllowed = bool

// KEKPoolIsImportAllowed Indicates if the KEK Pool supports import (BYOK).
type KEKPoolIsImportAllowed = bool

// KEKPoolIsVersioningAllowed Indicates if the KEK Pool supports versioning.
type KEKPoolIsVersioningAllowed = bool

// KEKPoolName Friendly name for a KEK Pool.
type KEKPoolName = string

// KEKPoolProvider Provider of the KEK Pool management service.
type KEKPoolProvider string

// KEKPoolStatus Status of the KEK.
type KEKPoolStatus string

// QueryFilter Filter criteria in the format 'field=value'. Supported operators are '=', '!=', '>', '<', '>=', '<='
type QueryFilter = string

// QueryPage Paging criteria in the format 'pageNumber:pageSize' or 'pageNumber'; pageNumber is 0 offset.
type QueryPage = string

// QuerySort Sort criteria in the format 'field:direction' or 'field'. Values for direction are ASC or DESC. If omitted, it defaults to ASC.
type QuerySort = string

// HTTP400 defines model for HTTP400.
type HTTP400 = HTTPError

// HTTP401 defines model for HTTP401.
type HTTP401 = HTTPError

// HTTP403 defines model for HTTP403.
type HTTP403 = HTTPError

// HTTP404 defines model for HTTP404.
type HTTP404 = HTTPError

// HTTP429 defines model for HTTP429.
type HTTP429 = HTTPError

// HTTP500 defines model for HTTP500.
type HTTP500 = HTTPError

// HTTP503 defines model for HTTP503.
type HTTP503 = HTTPError

// HTTP504 defines model for HTTP504.
type HTTP504 = HTTPError

// GetKekpoolParams defines parameters for GetKekpool.
type GetKekpoolParams struct {
	Filter *QueryFilter `form:"filter,omitempty" json:"filter,omitempty"`
	Sort   *QuerySort   `form:"sort,omitempty" json:"sort,omitempty"`
	Page   *QueryPage   `form:"page,omitempty" json:"page,omitempty"`
}

// GetKekpoolKekPoolIDKekParams defines parameters for GetKekpoolKekPoolIDKek.
type GetKekpoolKekPoolIDKekParams struct {
	Filter *QueryFilter `form:"filter,omitempty" json:"filter,omitempty"`
	Sort   *QuerySort   `form:"sort,omitempty" json:"sort,omitempty"`
	Page   *QueryPage   `form:"page,omitempty" json:"page,omitempty"`
}

// PostKekpoolJSONRequestBody defines body for PostKekpool for application/json ContentType.
type PostKekpoolJSONRequestBody = KEKPoolCreate

// PostKekpoolKekPoolIDKekJSONRequestBody defines body for PostKekpoolKekPoolIDKek for application/json ContentType.
type PostKekpoolKekPoolIDKekJSONRequestBody = KEKGenerate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all KEK Pools. Supports optional filtering, sorting, and paging.
	// (GET /kekpool)
	GetKekpool(c *fiber.Ctx, params GetKekpoolParams) error
	// Create a new KEK Pool.
	// (POST /kekpool)
	PostKekpool(c *fiber.Ctx) error
	// List all KEKs in KEK Pool. Supports optional filtering, sorting, and paging.
	// (GET /kekpool/{kekPoolID}/kek)
	GetKekpoolKekPoolIDKek(c *fiber.Ctx, kekPoolID string, params GetKekpoolKekPoolIDKekParams) error
	// Create a new KEK.
	// (POST /kekpool/{kekPoolID}/kek)
	PostKekpoolKekPoolIDKek(c *fiber.Ctx, kekPoolID string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetKekpool operation middleware
func (siw *ServerInterfaceWrapper) GetKekpool(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKekpoolParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", query, &params.Filter)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter filter: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	return siw.Handler.GetKekpool(c, params)
}

// PostKekpool operation middleware
func (siw *ServerInterfaceWrapper) PostKekpool(c *fiber.Ctx) error {

	return siw.Handler.PostKekpool(c)
}

// GetKekpoolKekPoolIDKek operation middleware
func (siw *ServerInterfaceWrapper) GetKekpoolKekPoolIDKek(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "kekPoolID" -------------
	var kekPoolID string

	err = runtime.BindStyledParameterWithOptions("simple", "kekPoolID", c.Params("kekPoolID"), &kekPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter kekPoolID: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKekpoolKekPoolIDKekParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", query, &params.Filter)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter filter: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	return siw.Handler.GetKekpoolKekPoolIDKek(c, kekPoolID, params)
}

// PostKekpoolKekPoolIDKek operation middleware
func (siw *ServerInterfaceWrapper) PostKekpoolKekPoolIDKek(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "kekPoolID" -------------
	var kekPoolID string

	err = runtime.BindStyledParameterWithOptions("simple", "kekPoolID", c.Params("kekPoolID"), &kekPoolID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter kekPoolID: %w", err).Error())
	}

	return siw.Handler.PostKekpoolKekPoolIDKek(c, kekPoolID)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/kekpool", wrapper.GetKekpool)

	router.Post(options.BaseURL+"/kekpool", wrapper.PostKekpool)

	router.Get(options.BaseURL+"/kekpool/:kekPoolID/kek", wrapper.GetKekpoolKekPoolIDKek)

	router.Post(options.BaseURL+"/kekpool/:kekPoolID/kek", wrapper.PostKekpoolKekPoolIDKek)

}

type HTTP400JSONResponse HTTPError

type HTTP401JSONResponse HTTPError

type HTTP403JSONResponse HTTPError

type HTTP404JSONResponse HTTPError

type HTTP429JSONResponse HTTPError

type HTTP500JSONResponse HTTPError

type HTTP503JSONResponse HTTPError

type HTTP504JSONResponse HTTPError

type GetKekpoolRequestObject struct {
	Params GetKekpoolParams
}

type GetKekpoolResponseObject interface {
	VisitGetKekpoolResponse(ctx *fiber.Ctx) error
}

type GetKekpool200JSONResponse []KEKPool

func (response GetKekpool200JSONResponse) VisitGetKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKekpool400JSONResponse struct{ HTTP400JSONResponse }

func (response GetKekpool400JSONResponse) VisitGetKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKekpool401JSONResponse struct{ HTTP401JSONResponse }

func (response GetKekpool401JSONResponse) VisitGetKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKekpool403JSONResponse struct{ HTTP403JSONResponse }

func (response GetKekpool403JSONResponse) VisitGetKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKekpool404JSONResponse struct{ HTTP404JSONResponse }

func (response GetKekpool404JSONResponse) VisitGetKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKekpool429JSONResponse struct{ HTTP429JSONResponse }

func (response GetKekpool429JSONResponse) VisitGetKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKekpool500JSONResponse struct{ HTTP500JSONResponse }

func (response GetKekpool500JSONResponse) VisitGetKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKekpool503JSONResponse struct{ HTTP503JSONResponse }

func (response GetKekpool503JSONResponse) VisitGetKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKekpool504JSONResponse struct{ HTTP504JSONResponse }

func (response GetKekpool504JSONResponse) VisitGetKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKekpoolRequestObject struct {
	Body *PostKekpoolJSONRequestBody
}

type PostKekpoolResponseObject interface {
	VisitPostKekpoolResponse(ctx *fiber.Ctx) error
}

type PostKekpool200JSONResponse KEKPool

func (response PostKekpool200JSONResponse) VisitPostKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostKekpool400JSONResponse struct{ HTTP400JSONResponse }

func (response PostKekpool400JSONResponse) VisitPostKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKekpool401JSONResponse struct{ HTTP401JSONResponse }

func (response PostKekpool401JSONResponse) VisitPostKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKekpool403JSONResponse struct{ HTTP403JSONResponse }

func (response PostKekpool403JSONResponse) VisitPostKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKekpool404JSONResponse struct{ HTTP404JSONResponse }

func (response PostKekpool404JSONResponse) VisitPostKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKekpool429JSONResponse struct{ HTTP429JSONResponse }

func (response PostKekpool429JSONResponse) VisitPostKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKekpool500JSONResponse struct{ HTTP500JSONResponse }

func (response PostKekpool500JSONResponse) VisitPostKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKekpool503JSONResponse struct{ HTTP503JSONResponse }

func (response PostKekpool503JSONResponse) VisitPostKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKekpool504JSONResponse struct{ HTTP504JSONResponse }

func (response PostKekpool504JSONResponse) VisitPostKekpoolResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type GetKekpoolKekPoolIDKekRequestObject struct {
	KekPoolID string `json:"kekPoolID"`
	Params    GetKekpoolKekPoolIDKekParams
}

type GetKekpoolKekPoolIDKekResponseObject interface {
	VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error
}

type GetKekpoolKekPoolIDKek200JSONResponse []KEK

func (response GetKekpoolKekPoolIDKek200JSONResponse) VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKekpoolKekPoolIDKek400JSONResponse struct{ HTTP400JSONResponse }

func (response GetKekpoolKekPoolIDKek400JSONResponse) VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKekpoolKekPoolIDKek401JSONResponse struct{ HTTP401JSONResponse }

func (response GetKekpoolKekPoolIDKek401JSONResponse) VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKekpoolKekPoolIDKek403JSONResponse struct{ HTTP403JSONResponse }

func (response GetKekpoolKekPoolIDKek403JSONResponse) VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKekpoolKekPoolIDKek404JSONResponse struct{ HTTP404JSONResponse }

func (response GetKekpoolKekPoolIDKek404JSONResponse) VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKekpoolKekPoolIDKek429JSONResponse struct{ HTTP429JSONResponse }

func (response GetKekpoolKekPoolIDKek429JSONResponse) VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKekpoolKekPoolIDKek500JSONResponse struct{ HTTP500JSONResponse }

func (response GetKekpoolKekPoolIDKek500JSONResponse) VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKekpoolKekPoolIDKek503JSONResponse struct{ HTTP503JSONResponse }

func (response GetKekpoolKekPoolIDKek503JSONResponse) VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKekpoolKekPoolIDKek504JSONResponse struct{ HTTP504JSONResponse }

func (response GetKekpoolKekPoolIDKek504JSONResponse) VisitGetKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKekpoolKekPoolIDKekRequestObject struct {
	KekPoolID string `json:"kekPoolID"`
	Body      *PostKekpoolKekPoolIDKekJSONRequestBody
}

type PostKekpoolKekPoolIDKekResponseObject interface {
	VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error
}

type PostKekpoolKekPoolIDKek200JSONResponse KEK

func (response PostKekpoolKekPoolIDKek200JSONResponse) VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostKekpoolKekPoolIDKek400JSONResponse struct{ HTTP400JSONResponse }

func (response PostKekpoolKekPoolIDKek400JSONResponse) VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKekpoolKekPoolIDKek401JSONResponse struct{ HTTP401JSONResponse }

func (response PostKekpoolKekPoolIDKek401JSONResponse) VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKekpoolKekPoolIDKek403JSONResponse struct{ HTTP403JSONResponse }

func (response PostKekpoolKekPoolIDKek403JSONResponse) VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKekpoolKekPoolIDKek404JSONResponse struct{ HTTP404JSONResponse }

func (response PostKekpoolKekPoolIDKek404JSONResponse) VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKekpoolKekPoolIDKek429JSONResponse struct{ HTTP429JSONResponse }

func (response PostKekpoolKekPoolIDKek429JSONResponse) VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKekpoolKekPoolIDKek500JSONResponse struct{ HTTP500JSONResponse }

func (response PostKekpoolKekPoolIDKek500JSONResponse) VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKekpoolKekPoolIDKek503JSONResponse struct{ HTTP503JSONResponse }

func (response PostKekpoolKekPoolIDKek503JSONResponse) VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKekpoolKekPoolIDKek504JSONResponse struct{ HTTP504JSONResponse }

func (response PostKekpoolKekPoolIDKek504JSONResponse) VisitPostKekpoolKekPoolIDKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all KEK Pools. Supports optional filtering, sorting, and paging.
	// (GET /kekpool)
	GetKekpool(ctx context.Context, request GetKekpoolRequestObject) (GetKekpoolResponseObject, error)
	// Create a new KEK Pool.
	// (POST /kekpool)
	PostKekpool(ctx context.Context, request PostKekpoolRequestObject) (PostKekpoolResponseObject, error)
	// List all KEKs in KEK Pool. Supports optional filtering, sorting, and paging.
	// (GET /kekpool/{kekPoolID}/kek)
	GetKekpoolKekPoolIDKek(ctx context.Context, request GetKekpoolKekPoolIDKekRequestObject) (GetKekpoolKekPoolIDKekResponseObject, error)
	// Create a new KEK.
	// (POST /kekpool/{kekPoolID}/kek)
	PostKekpoolKekPoolIDKek(ctx context.Context, request PostKekpoolKekPoolIDKekRequestObject) (PostKekpoolKekPoolIDKekResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetKekpool operation middleware
func (sh *strictHandler) GetKekpool(ctx *fiber.Ctx, params GetKekpoolParams) error {
	var request GetKekpoolRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKekpool(ctx.UserContext(), request.(GetKekpoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKekpool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKekpoolResponseObject); ok {
		if err := validResponse.VisitGetKekpoolResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKekpool operation middleware
func (sh *strictHandler) PostKekpool(ctx *fiber.Ctx) error {
	var request PostKekpoolRequestObject

	var body PostKekpoolJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKekpool(ctx.UserContext(), request.(PostKekpoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKekpool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKekpoolResponseObject); ok {
		if err := validResponse.VisitPostKekpoolResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetKekpoolKekPoolIDKek operation middleware
func (sh *strictHandler) GetKekpoolKekPoolIDKek(ctx *fiber.Ctx, kekPoolID string, params GetKekpoolKekPoolIDKekParams) error {
	var request GetKekpoolKekPoolIDKekRequestObject

	request.KekPoolID = kekPoolID
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKekpoolKekPoolIDKek(ctx.UserContext(), request.(GetKekpoolKekPoolIDKekRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKekpoolKekPoolIDKek")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKekpoolKekPoolIDKekResponseObject); ok {
		if err := validResponse.VisitGetKekpoolKekPoolIDKekResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKekpoolKekPoolIDKek operation middleware
func (sh *strictHandler) PostKekpoolKekPoolIDKek(ctx *fiber.Ctx, kekPoolID string) error {
	var request PostKekpoolKekPoolIDKekRequestObject

	request.KekPoolID = kekPoolID

	var body PostKekpoolKekPoolIDKekJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKekpoolKekPoolIDKek(ctx.UserContext(), request.(PostKekpoolKekPoolIDKekRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKekpoolKekPoolIDKek")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKekpoolKekPoolIDKekResponseObject); ok {
		if err := validResponse.VisitPostKekpoolKekPoolIDKekResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"KH0WzqQ23ql76rZoepP+LwAA///HG+rCVSEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
