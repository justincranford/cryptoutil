// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// Defines values for KEKProvider.
const (
	AWS      KEKProvider = "AWS"
	Azure    KEKProvider = "Azure"
	GCP      KEKProvider = "GCP"
	Internal KEKProvider = "Internal"
)

// Defines values for KEKStatus.
const (
	Active        KEKStatus = "active"
	Disabled      KEKStatus = "disabled"
	Expired       KEKStatus = "expired"
	PendingImport KEKStatus = "pending_import"
)

// HTTPError defines model for HTTPError.
type HTTPError struct {
	// Error Error message
	Error *string `json:"error,omitempty"`
}

// KEK defines model for KEK.
type KEK struct {
	// Algorithm Cryptographic algorithm for the KEK (e.g., RSA-2048, AES-256).
	Algorithm *KEKAlgorithm `json:"algorithm,omitempty"`

	// CreateDate Timestamp when the KEK was created.
	CreateDate *time.Time `json:"createDate,omitempty"`

	// Description Description for a KEK.
	Description *KEKDescription `json:"description,omitempty"`

	// EnableVersioning Indicates whether the KEK supports automatic versioning.
	EnableVersioning *bool `json:"enableVersioning,omitempty"`

	// Exportable Indicates if key material export is allowed.
	Exportable *bool `json:"exportable,omitempty"`

	// Id Unique identifier for a KEK.
	Id *KEKId `json:"id,omitempty"`

	// Imported Indicates if the KEK material was imported (BYOK).
	Imported *bool `json:"imported,omitempty"`

	// KeyMaterial Base64-encoded key material (if available).
	KeyMaterial *string `json:"keyMaterial,omitempty"`

	// Name Friendly name for a KEK.
	Name *KEKName `json:"name,omitempty"`

	// Provider Provider of the key management service.
	Provider *KEKProvider `json:"provider,omitempty"`

	// Status Operational status of the KEK.
	Status *KEKStatus `json:"status,omitempty"`
}

// KEKProvider Provider of the key management service.
type KEKProvider string

// KEKAlgorithm Cryptographic algorithm for the KEK (e.g., RSA-2048, AES-256).
type KEKAlgorithm = string

// KEKCreate defines model for KEKCreate.
type KEKCreate struct {
	// Algorithm Cryptographic algorithm for the KEK (e.g., RSA-2048, AES-256).
	Algorithm KEKAlgorithm `json:"algorithm"`

	// Description Description for a KEK.
	Description *KEKDescription `json:"description,omitempty"`

	// EnableVersioning Whether the KEK should support versioning.
	EnableVersioning *bool `json:"enableVersioning,omitempty"`

	// Exportable Indicates if key material export is allowed.
	Exportable *bool `json:"exportable,omitempty"`

	// Imported Indicates whether key material will be imported.
	Imported *bool `json:"imported,omitempty"`

	// Name Friendly name for a KEK.
	Name KEKName `json:"name"`
}

// KEKDescription Description for a KEK.
type KEKDescription = string

// KEKId Unique identifier for a KEK.
type KEKId = string

// KEKName Friendly name for a KEK.
type KEKName = string

// KEKStatus Operational status of the KEK.
type KEKStatus string

// QueryFilter Filter criteria in the format 'field=value'. Supported operators are '=', '!=', '>', '<', '>=', '<='
type QueryFilter = string

// QueryPage Paging criteria in the format 'pageNumber:pageSize' or 'pageNumber'; pageNumber is 0 offset.
type QueryPage = string

// QuerySort Sort criteria in the format 'field:direction' or 'field'. Values for direction are ASC or DESC. If omitted, it defaults to ASC.
type QuerySort = string

// HTTP400 defines model for HTTP400.
type HTTP400 = HTTPError

// HTTP401 defines model for HTTP401.
type HTTP401 = HTTPError

// HTTP403 defines model for HTTP403.
type HTTP403 = HTTPError

// HTTP404 defines model for HTTP404.
type HTTP404 = HTTPError

// HTTP429 defines model for HTTP429.
type HTTP429 = HTTPError

// HTTP500 defines model for HTTP500.
type HTTP500 = HTTPError

// HTTP503 defines model for HTTP503.
type HTTP503 = HTTPError

// HTTP504 defines model for HTTP504.
type HTTP504 = HTTPError

// GetKekParams defines parameters for GetKek.
type GetKekParams struct {
	Filter *QueryFilter `form:"filter,omitempty" json:"filter,omitempty"`
	Sort   *QuerySort   `form:"sort,omitempty" json:"sort,omitempty"`
	Page   *QueryPage   `form:"page,omitempty" json:"page,omitempty"`
}

// PostKekJSONRequestBody defines body for PostKek for application/json ContentType.
type PostKekJSONRequestBody = KEKCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all KEKs
	// (GET /kek)
	GetKek(c *fiber.Ctx, params GetKekParams) error
	// Create a new KEK
	// (POST /kek)
	PostKek(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetKek operation middleware
func (siw *ServerInterfaceWrapper) GetKek(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKekParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", query, &params.Filter)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter filter: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	return siw.Handler.GetKek(c, params)
}

// PostKek operation middleware
func (siw *ServerInterfaceWrapper) PostKek(c *fiber.Ctx) error {

	return siw.Handler.PostKek(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/kek", wrapper.GetKek)

	router.Post(options.BaseURL+"/kek", wrapper.PostKek)

}

type HTTP400JSONResponse HTTPError

type HTTP401JSONResponse HTTPError

type HTTP403JSONResponse HTTPError

type HTTP404JSONResponse HTTPError

type HTTP429JSONResponse HTTPError

type HTTP500JSONResponse HTTPError

type HTTP503JSONResponse HTTPError

type HTTP504JSONResponse HTTPError

type GetKekRequestObject struct {
	Params GetKekParams
}

type GetKekResponseObject interface {
	VisitGetKekResponse(ctx *fiber.Ctx) error
}

type GetKek200JSONResponse []KEK

func (response GetKek200JSONResponse) VisitGetKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetKek400JSONResponse struct{ HTTP400JSONResponse }

func (response GetKek400JSONResponse) VisitGetKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetKek401JSONResponse struct{ HTTP401JSONResponse }

func (response GetKek401JSONResponse) VisitGetKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetKek403JSONResponse struct{ HTTP403JSONResponse }

func (response GetKek403JSONResponse) VisitGetKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetKek404JSONResponse struct{ HTTP404JSONResponse }

func (response GetKek404JSONResponse) VisitGetKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetKek429JSONResponse struct{ HTTP429JSONResponse }

func (response GetKek429JSONResponse) VisitGetKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type GetKek500JSONResponse struct{ HTTP500JSONResponse }

func (response GetKek500JSONResponse) VisitGetKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetKek503JSONResponse struct{ HTTP503JSONResponse }

func (response GetKek503JSONResponse) VisitGetKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type GetKek504JSONResponse struct{ HTTP504JSONResponse }

func (response GetKek504JSONResponse) VisitGetKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

type PostKekRequestObject struct {
	Body *PostKekJSONRequestBody
}

type PostKekResponseObject interface {
	VisitPostKekResponse(ctx *fiber.Ctx) error
}

type PostKek200JSONResponse KEK

func (response PostKek200JSONResponse) VisitPostKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostKek400JSONResponse struct{ HTTP400JSONResponse }

func (response PostKek400JSONResponse) VisitPostKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostKek401JSONResponse struct{ HTTP401JSONResponse }

func (response PostKek401JSONResponse) VisitPostKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostKek403JSONResponse struct{ HTTP403JSONResponse }

func (response PostKek403JSONResponse) VisitPostKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostKek404JSONResponse struct{ HTTP404JSONResponse }

func (response PostKek404JSONResponse) VisitPostKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostKek429JSONResponse struct{ HTTP429JSONResponse }

func (response PostKek429JSONResponse) VisitPostKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response)
}

type PostKek500JSONResponse struct{ HTTP500JSONResponse }

func (response PostKek500JSONResponse) VisitPostKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostKek503JSONResponse struct{ HTTP503JSONResponse }

func (response PostKek503JSONResponse) VisitPostKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(503)

	return ctx.JSON(&response)
}

type PostKek504JSONResponse struct{ HTTP504JSONResponse }

func (response PostKek504JSONResponse) VisitPostKekResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(504)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all KEKs
	// (GET /kek)
	GetKek(ctx context.Context, request GetKekRequestObject) (GetKekResponseObject, error)
	// Create a new KEK
	// (POST /kek)
	PostKek(ctx context.Context, request PostKekRequestObject) (PostKekResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetKek operation middleware
func (sh *strictHandler) GetKek(ctx *fiber.Ctx, params GetKekParams) error {
	var request GetKekRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetKek(ctx.UserContext(), request.(GetKekRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKek")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetKekResponseObject); ok {
		if err := validResponse.VisitGetKekResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostKek operation middleware
func (sh *strictHandler) PostKek(ctx *fiber.Ctx) error {
	var request PostKekRequestObject

	var body PostKekJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostKek(ctx.UserContext(), request.(PostKekRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostKek")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostKekResponseObject); ok {
		if err := validResponse.VisitPostKekResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/9H5tcQVAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
