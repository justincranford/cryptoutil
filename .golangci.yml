# golangci-lint configuration for cryptoutil project
#
# This project uses Go 1.25.1 with golangci-lint v1.25.1
# All linters are compatible with the current Go version
#
# Usage: golangci-lint run --timeout=10m

run:
  timeout: 10m
  issues-exit-code: 1
  tests: true

output:
  formats:
    - format: colored-line-number
  print-issued-lines: true
  print-linter-name: true
  sort-results: true

linters:
  enable:
    # Essential linters
    - errcheck      # Check for unchecked errors
    - gosimple      # Suggest code simplifications
    - govet         # Reports suspicious constructs (Go's built-in vet)
    - ineffassign   # Detect ineffectual assignments
    - staticcheck   # Advanced static analysis checks
    - unused        # Find unused constants, variables, functions and types

    # Code quality
    - gofmt         # Check code formatting
    # gofumpt       # disabled: handled by pre-commit hooks (gofumpt -extra -w) and CI checks
    - goimports     # Check import formatting and unused imports
    - revive        # Golint replacement with more rules
    - stylecheck    # Go style guide compliance

    # Security
    - gosec         # Security-focused static analysis

    # Documentation and maintenance
    - godot         # Check for missing periods in documentation comments
    # - godox         # disabled: TODO/FIXME comments tracked in todos.md instead

    # Context and error handling
    - noctx         # Check for missing context in HTTP requests
    - wrapcheck     # Check error wrapping consistency

    # Testing quality
    - thelper       # Check test helper functions
    - tparallel     # Check for parallel test issues
    - testpackage   # Test package naming conventions
    - gomodguard    # Prevent importing blocked modules
    - gomoddirectives # Validate Go module directives

    # Performance
    - prealloc      # Find slice declarations that could pre-allocate
    - bodyclose     # Check for HTTP response body closure

    # Maintainability
    - copyloopvar    # Check for loop variables captured by reference (replaces exportloopref)
    - goconst       # Find repeated strings that could be constants
    - importas      # Enforce consistent import aliasing
    # - mnd           # Detect magic numbers (formerly gomnd) - TEMPORARILY DISABLED
    # - wsl         # DISABLED: Conflicts with gofumpt formatting
    - nlreturn      # Enforce newlines after return statements
    - goheader       # Copyright header enforcement

    # Error handling
    - errorlint     # Find code that will cause problems with Go 1.13 error wrapping

  disable:
    # Disabled for code quality/complexity management
    - dupl      # Code duplication detection
    - gocyclo   # Cyclomatic complexity
    - godox     # TODO/FIXME comments tracked in todos.md instead

linters-settings:
  errcheck:
    check-type-assertions: true
    check-blank: true

  gosec:
    severity: medium
    confidence: medium

  gocyclo:
    min-complexity: 15

  goconst:
    min-len: 1
    min-occurrences: 2
    numbers: true
    ignore-tests: false

  mnd:
    # List of numbers to exclude from analysis
    ignored-numbers:
      - '0666'
      - '0755'
      - '42'
    # List of file patterns to exclude from analysis
    ignored-files:
      - 'magic_.*.go'
    # List of function patterns to exclude from analysis
    ignored-functions:
      - 'math.*'
      - 'http.StatusText'

  dupl:
    threshold: 100

  copyloopvar:
    # Check for loop variables captured by reference in closures

  importas:
    # Enforce consistent import aliasing
    alias:
      # Standard library aliases
      - pkg: encoding/json
        alias: json
      - pkg: encoding/xml
        alias: xml
      - pkg: net/http
        alias: http
      # Common third-party aliases
      - pkg: github.com/gofiber/fiber/v2
        alias: fiber
      - pkg: github.com/stretchr/testify
        alias: testify

  misspell:
    locale: US
    ignore-words:
      - cryptoutil
      - keygen
      - jwa
      - jwk
      - jwe
      - jws
      - ecdsa
      - ecdh
      - rsa
      - hmac
      - aes
      - pkcs
      - pkix
      - x509
      - pem
      - der

  revive:
    severity: warning  # Overridden by global severity rules - style issues shouldn't block builds

  stylecheck:
    checks: ["all", "-ST1000"]  # Exclude ST1000 (package comment) - many packages have descriptive names that don't need additional comments

  godot:
    scope: declarations  # Check periods in all declarations
    capital: false       # Don't require capitalization

  godox:
    keywords:            # Detect these maintenance keywords
      - TODO
      - FIXME
      - BUG
      - HACK

  wrapcheck:
    ignoreSigs:          # Don't require wrapping for these function signatures
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - .Wrap(
      - .Wrapf(

  thelper:
    test:                # Check t.Helper() calls in test functions
      begin: true

  wsl:
    # Whitespace linter - enforces consistent whitespace usage

  goheader:
    # Copyright header enforcement
    values:
      const:
        LICENSE: |
          Copyright (c) 2025 Justin Cranford

  lll:
    # Line length limits
    line-length: 190

  testpackage:
    # Test package naming conventions
    # By default, enforces external testing (separate _test packages)
    # This ensures tests use the public API rather than internal implementation
    skip-regexp: '.*_test\.go$'  # Skip all test files (allow internal testing)

  gomodguard:
    # Prevent importing blocked modules
    blocked:
      # Block all versions of these modules
      modules:
        - github.com/pkg/errors: # Use Go 1.13+ error wrapping instead
            recommendations:
              - errors
              - fmt

issues:
  exclude-dirs:
    # Generated/dependency directories - DO NOT LINT
    - vendor      # Skip vendored Go dependencies, third-party Go code
    - api/client  # Skip OpenAPI client code, generated Go code by oapi-codegen
    - api/model   # Skip OpenAPI model code, generated Go code by oapi-codegen
    - api/server  # Skip OpenAPI server code, generated Go code by oapi-codegen

    # Build artifacts and reports - DO NOT LINT
    - dast-reports # Skip generated DAST security scan reports

    # IDE and tool configurations - DO NOT LINT
    - .idea       # Skip IntelliJ IDEA/GoLand IDE files, no Go files
    - .vscode     # Skip VS Code IDE files, no Go files
    - .zap        # Skip ZAP security scanner configuration, no Go files

    # Version control and CI/CD - DO NOT LINT
    - .git        # Skip Git repository metadata, no Go files
    - .github     # Skip GitHub workflows and configurations, no Go files

    # Configuration and deployment files - DO NOT LINT
    - configs     # Skip YAML/JSON configuration files, no Go files
    - deployments # Skip Docker/K8s deployment configurations, no Go files

    # Documentation and assets - DO NOT LINT
    - docs        # Skip Markdown documentation files, no Go files
    - static      # Skip static web assets (CSS, images, etc.), no Go files

    # RECOMMENDED: DO NOT exclude these directories (they contain Go code to lint):
    # - cmd/        # Application entry points - SHOULD BE LINTED
    # - internal/   # Internal packages - SHOULD BE LINTED
    # - pkg/        # Public packages - SHOULD BE LINTED
    # - scripts/    # Build scripts with Go code - SHOULD BE LINTED
    # - api/        # OpenAPI generation triggers (generate.go) - SHOULD BE LINTED
  exclude-files:
    - ".*\\.pb\\.go$"
    - ".*_gen\\.go$"
  uniq-by-line: true
  max-issues-per-linter: 50
  max-same-issues: 10

  exclude-rules:
    - path: _test\.go
      linters:
        - dupl      # Code duplication detection
        - gocyclo   # Cyclomatic complexity

severity:
  default-severity: error  # Most issues should block builds (security, logic bugs, crashes)
  rules:
    - linters:
        - revive           # Golint replacement with more rules
        - stylecheck       # Go style guide compliance
      severity: warning    # Style/readability issues - important but shouldn't break builds
    - linters:
        - misspell         # Find common misspellings in comments and strings
      severity: info       # Cosmetic typos - lowest priority, can be batch-fixed later
