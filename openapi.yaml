# https://raw.githubusercontent.com/OAI/OpenAPI-Specification/refs/heads/main/schemas/v3.1/schema.yaml
openapi: 3.0.3
info:
  title: API
  version: "0.0.1"
  description: >
    REST API
servers:
  - url: http://localhost:8080/
paths:
  /kekpool:
    post:
      summary: Create a new KEK Pool.
      description: Create a new KEK Pool. Depending on the provider, it wraps one or many KEKs.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KEKPoolCreate'
      responses:
        '200':
          description: KEK pool created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KEKPool'
        '400':
          $ref: '#/components/responses/HTTP400'
        '401':
          $ref: '#/components/responses/HTTP401'
        '403':
          $ref: '#/components/responses/HTTP403'
        '404':
          $ref: '#/components/responses/HTTP404'
        '429':
          $ref: '#/components/responses/HTTP429'
        '500':
          $ref: '#/components/responses/HTTP500'
        '503':
          $ref: '#/components/responses/HTTP503'
        '504':
          $ref: '#/components/responses/HTTP504'
    get:
      summary: List all KEK Pools. Supports optional filtering, sorting, and paging.
      description: List all KEK Pools. Supports optional filtering, sorting, and paging.
      parameters:
        - in: query
          name: filter
          schema:
            $ref: '#/components/schemas/QueryFilter'
        - in: query
          name: sort
          schema:
            $ref: '#/components/schemas/QuerySort'
        - in: query
          name: page
          schema:
            $ref: '#/components/schemas/QueryPage'
      responses:
        '200':
          description: A JSON array of 0 or more KEK Pools.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KEKPool'
        '400':
          $ref: '#/components/responses/HTTP400'
        '401':
          $ref: '#/components/responses/HTTP401'
        '403':
          $ref: '#/components/responses/HTTP403'
        '404':
          $ref: '#/components/responses/HTTP404'
        '429':
          $ref: '#/components/responses/HTTP429'
        '500':
          $ref: '#/components/responses/HTTP500'
        '503':
          $ref: '#/components/responses/HTTP503'
        '504':
          $ref: '#/components/responses/HTTP504'

  /kekpool/{kekPoolID}/kek:
    parameters:
      - name: kekPoolID
        in: path
        required: true
        schema:
          type: string
    post:
      summary: Create a new KEK.
      description: Create a new KEK.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KEKGenerate'
      responses:
        '200':
          description: KEK generated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KEK'
        '400':
          $ref: '#/components/responses/HTTP400'
        '401':
          $ref: '#/components/responses/HTTP401'
        '403':
          $ref: '#/components/responses/HTTP403'
        '404':
          $ref: '#/components/responses/HTTP404'
        '429':
          $ref: '#/components/responses/HTTP429'
        '500':
          $ref: '#/components/responses/HTTP500'
        '503':
          $ref: '#/components/responses/HTTP503'
        '504':
          $ref: '#/components/responses/HTTP504'
    get:
      summary: List all KEKs in KEK Pool. Supports optional filtering, sorting, and paging.
      description: List all KEKs in KEK Pool. Supports optional filtering, sorting, and paging.
      parameters:
        - in: query
          name: filter
          schema:
            $ref: '#/components/schemas/QueryFilter'
        - in: query
          name: sort
          schema:
            $ref: '#/components/schemas/QuerySort'
        - in: query
          name: page
          schema:
            $ref: '#/components/schemas/QueryPage'
      responses:
        '200':
          description: A JSON array of 0 or more KEKs in a KEK Pool.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KEK'
        '400':
          $ref: '#/components/responses/HTTP400'
        '401':
          $ref: '#/components/responses/HTTP401'
        '403':
          $ref: '#/components/responses/HTTP403'
        '404':
          $ref: '#/components/responses/HTTP404'
        '429':
          $ref: '#/components/responses/HTTP429'
        '500':
          $ref: '#/components/responses/HTTP500'
        '503':
          $ref: '#/components/responses/HTTP503'
        '504':
          $ref: '#/components/responses/HTTP504'

components:
  schemas:
    QueryFilter:
      type: string
      description: "Filter criteria in the format 'field=value'. Supported operators are '=', '!=', '>', '<', '>=', '<='"
      example: "field=value"
    QuerySort:
      type: string
      description: "Sort criteria in the format 'field:direction' or 'field'. Values for direction are ASC or DESC. If omitted, it defaults to ASC."
      example: "field:DESC"
    QueryPage:
      type: string
      description: "Paging criteria in the format 'pageNumber:pageSize' or 'pageNumber'; pageNumber is 0 offset."
      example: "0:25"

    KEKPoolCreate:
      type: object
      required: [ name, description ]
      properties:
        name:
          $ref: '#/components/schemas/KEKPoolName'
        description:
          $ref: '#/components/schemas/KEKPoolDescription'
        algorithm:
          $ref: '#/components/schemas/KEKPoolAlgorithm'
        provider:
          $ref: '#/components/schemas/KEKPoolProvider'
        isVersioningAllowed:
          $ref: '#/components/schemas/KEKPoolIsVersioningAllowed'
        isImportAllowed:
          $ref: '#/components/schemas/KEKPoolIsImportAllowed'
        isExportAllowed:
          $ref: '#/components/schemas/KEKPoolIsExportAllowed'

    KEKPool:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/KEKPoolId'
        name:
          $ref: '#/components/schemas/KEKPoolName'
        description:
          $ref: '#/components/schemas/KEKPoolDescription'
        algorithm:
          $ref: '#/components/schemas/KEKPoolAlgorithm'
        provider:
          $ref: '#/components/schemas/KEKPoolProvider'
        isVersioningAllowed:
          $ref: '#/components/schemas/KEKPoolIsVersioningAllowed'
        isImportAllowed:
          $ref: '#/components/schemas/KEKPoolIsImportAllowed'
        isExportAllowed:
          $ref: '#/components/schemas/KEKPoolIsExportAllowed'
        status:
          $ref: '#/components/schemas/KEKPoolStatus'

    KEKPoolUpdate:
      type: object
      required: [ name, description ]
      properties:
        name:
          $ref: '#/components/schemas/KEKPoolName'
        description:
          $ref: '#/components/schemas/KEKPoolDescription'

    KEKGenerate:
      type: object
      properties:

    KEKUpdate:
      type: object
      required: [ kek_pool_id, kek_version ]
      properties:
        kek_pool_id:
          $ref: '#/components/schemas/KEKPoolId'
        kek_version:
          $ref: '#/components/schemas/KEKId'

    KEK:
      type: object
      properties:
        kek_pool_id:
          $ref: '#/components/schemas/KEKPoolId'
        kek_id:
          $ref: '#/components/schemas/KEKId'
        generateDate:
          $ref: '#/components/schemas/KEKGenerateDate'

    KEKPoolId:
      type: string
      description: Unique base64 url-encoded identifier for a KEK.
      minimum: 2
    KEKPoolName:
      type: string
      description: Friendly name for a KEK.
      minLength: 1
      maxLength: 63
    KEKPoolDescription:
      type: string
      description: Description for a KEK.
      minLength: 1
      maxLength: 255
    KEKPoolAlgorithm:
      type: string
      enum: [ AES-256,AES-192, AES-128 ]
      example: "AES-256"
      description: Cryptographic algorithm for the KEK.
    KEKPoolProvider:
      type: string
      enum: [ Internal ]
      example: "Internal"
      description: Provider of the key management service.
    KEKPoolIsVersioningAllowed:
      type: boolean
      example: true
      description: Indicates if the KEK Pool supports versioning.
    KEKPoolIsImportAllowed:
      type: boolean
      example: false
      description: Indicates if the KEK Pool supports import (BYOK).
    KEKPoolIsExportAllowed:
      type: boolean
      example: false
      description: Indicates if the KEK Pool supports export.
    KEKPoolStatus:
      type: string
      enum: [ pending_generate, pending_import, active, disabled ]
      example: "pending_generate"
      description: Status of the KEK.

    KEKId:
      type: integer
      description: Unique version of the KEK in a KEK Pool.
      minimum: 1
    KEKGenerateDate:
      type: string
      format: date-time
      example: "2025-03-14T12:00:00Z"
      description: ISO 8601 UTC timestamp of KEK generation.

    HTTPError:
      type: object
      properties:
        error:
          type: string
          description: Error message

  responses:
    HTTP400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    HTTP401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    HTTP403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    HTTP404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    HTTP429:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    HTTP500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    HTTP503:
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    HTTP504:
      description: Gateway Timeout
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
